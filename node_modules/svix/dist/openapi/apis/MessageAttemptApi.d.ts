import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageStatus } from '../models/MessageStatus';
import { StatusCodeClass } from '../models/StatusCodeClass';
export declare class MessageAttemptApiRequestFactory extends BaseAPIRequestFactory {
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId: string, msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getAttemptHeadersApiV1AppAppIdMsgMsgIdAttemptAttemptIdHeadersGet(appId: string, msgId: string, attemptId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId: string, appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId: string, appId: string, iterator?: string, limit?: number, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(appId: string, msgId: string, iterator?: string, limit?: number, endpointId?: string, eventTypes?: Array<string>, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(appId: string, endpointId: string, iterator?: string, limit?: number, status?: MessageStatus, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(appId: string, msgId: string, endpointId?: string, iterator?: string, limit?: number, status?: MessageStatus, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId: string, appId: string, endpointId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId: string, msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class MessageAttemptApiResponseProcessor {
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(response: ResponseContext): Promise<MessageAttemptOut>;
    getAttemptHeadersApiV1AppAppIdMsgMsgIdAttemptAttemptIdHeadersGet(response: ResponseContext): Promise<MessageAttemptHeadersOut>;
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(response: ResponseContext): Promise<ListResponseMessageEndpointOut>;
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(response: ResponseContext): Promise<ListResponseEndpointMessageOut>;
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(response: ResponseContext): Promise<ListResponseMessageAttemptOut>;
    listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(response: ResponseContext): Promise<ListResponseMessageAttemptOut>;
    listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(response: ResponseContext): Promise<ListResponseMessageAttemptOut>;
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(response: ResponseContext): Promise<ListResponseMessageAttemptEndpointOut>;
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(response: ResponseContext): Promise<void>;
}
