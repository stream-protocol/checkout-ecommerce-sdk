import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationStats } from '../models/ApplicationStats';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
export declare class ApplicationApiRequestFactory extends BaseAPIRequestFactory {
    createApplicationApiV1AppPost(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    deleteApplicationApiV1AppAppIdDelete(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getAppStatsApiV1AppAppIdStatsGet(appId: string, since: Date, until: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getApplicationApiV1AppAppIdGet(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listApplicationsApiV1AppGet(iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    updateApplicationApiV1AppAppIdPut(appId: string, applicationIn: ApplicationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class ApplicationApiResponseProcessor {
    createApplicationApiV1AppPost(response: ResponseContext): Promise<ApplicationOut>;
    deleteApplicationApiV1AppAppIdDelete(response: ResponseContext): Promise<void>;
    getAppStatsApiV1AppAppIdStatsGet(response: ResponseContext): Promise<ApplicationStats>;
    getAppUsageStatsApiV1AppStatsUsageGet(response: ResponseContext): Promise<ListResponseApplicationStats>;
    getApplicationApiV1AppAppIdGet(response: ResponseContext): Promise<ApplicationOut>;
    listApplicationsApiV1AppGet(response: ResponseContext): Promise<ListResponseApplicationOut>;
    updateApplicationApiV1AppAppIdPut(response: ResponseContext): Promise<ApplicationOut>;
}
