import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
export declare class IntegrationApiRequestFactory extends BaseAPIRequestFactory {
    createIntegrationApiV1AppAppIdIntegrationPost(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    deleteIntegrationApiV1AppAppIdIntegrationIntegIdDelete(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getIntegrationApiV1AppAppIdIntegrationIntegIdGet(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGet(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listIntegrationsApiV1AppAppIdIntegrationGet(appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePost(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    updateIntegrationApiV1AppAppIdIntegrationIntegIdPut(integId: string, appId: string, integrationUpdate: IntegrationUpdate, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class IntegrationApiResponseProcessor {
    createIntegrationApiV1AppAppIdIntegrationPost(response: ResponseContext): Promise<IntegrationOut>;
    deleteIntegrationApiV1AppAppIdIntegrationIntegIdDelete(response: ResponseContext): Promise<void>;
    getIntegrationApiV1AppAppIdIntegrationIntegIdGet(response: ResponseContext): Promise<IntegrationOut>;
    getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGet(response: ResponseContext): Promise<IntegrationKeyOut>;
    listIntegrationsApiV1AppAppIdIntegrationGet(response: ResponseContext): Promise<ListResponseIntegrationOut>;
    rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePost(response: ResponseContext): Promise<IntegrationKeyOut>;
    updateIntegrationApiV1AppAppIdIntegrationIntegIdPut(response: ResponseContext): Promise<IntegrationOut>;
}
