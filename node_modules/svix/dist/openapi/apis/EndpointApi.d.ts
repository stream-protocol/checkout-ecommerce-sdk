import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EventExampleIn } from '../models/EventExampleIn';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { MessageOut } from '../models/MessageOut';
import { RecoverIn } from '../models/RecoverIn';
import { ReplayIn } from '../models/ReplayIn';
export declare class EndpointApiRequestFactory extends BaseAPIRequestFactory {
    createEndpointApiV1AppAppIdEndpointPost(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listEndpointsApiV1AppAppIdEndpointGet(appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(endpointId: string, appId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    simulateEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationSimulatePost(endpointId: string, appId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId: string, appId: string, endpointUpdate: EndpointUpdate, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class EndpointApiResponseProcessor {
    createEndpointApiV1AppAppIdEndpointPost(response: ResponseContext): Promise<EndpointOut>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(response: ResponseContext): Promise<void>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(response: ResponseContext): Promise<EndpointOut>;
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(response: ResponseContext): Promise<EndpointHeadersOut>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(response: ResponseContext): Promise<EndpointSecretOut>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(response: ResponseContext): Promise<EndpointStats>;
    getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(response: ResponseContext): Promise<EndpointTransformationOut>;
    listEndpointsApiV1AppAppIdEndpointGet(response: ResponseContext): Promise<ListResponseEndpointOut>;
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(response: ResponseContext): Promise<void>;
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(response: ResponseContext): Promise<any>;
    replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(response: ResponseContext): Promise<any>;
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(response: ResponseContext): Promise<void>;
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(response: ResponseContext): Promise<MessageOut>;
    setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(response: ResponseContext): Promise<void>;
    simulateEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationSimulatePost(response: ResponseContext): Promise<EndpointTransformationSimulateOut>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(response: ResponseContext): Promise<EndpointOut>;
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(response: ResponseContext): Promise<void>;
}
