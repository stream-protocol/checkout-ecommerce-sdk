import { BaseAPIRequestFactory } from './baseapi';
import { Configuration } from '../configuration';
import { RequestContext, ResponseContext } from '../http/http';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
export declare class MessageApiRequestFactory extends BaseAPIRequestFactory {
    createMessageApiV1AppAppIdMsgPost(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    getMessageApiV1AppAppIdMsgMsgIdGet(msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
    listMessagesApiV1AppAppIdMsgGet(appId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext>;
}
export declare class MessageApiResponseProcessor {
    createMessageApiV1AppAppIdMsgPost(response: ResponseContext): Promise<MessageOut>;
    getMessageApiV1AppAppIdMsgMsgIdGet(response: ResponseContext): Promise<MessageOut>;
    listMessagesApiV1AppAppIdMsgGet(response: ResponseContext): Promise<ListResponseMessageOut>;
}
