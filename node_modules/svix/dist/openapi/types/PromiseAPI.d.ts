import { Configuration } from '../configuration';
import { ApplicationIn } from '../models/ApplicationIn';
import { ApplicationOut } from '../models/ApplicationOut';
import { ApplicationStats } from '../models/ApplicationStats';
import { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';
import { DashboardAccessOut } from '../models/DashboardAccessOut';
import { EndpointHeadersIn } from '../models/EndpointHeadersIn';
import { EndpointHeadersOut } from '../models/EndpointHeadersOut';
import { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';
import { EndpointIn } from '../models/EndpointIn';
import { EndpointOut } from '../models/EndpointOut';
import { EndpointSecretOut } from '../models/EndpointSecretOut';
import { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';
import { EndpointStats } from '../models/EndpointStats';
import { EndpointTransformationIn } from '../models/EndpointTransformationIn';
import { EndpointTransformationOut } from '../models/EndpointTransformationOut';
import { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';
import { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';
import { EndpointUpdate } from '../models/EndpointUpdate';
import { EnvironmentIn } from '../models/EnvironmentIn';
import { EnvironmentOut } from '../models/EnvironmentOut';
import { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';
import { EventExampleIn } from '../models/EventExampleIn';
import { EventTypeExampleOut } from '../models/EventTypeExampleOut';
import { EventTypeIn } from '../models/EventTypeIn';
import { EventTypeOut } from '../models/EventTypeOut';
import { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';
import { EventTypeUpdate } from '../models/EventTypeUpdate';
import { IntegrationIn } from '../models/IntegrationIn';
import { IntegrationKeyOut } from '../models/IntegrationKeyOut';
import { IntegrationOut } from '../models/IntegrationOut';
import { IntegrationUpdate } from '../models/IntegrationUpdate';
import { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';
import { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';
import { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';
import { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';
import { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';
import { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';
import { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';
import { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';
import { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';
import { ListResponseMessageOut } from '../models/ListResponseMessageOut';
import { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';
import { MessageAttemptOut } from '../models/MessageAttemptOut';
import { MessageIn } from '../models/MessageIn';
import { MessageOut } from '../models/MessageOut';
import { MessageStatus } from '../models/MessageStatus';
import { RecoverIn } from '../models/RecoverIn';
import { ReplayIn } from '../models/ReplayIn';
import { StatusCodeClass } from '../models/StatusCodeClass';
import { ApplicationApiRequestFactory, ApplicationApiResponseProcessor } from "../apis/ApplicationApi";
export declare class PromiseApplicationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor);
    createApplicationApiV1AppPost(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<ApplicationOut>;
    deleteApplicationApiV1AppAppIdDelete(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    getAppStatsApiV1AppAppIdStatsGet(appId: string, since: Date, until: Date, idempotencyKey?: string, _options?: Configuration): Promise<ApplicationStats>;
    getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseApplicationStats>;
    getApplicationApiV1AppAppIdGet(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<ApplicationOut>;
    listApplicationsApiV1AppGet(iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseApplicationOut>;
    updateApplicationApiV1AppAppIdPut(appId: string, applicationIn: ApplicationIn, idempotencyKey?: string, _options?: Configuration): Promise<ApplicationOut>;
}
import { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor } from "../apis/AuthenticationApi";
export declare class PromiseAuthenticationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor);
    getDashboardAccessApiV1AuthDashboardAccessAppIdPost(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<DashboardAccessOut>;
    logoutApiV1AuthLogoutPost(idempotencyKey?: string, _options?: Configuration): Promise<void>;
}
import { EndpointApiRequestFactory, EndpointApiResponseProcessor } from "../apis/EndpointApi";
export declare class PromiseEndpointApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor);
    createEndpointApiV1AppAppIdEndpointPost(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<EndpointOut>;
    deleteEndpointApiV1AppAppIdEndpointEndpointIdDelete(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    getEndpointApiV1AppAppIdEndpointEndpointIdGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<EndpointOut>;
    getEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<EndpointHeadersOut>;
    getEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<EndpointSecretOut>;
    getEndpointStatsApiV1AppAppIdEndpointEndpointIdStatsGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<EndpointStats>;
    getEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationGet(endpointId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<EndpointTransformationOut>;
    listEndpointsApiV1AppAppIdEndpointGet(appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseEndpointOut>;
    patchEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPatch(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    recoverFailedWebhooksApiV1AppAppIdEndpointEndpointIdRecoverPost(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Promise<any>;
    replayMissingWebhooksApiV1AppAppIdEndpointEndpointIdReplayMissingPost(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Promise<any>;
    rotateEndpointSecretApiV1AppAppIdEndpointEndpointIdSecretRotatePost(endpointId: string, appId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    sendEventTypeExampleMessageApiV1AppAppIdEndpointEndpointIdSendExamplePost(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Promise<MessageOut>;
    setEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationPatch(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    simulateEndpointTransformationApiV1AppAppIdEndpointEndpointIdTransformationSimulatePost(endpointId: string, appId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<EndpointTransformationSimulateOut>;
    updateEndpointApiV1AppAppIdEndpointEndpointIdPut(endpointId: string, appId: string, endpointUpdate: EndpointUpdate, idempotencyKey?: string, _options?: Configuration): Promise<EndpointOut>;
    updateEndpointHeadersApiV1AppAppIdEndpointEndpointIdHeadersPut(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, idempotencyKey?: string, _options?: Configuration): Promise<void>;
}
import { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor } from "../apis/EnvironmentApi";
export declare class PromiseEnvironmentApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor);
    exportEnvironmentConfigurationApiV1EnvironmentExportPost(body: any, idempotencyKey?: string, _options?: Configuration): Promise<EnvironmentOut>;
    importEnvironmentConfigurationApiV1EnvironmentImportPost(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Promise<void>;
}
import { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor } from "../apis/EnvironmentSettingsApi";
export declare class PromiseEnvironmentSettingsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor);
    getOrgSettingsApiV1EnvironmentSettingsGet(idempotencyKey?: string, _options?: Configuration): Promise<EnvironmentSettingsOut>;
}
import { EventTypeApiRequestFactory, EventTypeApiResponseProcessor } from "../apis/EventTypeApi";
export declare class PromiseEventTypeApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor);
    createEventTypeApiV1EventTypePost(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Promise<EventTypeOut>;
    deleteEventTypeApiV1EventTypeEventTypeNameDelete(eventTypeName: string, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    generateSchemaExampleApiV1EventTypeSchemaGenerateExamplePost(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Promise<EventTypeExampleOut>;
    getEventTypeApiV1EventTypeEventTypeNameGet(eventTypeName: string, idempotencyKey?: string, _options?: Configuration): Promise<EventTypeOut>;
    listEventTypesApiV1EventTypeGet(iterator?: string, limit?: number, withContent?: boolean, includeArchived?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseEventTypeOut>;
    updateEventTypeApiV1EventTypeEventTypeNamePut(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, idempotencyKey?: string, _options?: Configuration): Promise<EventTypeOut>;
}
import { HealthApiRequestFactory, HealthApiResponseProcessor } from "../apis/HealthApi";
export declare class PromiseHealthApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor);
    healthApiV1HealthGet(idempotencyKey?: string, _options?: Configuration): Promise<void>;
}
import { IntegrationApiRequestFactory, IntegrationApiResponseProcessor } from "../apis/IntegrationApi";
export declare class PromiseIntegrationApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor);
    createIntegrationApiV1AppAppIdIntegrationPost(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<IntegrationOut>;
    deleteIntegrationApiV1AppAppIdIntegrationIntegIdDelete(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<void>;
    getIntegrationApiV1AppAppIdIntegrationIntegIdGet(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<IntegrationOut>;
    getIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyGet(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<IntegrationKeyOut>;
    listIntegrationsApiV1AppAppIdIntegrationGet(appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseIntegrationOut>;
    rotateIntegrationKeyApiV1AppAppIdIntegrationIntegIdKeyRotatePost(integId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<IntegrationKeyOut>;
    updateIntegrationApiV1AppAppIdIntegrationIntegIdPut(integId: string, appId: string, integrationUpdate: IntegrationUpdate, idempotencyKey?: string, _options?: Configuration): Promise<IntegrationOut>;
}
import { MessageApiRequestFactory, MessageApiResponseProcessor } from "../apis/MessageApi";
export declare class PromiseMessageApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor);
    createMessageApiV1AppAppIdMsgPost(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<MessageOut>;
    getMessageApiV1AppAppIdMsgMsgIdGet(msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<MessageOut>;
    listMessagesApiV1AppAppIdMsgGet(appId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageOut>;
}
import { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor } from "../apis/MessageAttemptApi";
export declare class PromiseMessageAttemptApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor);
    getAttemptApiV1AppAppIdMsgMsgIdAttemptAttemptIdGet(attemptId: string, msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<MessageAttemptOut>;
    getAttemptHeadersApiV1AppAppIdMsgMsgIdAttemptAttemptIdHeadersGet(appId: string, msgId: string, attemptId: string, idempotencyKey?: string, _options?: Configuration): Promise<MessageAttemptHeadersOut>;
    listAttemptedDestinationsApiV1AppAppIdMsgMsgIdEndpointGet(msgId: string, appId: string, iterator?: string, limit?: number, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageEndpointOut>;
    listAttemptedMessagesApiV1AppAppIdEndpointEndpointIdMsgGet(endpointId: string, appId: string, iterator?: string, limit?: number, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseEndpointMessageOut>;
    listAttemptsApiV1AppAppIdMsgMsgIdAttemptGet(appId: string, msgId: string, iterator?: string, limit?: number, endpointId?: string, eventTypes?: Array<string>, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    listAttemptsByEndpointApiV1AppAppIdAttemptEndpointEndpointIdGet(appId: string, endpointId: string, iterator?: string, limit?: number, status?: MessageStatus, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    listAttemptsByMsgApiV1AppAppIdAttemptMsgMsgIdGet(appId: string, msgId: string, endpointId?: string, iterator?: string, limit?: number, status?: MessageStatus, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, channel?: string, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageAttemptOut>;
    listAttemptsForEndpointApiV1AppAppIdMsgMsgIdEndpointEndpointIdAttemptGet(msgId: string, appId: string, endpointId: string, iterator?: string, limit?: number, eventTypes?: Array<string>, channel?: string, status?: MessageStatus, before?: Date, after?: Date, idempotencyKey?: string, _options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut>;
    resendWebhookApiV1AppAppIdMsgMsgIdEndpointEndpointIdResendPost(endpointId: string, msgId: string, appId: string, idempotencyKey?: string, _options?: Configuration): Promise<void>;
}
import { StatisticsApiRequestFactory, StatisticsApiResponseProcessor } from "../apis/StatisticsApi";
export declare class PromiseStatisticsApi {
    private api;
    constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor);
    getAppAttemptStatsApiV1StatsAppAppIdAttemptGet(appId: string, startDate?: Date, endDate?: Date, idempotencyKey?: string, _options?: Configuration): Promise<AttemptStatisticsResponse>;
    getEpStatsApiV1StatsAppAppIdEpEndpointIdAttemptGet(endpointId: string, appId: string, startDate?: Date, endDate?: Date, idempotencyKey?: string, _options?: Configuration): Promise<AttemptStatisticsResponse>;
}
