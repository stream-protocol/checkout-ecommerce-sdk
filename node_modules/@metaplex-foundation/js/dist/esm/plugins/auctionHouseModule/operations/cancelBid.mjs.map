{"version":3,"file":"cancelBid.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/cancelBid.ts"],"sourcesContent":["import {\n  CancelInstructionAccounts,\n  createAuctioneerCancelInstruction,\n  createCancelBidReceiptInstruction,\n  createCancelInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Bid } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { NftWithToken, SftWithToken } from '@/plugins/nftModule';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CancelBidOperation' as const;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .cancelBid({ auctionHouse, bid };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const cancelBidOperation = useOperation<CancelBidOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CancelBidOperation = Operation<\n  typeof Key,\n  CancelBidInput,\n  CancelBidOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CancelBidInput = {\n  /**\n   * The Auction House in which to cancel Bid.\n   * We only need a subset of the `AuctionHouse` model but we\n   * need enough information regarding its settings to know how\n   * to cancel bid.\n   *\n   * This includes, its address, authority address, its fee account address, etc.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    'authorityAddress' | 'address' | 'feeAccountAddress' | 'hasAuctioneer'\n  >;\n\n  /**\n   * The Bid to cancel.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to cancel it.\n   *\n   * This includes, its asset, buyer address, price, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'buyerAddress'\n    | 'isPublic'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CancelBidOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const cancelBidOperationHandler: OperationHandler<CancelBidOperation> = {\n  handle: async (\n    operation: CancelBidOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) =>\n    cancelBidBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    ),\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CancelBidBuilderParams = Omit<CancelBidInput, 'confirmOptions'> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CancelBidBuilderContext = Omit<CancelBidOutput, 'response'>;\n\n/**\n * Cancels the user's bid in the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .cancelBid({ auctionHouse, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const cancelBidBuilder = (\n  metaplex: Metaplex,\n  params: CancelBidBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CancelBidBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, bid } = params;\n\n  // Data.\n  const {\n    asset,\n    buyerAddress,\n    tradeStateAddress,\n    price,\n    receiptAddress,\n    tokens,\n    isPublic,\n  } = bid;\n  const {\n    authorityAddress,\n    address: auctionHouseAddress,\n    feeAccountAddress,\n    hasAuctioneer,\n  } = auctionHouse;\n\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  // Accounts.\n  const tokenAccount = isPublic\n    ? metaplex\n        .tokens()\n        .pdas()\n        .associatedTokenAccount({\n          mint: asset.mint.address,\n          owner: toPublicKey(buyerAddress),\n          programs,\n        })\n    : (asset as SftWithToken | NftWithToken).token.address;\n\n  const accounts: CancelInstructionAccounts = {\n    wallet: buyerAddress,\n    tokenAccount,\n    tokenMint: asset.address,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    tradeState: tradeStateAddress,\n  };\n\n  // Args.\n  const args = {\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Cancel Bid Instruction.\n  let cancelBidInstruction = createCancelInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    cancelBidInstruction = createAuctioneerCancelInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouseAddress,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const cancelSigners = [auctioneerAuthority].filter(isSigner);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Cancel Bid.\n      .add({\n        instruction: cancelBidInstruction,\n        signers: cancelSigners,\n        key: params.instructionKey ?? 'cancelBid',\n      })\n\n      // Cancel Bid Receipt.\n      .when(Boolean(receiptAddress), (builder) =>\n        builder.add({\n          instruction: createCancelBidReceiptInstruction({\n            receipt: receiptAddress as Pda,\n            instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n          }),\n          signers: [],\n          key: 'cancelBidReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","cancelBidOperation","useOperation","cancelBidOperationHandler","handle","operation","metaplex","scope","cancelBidBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","bid","asset","buyerAddress","tradeStateAddress","price","receiptAddress","tokens","isPublic","authorityAddress","address","auctionHouseAddress","feeAccountAddress","hasAuctioneer","AuctioneerAuthorityRequiredError","tokenAccount","pdas","associatedTokenAccount","mint","owner","toPublicKey","token","accounts","wallet","tokenMint","authority","auctionHouseFeeAccount","tradeState","args","buyerPrice","basisPoints","tokenSize","cancelBidInstruction","createCancelInstruction","createAuctioneerCancelInstruction","publicKey","ahAuctioneerPda","auctioneer","cancelSigners","filter","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey","when","Boolean","builder","createCancelBidReceiptInstruction","receipt","SYSVAR_INSTRUCTIONS_PUBKEY"],"mappings":"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"}