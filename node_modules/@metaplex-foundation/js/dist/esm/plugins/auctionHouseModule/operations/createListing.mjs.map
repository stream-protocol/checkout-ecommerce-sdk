{"version":3,"file":"createListing.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createListing.ts"],"sourcesContent":["import {\n  createAuctioneerSellInstruction,\n  createPrintListingReceiptInstruction,\n  createSellInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport type { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AUCTIONEER_PRICE } from '../constants';\nimport {\n  AuctioneerAuthorityRequiredError,\n  CreateListingRequiresSignerError,\n} from '../errors';\nimport { AuctionHouse, LazyListing, Listing } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  amount,\n  isSigner,\n  lamports,\n  makeConfirmOptionsFinalizedOnMainnet,\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  token,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateListingOperation' as const;\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .createListing({ auctionHouse, mintAccount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createListingOperation = useOperation<CreateListingOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateListingOperation = Operation<\n  typeof Key,\n  CreateListingInput,\n  CreateListingOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateListingInput = {\n  /** A model of the Auction House related to this listing. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * Creator of a listing.\n   *\n   * The wallet being a signer is the only condition in which an NFT can sell at a price of 0.\n   * If the user does list at 0 then auction house can change the sale price if the 'can_change_sale_price' option is true.\n   * If the trade is not priced at 0, the wallet holder has to be a signer since auction house cannot sign if listing over 0.\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  seller?: PublicKey | Signer;\n\n  /**\n   * The Auction House authority.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   * Auction house should be the signer for changing the price instead of user wallet for cases when seller lists at 0.\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The mint account to create a listing for.\n   * This is used to find the metadata.\n   */\n  mintAccount: PublicKey;\n\n  /**\n   * The token account address that's associated to the asset a listing created is for.\n   *\n   * @defaultValue Seller's Associated Token Account.\n   */\n  tokenAccount?: PublicKey;\n\n  /**\n   * The listing price.\n   *\n   * @defaultValue 0 SOLs or tokens.\n   */\n  price?: SolAmount | SplTokenAmount;\n\n  /**\n   * The number of tokens to list.\n   * For an NFT listing it must be 1 token.\n   *\n   * When a Fungible Asset is put on sale.\n   * The buyer can then create a buy order of said assets that is\n   * less than the token_size of the sell order.\n   *\n   * @defaultValue 1 token.\n   */\n  tokens?: SplTokenAmount;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the listing receipt.\n   * The receipt holds information about the listing,\n   * So it's important to print it if you want to use the `Listing` model\n   *\n   * The receipt printing is skipped for the Auctioneer Auction House\n   * Since it currently doesn't support it.\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateListingOutput = {\n  /** Seller trade state account PDA encoding the listing order. */\n  sellerTradeState: Pda;\n\n  /** Seller free trade state account PDA encoding the free listing order. */\n  freeSellerTradeState: Pda;\n\n  /** The asset's token account address. */\n  tokenAccount: PublicKey;\n\n  /** The asset's metadata PDA. */\n  metadata: Pda;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The listing price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens listed. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Listing. */\n  listing: Listing;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createListingOperationHandler: OperationHandler<CreateListingOperation> =\n  {\n    async handle(\n      operation: CreateListingOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateListingOutput> {\n      const { auctionHouse } = operation.input;\n      const builder = createListingBuilder(metaplex, operation.input, scope);\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const listing = await metaplex\n          .auctionHouse()\n          .findListingByReceipt(\n            { receiptAddress: output.receipt, auctionHouse },\n            scope\n          );\n\n        return { listing, ...output };\n      }\n\n      scope.throwIfCanceled();\n      const lazyListing: LazyListing = {\n        model: 'listing',\n        lazy: true,\n        auctionHouse,\n        tradeStateAddress: output.sellerTradeState,\n        bookkeeperAddress: output.bookkeeper,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        receiptAddress: output.receipt,\n        purchaseReceiptAddress: null,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n        canceledAt: null,\n      };\n\n      return {\n        listing: await metaplex\n          .auctionHouse()\n          .loadListing({ lazyListing }, scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * Creates a listing on a given asset.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createListing({ auctionHouse, mintAccount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport type CreateListingBuilderParams = Omit<\n  CreateListingInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateListingBuilderContext = Omit<\n  CreateListingOutput,\n  'response' | 'listing'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createListingBuilder = (\n  metaplex: Metaplex,\n  params: CreateListingBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateListingBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    mintAccount,\n    tokens = token(1),\n    seller = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n  } = params;\n\n  // Data.\n  const priceBasisPoint = auctioneerAuthority\n    ? AUCTIONEER_PRICE\n    : params.price?.basisPoints ?? 0;\n  const price = auctionHouse.isNative\n    ? lamports(priceBasisPoint)\n    : amount(priceBasisPoint, auctionHouse.treasuryMint.currency);\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (!isSigner(seller) && !isSigner(authority)) {\n    throw new CreateListingRequiresSignerError();\n  }\n\n  // Accounts.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAccount,\n    programs,\n  });\n  const tokenAccount =\n    params.tokenAccount ??\n    metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({\n        mint: mintAccount,\n        owner: toPublicKey(seller),\n        programs,\n      });\n  const sellerTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouse.address,\n      wallet: toPublicKey(seller),\n      treasuryMint: auctionHouse.treasuryMint.address,\n      tokenMint: mintAccount,\n      price: price.basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount,\n      programs,\n    });\n  const freeSellerTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouse.address,\n      wallet: toPublicKey(seller),\n      treasuryMint: auctionHouse.treasuryMint.address,\n      tokenMint: mintAccount,\n      price: lamports(0).basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount,\n      programs,\n    });\n  const programAsSigner = metaplex\n    .auctionHouse()\n    .pdas()\n    .programAsSigner({ programs });\n  const accounts = {\n    wallet: toPublicKey(seller),\n    tokenAccount,\n    metadata,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n    sellerTradeState,\n    freeSellerTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    tradeStateBump: sellerTradeState.bump,\n    freeTradeStateBump: freeSellerTradeState.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Sell Instruction.\n  let sellInstruction = createSellInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    sellInstruction = createAuctioneerSellInstruction(\n      {\n        ...accounts,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n          auctionHouse: auctionHouse.address,\n          auctioneerAuthority: auctioneerAuthority.publicKey,\n          programs,\n        }),\n      },\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(seller) ? seller : (authority as Signer);\n  const sellSigners = [signer, auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = sellInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  sellInstruction.keys[signerKeyIndex].isSigner = true;\n\n  // Fixes cross-program invocation with unauthorized writable account\n  if (sellInstruction.keys[signerKeyIndex].pubkey.equals(toPublicKey(seller))) {\n    sellInstruction.keys[signerKeyIndex].isWritable = true;\n  }\n\n  // Receipt.\n  // Since createPrintListingReceiptInstruction can't deserialize createAuctioneerSellInstruction due to a bug\n  // Don't print Auctioneer Sell receipt for the time being.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) && !auctioneerAuthority;\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const receipt = metaplex.auctionHouse().pdas().listingReceipt({\n    tradeState: sellerTradeState,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make<CreateListingBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        sellerTradeState,\n        freeSellerTradeState,\n        tokenAccount,\n        metadata,\n        seller: toPublicKey(seller),\n        receipt: shouldPrintReceipt ? receipt : null,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        price,\n        tokens,\n      })\n\n      // Create Listing.\n      .add({\n        instruction: sellInstruction,\n        signers: sellSigners,\n        key: 'sell',\n      })\n\n      // Print the Listing Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintListingReceiptInstruction(\n            {\n              receipt,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { receiptBump: receipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printListingReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","createListingOperation","useOperation","createListingOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","builder","createListingBuilder","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","receipt","listing","findListingByReceipt","receiptAddress","lazyListing","model","lazy","tradeStateAddress","sellerTradeState","bookkeeperAddress","bookkeeper","sellerAddress","seller","metadataAddress","metadata","purchaseReceiptAddress","price","tokens","basisPoints","createdAt","now","canceledAt","loadListing","params","options","programs","payer","rpc","getDefaultFeePayer","auctioneerAuthority","mintAccount","token","identity","authority","authorityAddress","priceBasisPoint","AUCTIONEER_PRICE","isNative","lamports","amount","treasuryMint","currency","hasAuctioneer","AuctioneerAuthorityRequiredError","isSigner","CreateListingRequiresSignerError","nfts","pdas","mint","tokenAccount","associatedTokenAccount","owner","toPublicKey","tradeState","address","wallet","tokenMint","tokenSize","freeSellerTradeState","programAsSigner","accounts","auctionHouseFeeAccount","feeAccountAddress","args","tradeStateBump","bump","freeTradeStateBump","programAsSignerBump","buyerPrice","sellInstruction","createSellInstruction","createAuctioneerSellInstruction","publicKey","ahAuctioneerPda","auctioneer","signer","sellSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","isWritable","shouldPrintReceipt","printReceipt","listingReceipt","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","when","createPrintListingReceiptInstruction","SYSVAR_INSTRUCTIONS_PUBKEY","receiptBump"],"mappings":"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"}