{"version":3,"file":"findPurchases.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/findPurchases.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toPurchaseReceiptAccount } from '../accounts';\nimport { PurchaseReceiptGpaBuilder } from '../gpaBuilders';\nimport {\n  AuctionHouse,\n  LazyPurchase,\n  Purchase,\n  toLazyPurchase,\n} from '../models';\nimport { FindAllSupportsOnlyThreeFiltersMaxError } from '../errors';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindPurchasesOperation' as const;\n\n/**\n * Finds Purchases by multiple criteria.\n * You can use any combination of keys.\n * Supports only 3 criteria at the same time including\n * the required `auctionHouse` attribute.\n *\n * ```ts\n * // Find all purchases in an Auction House.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse });\n *\n * // Find purchases by buyer and mint.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, buyer, mint });\n *\n * // Find purchases by metadata.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, metadata });\n *\n * // Find purchases by seller and buyer.\n * const purchases = await metaplex\n *   .auctionHouse()\n *   .findPurchases({ auctionHouse, seller, buyer });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findPurchasesOperation = useOperation<FindPurchasesOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindPurchasesOperation = Operation<\n  typeof Key,\n  FindPurchasesInput,\n  FindPurchasesOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindPurchasesInput = {\n  /** A model of the Auction House related to these listings. */\n  auctionHouse: AuctionHouse;\n\n  /** The address of a buyer to search by. */\n  buyer?: PublicKey;\n\n  /** The address of a seller to search by. */\n  seller?: PublicKey;\n\n  /**\n   * The address of metadata to search by.\n   * Ignored when mint provided.\n   */\n  metadata?: PublicKey;\n\n  /** The address of a mint to search by. */\n  mint?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindPurchasesOutput = (Purchase | LazyPurchase)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findPurchasesOperationHandler: OperationHandler<FindPurchasesOperation> =\n  {\n    handle: async (\n      operation: FindPurchasesOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindPurchasesOutput> => {\n      const { programs, commitment } = scope;\n      const { auctionHouse, buyer, seller, metadata, mint } = operation.input;\n\n      const auctionHouseProgram = metaplex.programs().getAuctionHouse(programs);\n\n      let purchaseQuery = new PurchaseReceiptGpaBuilder(\n        metaplex,\n        auctionHouseProgram.address\n      )\n        .mergeConfig({ commitment })\n        .whereAuctionHouse(auctionHouse.address);\n\n      if (Object.keys(operation.input).length > 3) {\n        throw new FindAllSupportsOnlyThreeFiltersMaxError();\n      }\n\n      if (buyer) {\n        purchaseQuery = purchaseQuery.whereBuyer(buyer);\n      }\n\n      if (seller) {\n        purchaseQuery = purchaseQuery.whereSeller(seller);\n      }\n\n      if (metadata && !mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(metadata);\n      }\n\n      if (mint) {\n        purchaseQuery = purchaseQuery.whereMetadata(\n          metaplex.nfts().pdas().metadata({ mint, programs })\n        );\n      }\n\n      scope.throwIfCanceled();\n\n      return purchaseQuery.getAndMap((account) =>\n        toLazyPurchase(toPurchaseReceiptAccount(account), auctionHouse)\n      );\n    },\n  };\n"],"names":["Key","findPurchasesOperation","useOperation","findPurchasesOperationHandler","handle","operation","metaplex","scope","programs","commitment","auctionHouse","buyer","seller","metadata","mint","input","auctionHouseProgram","getAuctionHouse","purchaseQuery","PurchaseReceiptGpaBuilder","address","mergeConfig","whereAuctionHouse","Object","keys","length","FindAllSupportsOnlyThreeFiltersMaxError","whereBuyer","whereSeller","whereMetadata","nfts","pdas","throwIfCanceled","getAndMap","account","toLazyPurchase","toPurchaseReceiptAccount"],"mappings":";;;;;;AAkBA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,wBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sBAAsB,GAAGC,YAAY,CAAyBF,GAAzB,EAA3C;AAEP;AACA;AACA;AACA;;AAqCA;AACA;AACA;AACA;AACO,MAAMG,6BAAuE,GAClF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2B;IACjC,MAAM;MAAEC,QAAF;AAAYC,MAAAA,UAAAA;AAAZ,KAAA,GAA2BF,KAAjC,CAAA;IACA,MAAM;MAAEG,YAAF;MAAgBC,KAAhB;MAAuBC,MAAvB;MAA+BC,QAA/B;AAAyCC,MAAAA,IAAAA;KAAST,GAAAA,SAAS,CAACU,KAAlE,CAAA;IAEA,MAAMC,mBAAmB,GAAGV,QAAQ,CAACE,QAAT,EAAoBS,CAAAA,eAApB,CAAoCT,QAApC,CAA5B,CAAA;AAEA,IAAA,IAAIU,aAAa,GAAG,IAAIC,yBAAJ,CAClBb,QADkB,EAElBU,mBAAmB,CAACI,OAFF,CAIjBC,CAAAA,WAJiB,CAIL;AAAEZ,MAAAA,UAAAA;AAAF,KAJK,EAKjBa,iBALiB,CAKCZ,YAAY,CAACU,OALd,CAApB,CAAA;;IAOA,IAAIG,MAAM,CAACC,IAAP,CAAYnB,SAAS,CAACU,KAAtB,CAA6BU,CAAAA,MAA7B,GAAsC,CAA1C,EAA6C;MAC3C,MAAM,IAAIC,uCAAJ,EAAN,CAAA;AACD,KAAA;;AAED,IAAA,IAAIf,KAAJ,EAAW;AACTO,MAAAA,aAAa,GAAGA,aAAa,CAACS,UAAd,CAAyBhB,KAAzB,CAAhB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIC,MAAJ,EAAY;AACVM,MAAAA,aAAa,GAAGA,aAAa,CAACU,WAAd,CAA0BhB,MAA1B,CAAhB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIC,QAAQ,IAAI,CAACC,IAAjB,EAAuB;AACrBI,MAAAA,aAAa,GAAGA,aAAa,CAACW,aAAd,CAA4BhB,QAA5B,CAAhB,CAAA;AACD,KAAA;;AAED,IAAA,IAAIC,IAAJ,EAAU;AACRI,MAAAA,aAAa,GAAGA,aAAa,CAACW,aAAd,CACdvB,QAAQ,CAACwB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBlB,CAAAA,QAAvB,CAAgC;QAAEC,IAAF;AAAQN,QAAAA,QAAAA;AAAR,OAAhC,CADc,CAAhB,CAAA;AAGD,KAAA;;AAEDD,IAAAA,KAAK,CAACyB,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOd,aAAa,CAACe,SAAd,CAAyBC,OAAD,IAC7BC,cAAc,CAACC,wBAAwB,CAACF,OAAD,CAAzB,EAAoCxB,YAApC,CADT,CAAP,CAAA;AAGD,GAAA;AA7CH;;;;"}