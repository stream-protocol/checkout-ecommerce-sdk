{"version":3,"file":"withdrawFromBuyerAccount.mjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromBuyerAccount.ts"],"sourcesContent":["import {\n  createAuctioneerWithdrawInstruction,\n  createWithdrawInstruction,\n  WithdrawInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  AuctioneerAuthorityRequiredError,\n  WithdrawFromBuyerAccountRequiresSignerError,\n} from '../errors';\nimport { AuctionHouse } from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromBuyerAccountOperation' as const;\n\n/**\n * Withdraws funds from the user's buyer escrow account for the given auction house.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdraw({ auctionHouse, buyer, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountOperation =\n  useOperation<WithdrawFromBuyerAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromBuyerAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromBuyerAccountInput,\n  WithdrawFromBuyerAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountInput = {\n  /** The Auction House from which escrow buyer withdraws funds. */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'address'\n    | 'authorityAddress'\n    | 'hasAuctioneer'\n    | 'treasuryMint'\n    | 'feeAccountAddress'\n  >;\n\n  /**\n   * The buyer who withdraws funds.\n   *\n   * There must be one and only one signer; Authority or Seller must sign.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: PublicKey | Signer;\n\n  /**\n   * The Authority key.\n   * It is required when the buyer is not a signer.\n   * There must be one and only one signer; Authority or Buyer must sign.\n   *\n   * @defaultValue Defaults to not being used.\n   */\n  authority?: Signer;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromBuyerAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromBuyerAccountOperationHandler: OperationHandler<WithdrawFromBuyerAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromBuyerAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromBuyerAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromBuyerAccountBuilderParams = Omit<\n  WithdrawFromBuyerAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromBuyerAccountBuilderContext = Omit<\n  WithdrawFromBuyerAccountOutput,\n  'response'\n>;\n\n/**\n * Withdraws funds from the user's buyer escrow account to the given auction house.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromBuyerAccountBuilder({ auctionHouse, buyer, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromBuyerAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromBuyerAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromBuyerAccountBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, auctioneerAuthority, amount } = params;\n\n  if (auctionHouse.hasAuctioneer && !params.auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const amountBasisPoint = amount.basisPoints;\n  const buyer = params.buyer ?? (metaplex.identity() as Signer);\n  const authority = params.authority ?? auctionHouse.authorityAddress;\n\n  if (!isSigner(buyer) && !isSigner(authority)) {\n    throw new WithdrawFromBuyerAccountRequiresSignerError();\n  }\n\n  const escrowPayment = metaplex\n    .auctionHouse()\n    .pdas()\n    .buyerEscrow({\n      auctionHouse: auctionHouse.address,\n      buyer: toPublicKey(buyer),\n      programs,\n    });\n\n  // Accounts,\n  const accounts: WithdrawInstructionAccounts = {\n    wallet: toPublicKey(buyer),\n    receiptAccount: toPublicKey(buyer),\n    escrowPaymentAccount: escrowPayment,\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: toPublicKey(authority),\n    auctionHouse: auctionHouse.address,\n    auctionHouseFeeAccount: auctionHouse.feeAccountAddress,\n  };\n\n  // Args.\n  const args = {\n    escrowPaymentBump: escrowPayment.bump,\n    amount: amountBasisPoint,\n  };\n\n  // Withdraw Instruction.\n  let withdrawInstruction = createWithdrawInstruction(accounts, args);\n  if (auctioneerAuthority) {\n    const ahAuctioneerPda = metaplex.auctionHouse().pdas().auctioneer({\n      auctionHouse: auctionHouse.address,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      programs,\n    });\n\n    const accountsWithAuctioneer = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda,\n    };\n\n    withdrawInstruction = createAuctioneerWithdrawInstruction(\n      accountsWithAuctioneer,\n      args\n    );\n  }\n\n  // Signers.\n  const signer = isSigner(buyer) ? buyer : (authority as Signer);\n  const withdrawSigners = [signer, params.auctioneerAuthority].filter(isSigner);\n\n  // Update the account to be a signer since it's not covered properly by MPL due to its dynamic nature.\n  const signerKeyIndex = withdrawInstruction.keys.findIndex((key) =>\n    key.pubkey.equals(signer.publicKey)\n  );\n  withdrawInstruction.keys[signerKeyIndex].isSigner = true;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw.\n      .add({\n        instruction: withdrawInstruction,\n        signers: withdrawSigners,\n        key: params.instructionKey ?? 'withdrawFromBuyerAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromBuyerAccountOperation","useOperation","withdrawFromBuyerAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromBuyerAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","amount","hasAuctioneer","AuctioneerAuthorityRequiredError","amountBasisPoint","basisPoints","buyer","identity","authority","authorityAddress","isSigner","WithdrawFromBuyerAccountRequiresSignerError","escrowPayment","pdas","buyerEscrow","address","toPublicKey","accounts","wallet","receiptAccount","escrowPaymentAccount","treasuryMint","auctionHouseFeeAccount","feeAccountAddress","args","escrowPaymentBump","bump","withdrawInstruction","createWithdrawInstruction","ahAuctioneerPda","auctioneer","publicKey","accountsWithAuctioneer","createAuctioneerWithdrawInstruction","signer","withdrawSigners","filter","signerKeyIndex","keys","findIndex","key","pubkey","equals","TransactionBuilder","make","setFeePayer","add","instruction","signers","instructionKey"],"mappings":"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"}