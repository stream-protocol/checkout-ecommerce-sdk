{"version":3,"file":"nftGate.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/nftGate.ts"],"sourcesContent":["import { nftGateBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftGate guard restricts minting to holders\n * of a specified NFT collection.\n *\n * This means the mint address of an NFT from this\n * collection must be passed when minting.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftGateGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftGateGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftGate guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftGateGuardSettings} for more\n * information on the nftGate guard itself.\n */\nexport type NftGateGuardMintSettings = {\n  /**\n   * The mint address of an NFT from the required\n   * collection that belongs to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftGateGuardManifest: CandyGuardManifest<\n  NftGateGuardSettings,\n  NftGateGuardMintSettings\n> = {\n  name: 'nftGate',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftGateBeet),\n  mintSettingsParser: ({ metaplex, mintSettings, payer, programs }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftGate');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: false,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n};\n"],"names":["nftGateGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftGateBeet","mintSettingsParser","metaplex","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA8BA;AACO,MAAMA,oBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,SADJ;AAEFC,EAAAA,aAAa,EAAE,EAFb;AAGFC,EAAAA,kBAAkB,EAAEC,wBAAwB,CAACC,WAAD,CAH1C;AAIFC,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAF;IAAYC,YAAZ;IAA0BC,KAA1B;AAAiCC,IAAAA,QAAAA;AAAjC,GAAD,KAAiD;IACnE,IAAI,CAACF,YAAL,EAAmB;AACjB,MAAA,MAAM,IAAIG,6BAAJ,CAAkC,SAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAb,IACAL,QAAQ,CAACM,MAAT,EAAA,CAAkBC,IAAlB,EAAA,CAAyBC,sBAAzB,CAAgD;MAC9CC,IAAI,EAAER,YAAY,CAACQ,IAD2B;MAE9CC,KAAK,EAAER,KAAK,CAACS,SAFiC;AAG9CR,MAAAA,QAAAA;AAH8C,KAAhD,CAFF,CAAA;IAQA,MAAMS,aAAa,GAAGZ,QAAQ,CAACa,IAAT,EAAgBN,CAAAA,IAAhB,EAAuBO,CAAAA,QAAvB,CAAgC;MACpDL,IAAI,EAAER,YAAY,CAACQ,IADiC;AAEpDN,MAAAA,QAAAA;AAFoD,KAAhC,CAAtB,CAAA;IAKA,OAAO;AACLY,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEf,YAFX;AAGEgB,QAAAA,UAAU,EAAE,KAAA;AAHd,OADiB,EAMjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAER,aAFX;AAGES,QAAAA,UAAU,EAAE,KAAA;OATG,CAAA;KAFrB,CAAA;AAeD,GAAA;AArCC;;;;"}