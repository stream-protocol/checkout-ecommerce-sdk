{"version":3,"file":"freezeSolPayment.mjs","sources":["../../../../../src/plugins/candyMachineModule/guards/freezeSolPayment.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  FreezeInstruction,\n  FreezeSolPayment,\n  freezeSolPaymentBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport {\n  MintOwnerMustBeMintPayerError,\n  UnrecognizePathForRouteInstructionError,\n} from '../errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsRemainingAccount,\n  RouteSettingsParserInput,\n} from './core';\nimport { assert } from '@/utils';\nimport {\n  createSerializerFromBeet,\n  lamports,\n  mapSerializer,\n  PublicKey,\n  Signer,\n  SolAmount,\n} from '@/types';\n\n/**\n * The freezeSolPayment guard allows minting frozen NFTs by charging\n * the payer an amount in SOL. Frozen NFTs cannot be transferred\n * or listed on any marketplaces until thawed.\n *\n * The funds are transferred to a freeze escrow until all NFTs are thaw,\n * at which point, they can be transferred (unlocked) to the configured\n * destination account.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link FreezeSolPaymentGuardRouteSettings} to learn more about\n * the instructions that can be executed against this guard.\n */\nexport type FreezeSolPaymentGuardSettings = {\n  /** The amount in SOL to charge for. */\n  amount: SolAmount;\n\n  /** The configured destination address to send the funds to. */\n  destination: PublicKey;\n};\n\n/**\n * The settings for the freezeSolPayment guard that should be provided\n * when accessing the guard's special \"route\" instruction.\n *\n * ## Initialize\n * The `initialize` path creates the freeze escrow account that will\n * hold the funds until all NFTs are thawed. It must be called before\n * any NFTs can be minted.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'initialize',\n *     period: 15 * 24 * 60 * 60, // 15 days.\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * ## Thaw\n * The `thaw` path unfreezes one NFT if one of the following conditions are met:\n * - All NFTs have been minted.\n * - The configured period has elapsed (max 30 days).\n * - The Candy Machine account was deleted.\n *\n * Anyone can call this instruction. Since the funds are not transferrable\n * until all NFTs are thawed, it creates an incentive for the treasury to\n * thaw all NFTs as soon as possible.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'thaw',\n *     nftMint: nftToThaw.address,\n *     nftOwner: nftToThaw.token.ownerAddress,\n *   },\n * });\n * ```\n *\n * ## Unlock Funds\n * The `unlockFunds` path transfers all of the escrow funds to the\n * configured destination address once all NFTs have been thawed.\n *\n * ```ts\n * await metaplex.candyMachines().callGuardRoute({\n *   candyMachine,\n *   guard: 'freezeSolPayment',\n *   settings: {\n *     path: 'unlockFunds',\n *     candyGuardAuthority,\n *   },\n * });\n * ```\n *\n * @see {@link FreezeSolPaymentGuardSettings} for more\n * information on the freezeSolPayment guard itself.\n */\nexport type FreezeSolPaymentGuardRouteSettings =\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'initialize';\n\n      /** The freeze period in seconds (maximum 30 days). */\n      period: number;\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'thaw';\n\n      /** The mint address of the NFT to thaw. */\n      nftMint: PublicKey;\n\n      /** The owner address of the NFT to thaw. */\n      nftOwner: PublicKey;\n    }\n  | {\n      /** Selects the path to execute in the route instruction. */\n      path: 'unlockFunds';\n\n      /** The authority of the Candy Guard as a Signer. */\n      candyGuardAuthority: Signer;\n    };\n\n/** @internal */\nexport const freezeSolPaymentGuardManifest: CandyGuardManifest<\n  FreezeSolPaymentGuardSettings,\n  {},\n  FreezeSolPaymentGuardRouteSettings\n> = {\n  name: 'freezeSolPayment',\n  settingsBytes: 40,\n  settingsSerializer: mapSerializer<\n    FreezeSolPayment,\n    FreezeSolPaymentGuardSettings\n  >(\n    createSerializerFromBeet(freezeSolPaymentBeet),\n    (settings) => ({\n      amount: lamports(settings.lamports),\n      destination: settings.destination,\n    }),\n    (settings) => ({\n      lamports: settings.amount.basisPoints,\n      destination: settings.destination,\n    })\n  ),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    owner,\n    payer,\n    mint,\n    candyMachine,\n    candyGuard,\n    programs,\n  }) => {\n    if (!owner.equals(payer.publicKey)) {\n      throw new MintOwnerMustBeMintPayerError('freezeSolPayment');\n    }\n\n    const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n      destination: settings.destination,\n      candyMachine,\n      candyGuard,\n      programs,\n    });\n    const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mint.publicKey,\n      owner: payer.publicKey,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: freezeEscrow,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: nftAta,\n          isWritable: false,\n        },\n      ],\n    };\n  },\n  routeSettingsParser: (input) => {\n    switch (input.routeSettings.path) {\n      case 'initialize':\n        return initializeRouteInstruction(input);\n      case 'thaw':\n        return thawRouteInstruction(input);\n      case 'unlockFunds':\n        return unlockFundsRouteInstruction(input);\n      default:\n        throw new UnrecognizePathForRouteInstructionError(\n          'freezeSolPayment',\n          // @ts-ignore\n          input.routeSettings.path\n        );\n    }\n  },\n};\n\nfunction initializeRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'initialize');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  const args = Buffer.alloc(9);\n  beet.u8.write(args, 0, FreezeInstruction.Initialize);\n  beet.u64.write(args, 1, routeSettings.period);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction thawRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'thaw');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const nftAta = metaplex.tokens().pdas().associatedTokenAccount({\n    mint: routeSettings.nftMint,\n    owner: routeSettings.nftOwner,\n    programs,\n  });\n  const nftEdition = metaplex.nfts().pdas().masterEdition({\n    mint: routeSettings.nftMint,\n    programs,\n  });\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.Thaw);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftMint,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: routeSettings.nftOwner,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: nftAta,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: nftEdition,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenProgram.address,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: tokenMetadataProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n\nfunction unlockFundsRouteInstruction({\n  metaplex,\n  settings,\n  routeSettings,\n  candyMachine,\n  candyGuard,\n  programs,\n}: RouteSettingsParserInput<\n  FreezeSolPaymentGuardSettings,\n  FreezeSolPaymentGuardRouteSettings\n>) {\n  assert(routeSettings.path === 'unlockFunds');\n  const freezeEscrow = metaplex.candyMachines().pdas().freezeEscrow({\n    destination: settings.destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  });\n  const systemProgram = metaplex.programs().getSystem(programs);\n\n  const args = Buffer.alloc(1);\n  beet.u8.write(args, 0, FreezeInstruction.UnlockFunds);\n\n  return {\n    arguments: args,\n    remainingAccounts: [\n      {\n        isSigner: false,\n        address: freezeEscrow,\n        isWritable: true,\n      },\n      {\n        isSigner: true,\n        address: routeSettings.candyGuardAuthority,\n        isWritable: false,\n      },\n      {\n        isSigner: false,\n        address: settings.destination,\n        isWritable: true,\n      },\n      {\n        isSigner: false,\n        address: systemProgram.address,\n        isWritable: false,\n      },\n    ] as CandyGuardsRemainingAccount[],\n  };\n}\n"],"names":["freezeSolPaymentGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","freezeSolPaymentBeet","settings","amount","lamports","destination","basisPoints","mintSettingsParser","metaplex","owner","payer","mint","candyMachine","candyGuard","programs","equals","publicKey","MintOwnerMustBeMintPayerError","freezeEscrow","candyMachines","pdas","nftAta","tokens","associatedTokenAccount","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable","routeSettingsParser","input","routeSettings","path","initializeRouteInstruction","thawRouteInstruction","unlockFundsRouteInstruction","UnrecognizePathForRouteInstructionError","assert","systemProgram","getSystem","args","alloc","beet","u8","write","FreezeInstruction","Initialize","u64","period","candyGuardAuthority","nftMint","nftOwner","nftEdition","nfts","masterEdition","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","Thaw","UnlockFunds"],"mappings":";;;;;;;;AA0BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAmGA;AACO,MAAMA,6BAIZ,GAAG;AACFC,EAAAA,IAAI,EAAE,kBADJ;AAEFC,EAAAA,aAAa,EAAE,EAFb;EAGFC,kBAAkB,EAAEC,aAAa,CAI/BC,wBAAwB,CAACC,oBAAD,CAJO,EAK9BC,QAAD,KAAe;AACbC,IAAAA,MAAM,EAAEC,QAAQ,CAACF,QAAQ,CAACE,QAAV,CADH;IAEbC,WAAW,EAAEH,QAAQ,CAACG,WAAAA;GAFxB,CAL+B,EAS9BH,QAAD,KAAe;AACbE,IAAAA,QAAQ,EAAEF,QAAQ,CAACC,MAAT,CAAgBG,WADb;IAEbD,WAAW,EAAEH,QAAQ,CAACG,WAAAA;AAFT,GAAf,CAT+B,CAH/B;AAiBFE,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QADmB;IAEnBN,QAFmB;IAGnBO,KAHmB;IAInBC,KAJmB;IAKnBC,IALmB;IAMnBC,YANmB;IAOnBC,UAPmB;AAQnBC,IAAAA,QAAAA;AARmB,GAAD,KASd;IACJ,IAAI,CAACL,KAAK,CAACM,MAAN,CAAaL,KAAK,CAACM,SAAnB,CAAL,EAAoC;AAClC,MAAA,MAAM,IAAIC,6BAAJ,CAAkC,kBAAlC,CAAN,CAAA;AACD,KAAA;;IAED,MAAMC,YAAY,GAAGV,QAAQ,CAACW,aAAT,EAAyBC,CAAAA,IAAzB,EAAgCF,CAAAA,YAAhC,CAA6C;MAChEb,WAAW,EAAEH,QAAQ,CAACG,WAD0C;MAEhEO,YAFgE;MAGhEC,UAHgE;AAIhEC,MAAAA,QAAAA;AAJgE,KAA7C,CAArB,CAAA;IAMA,MAAMO,MAAM,GAAGb,QAAQ,CAACc,MAAT,EAAkBF,CAAAA,IAAlB,EAAyBG,CAAAA,sBAAzB,CAAgD;MAC7DZ,IAAI,EAAEA,IAAI,CAACK,SADkD;MAE7DP,KAAK,EAAEC,KAAK,CAACM,SAFgD;AAG7DF,MAAAA,QAAAA;AAH6D,KAAhD,CAAf,CAAA;IAMA,OAAO;AACLU,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEX,YAFX;AAGEY,QAAAA,UAAU,EAAE,IAAA;AAHd,OADiB,EAMjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAER,MAFX;AAGES,QAAAA,UAAU,EAAE,KAAA;OATG,CAAA;KAFrB,CAAA;GA3CA;EA2DFC,mBAAmB,EAAGC,KAAD,IAAW;AAC9B,IAAA,QAAQA,KAAK,CAACC,aAAN,CAAoBC,IAA5B;AACE,MAAA,KAAK,YAAL;QACE,OAAOC,0BAA0B,CAACH,KAAD,CAAjC,CAAA;;AACF,MAAA,KAAK,MAAL;QACE,OAAOI,oBAAoB,CAACJ,KAAD,CAA3B,CAAA;;AACF,MAAA,KAAK,aAAL;QACE,OAAOK,2BAA2B,CAACL,KAAD,CAAlC,CAAA;;AACF,MAAA;AACE,QAAA,MAAM,IAAIM,uCAAJ,CACJ,kBADI;AAGJN,QAAAA,KAAK,CAACC,aAAN,CAAoBC,IAHhB,CAAN,CAAA;AARJ,KAAA;AAcD,GAAA;AA1EC,EAJG;;AAiFP,SAASC,0BAAT,CAAoC;EAClC3B,QADkC;EAElCN,QAFkC;EAGlC+B,aAHkC;EAIlCrB,YAJkC;EAKlCC,UALkC;AAMlCC,EAAAA,QAAAA;AANkC,CAApC,EAUG;AACDyB,EAAAA,MAAM,CAACN,aAAa,CAACC,IAAd,KAAuB,YAAxB,CAAN,CAAA;EACA,MAAMhB,YAAY,GAAGV,QAAQ,CAACW,aAAT,EAAyBC,CAAAA,IAAzB,EAAgCF,CAAAA,YAAhC,CAA6C;IAChEb,WAAW,EAAEH,QAAQ,CAACG,WAD0C;IAEhEO,YAFgE;IAGhEC,UAHgE;AAIhEC,IAAAA,QAAAA;AAJgE,GAA7C,CAArB,CAAA;EAMA,MAAM0B,aAAa,GAAGhC,QAAQ,CAACM,QAAT,EAAoB2B,CAAAA,SAApB,CAA8B3B,QAA9B,CAAtB,CAAA;AAEA,EAAA,MAAM4B,IAAI,GAAGjB,MAAM,CAACkB,KAAP,CAAa,CAAb,CAAb,CAAA;EACAC,IAAI,CAACC,EAAL,CAAQC,KAAR,CAAcJ,IAAd,EAAoB,CAApB,EAAuBK,iBAAiB,CAACC,UAAzC,CAAA,CAAA;EACAJ,IAAI,CAACK,GAAL,CAASH,KAAT,CAAeJ,IAAf,EAAqB,CAArB,EAAwBT,aAAa,CAACiB,MAAtC,CAAA,CAAA;EAEA,OAAO;AACL1B,IAAAA,SAAS,EAAEkB,IADN;AAELf,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,OAAO,EAAEX,YAFX;AAGEY,MAAAA,UAAU,EAAE,IAAA;AAHd,KADiB,EAMjB;AACEF,MAAAA,QAAQ,EAAE,IADZ;MAEEC,OAAO,EAAEI,aAAa,CAACkB,mBAFzB;AAGErB,MAAAA,UAAU,EAAE,KAAA;AAHd,KANiB,EAWjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAEW,aAAa,CAACX,OAFzB;AAGEC,MAAAA,UAAU,EAAE,KAAA;KAdG,CAAA;GAFrB,CAAA;AAoBD,CAAA;;AAED,SAASM,oBAAT,CAA8B;EAC5B5B,QAD4B;EAE5BN,QAF4B;EAG5B+B,aAH4B;EAI5BrB,YAJ4B;EAK5BC,UAL4B;AAM5BC,EAAAA,QAAAA;AAN4B,CAA9B,EAUG;AACDyB,EAAAA,MAAM,CAACN,aAAa,CAACC,IAAd,KAAuB,MAAxB,CAAN,CAAA;EACA,MAAMhB,YAAY,GAAGV,QAAQ,CAACW,aAAT,EAAyBC,CAAAA,IAAzB,EAAgCF,CAAAA,YAAhC,CAA6C;IAChEb,WAAW,EAAEH,QAAQ,CAACG,WAD0C;IAEhEO,YAFgE;IAGhEC,UAHgE;AAIhEC,IAAAA,QAAAA;AAJgE,GAA7C,CAArB,CAAA;EAMA,MAAMO,MAAM,GAAGb,QAAQ,CAACc,MAAT,EAAkBF,CAAAA,IAAlB,EAAyBG,CAAAA,sBAAzB,CAAgD;IAC7DZ,IAAI,EAAEsB,aAAa,CAACmB,OADyC;IAE7D3C,KAAK,EAAEwB,aAAa,CAACoB,QAFwC;AAG7DvC,IAAAA,QAAAA;AAH6D,GAAhD,CAAf,CAAA;EAKA,MAAMwC,UAAU,GAAG9C,QAAQ,CAAC+C,IAAT,EAAgBnC,CAAAA,IAAhB,EAAuBoC,CAAAA,aAAvB,CAAqC;IACtD7C,IAAI,EAAEsB,aAAa,CAACmB,OADkC;AAEtDtC,IAAAA,QAAAA;AAFsD,GAArC,CAAnB,CAAA;EAIA,MAAM2C,YAAY,GAAGjD,QAAQ,CAACM,QAAT,EAAoB4C,CAAAA,QAApB,CAA6B5C,QAA7B,CAArB,CAAA;EACA,MAAM6C,oBAAoB,GAAGnD,QAAQ,CAACM,QAAT,EAAoB8C,CAAAA,gBAApB,CAAqC9C,QAArC,CAA7B,CAAA;AAEA,EAAA,MAAM4B,IAAI,GAAGjB,MAAM,CAACkB,KAAP,CAAa,CAAb,CAAb,CAAA;EACAC,IAAI,CAACC,EAAL,CAAQC,KAAR,CAAcJ,IAAd,EAAoB,CAApB,EAAuBK,iBAAiB,CAACc,IAAzC,CAAA,CAAA;EAEA,OAAO;AACLrC,IAAAA,SAAS,EAAEkB,IADN;AAELf,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,OAAO,EAAEX,YAFX;AAGEY,MAAAA,UAAU,EAAE,IAAA;AAHd,KADiB,EAMjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAEI,aAAa,CAACmB,OAFzB;AAGEtB,MAAAA,UAAU,EAAE,KAAA;AAHd,KANiB,EAWjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAEI,aAAa,CAACoB,QAFzB;AAGEvB,MAAAA,UAAU,EAAE,KAAA;AAHd,KAXiB,EAgBjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,OAAO,EAAER,MAFX;AAGES,MAAAA,UAAU,EAAE,IAAA;AAHd,KAhBiB,EAqBjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,OAAO,EAAEyB,UAFX;AAGExB,MAAAA,UAAU,EAAE,KAAA;AAHd,KArBiB,EA0BjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAE4B,YAAY,CAAC5B,OAFxB;AAGEC,MAAAA,UAAU,EAAE,KAAA;AAHd,KA1BiB,EA+BjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAE8B,oBAAoB,CAAC9B,OAFhC;AAGEC,MAAAA,UAAU,EAAE,KAAA;KAlCG,CAAA;GAFrB,CAAA;AAwCD,CAAA;;AAED,SAASO,2BAAT,CAAqC;EACnC7B,QADmC;EAEnCN,QAFmC;EAGnC+B,aAHmC;EAInCrB,YAJmC;EAKnCC,UALmC;AAMnCC,EAAAA,QAAAA;AANmC,CAArC,EAUG;AACDyB,EAAAA,MAAM,CAACN,aAAa,CAACC,IAAd,KAAuB,aAAxB,CAAN,CAAA;EACA,MAAMhB,YAAY,GAAGV,QAAQ,CAACW,aAAT,EAAyBC,CAAAA,IAAzB,EAAgCF,CAAAA,YAAhC,CAA6C;IAChEb,WAAW,EAAEH,QAAQ,CAACG,WAD0C;IAEhEO,YAFgE;IAGhEC,UAHgE;AAIhEC,IAAAA,QAAAA;AAJgE,GAA7C,CAArB,CAAA;EAMA,MAAM0B,aAAa,GAAGhC,QAAQ,CAACM,QAAT,EAAoB2B,CAAAA,SAApB,CAA8B3B,QAA9B,CAAtB,CAAA;AAEA,EAAA,MAAM4B,IAAI,GAAGjB,MAAM,CAACkB,KAAP,CAAa,CAAb,CAAb,CAAA;EACAC,IAAI,CAACC,EAAL,CAAQC,KAAR,CAAcJ,IAAd,EAAoB,CAApB,EAAuBK,iBAAiB,CAACe,WAAzC,CAAA,CAAA;EAEA,OAAO;AACLtC,IAAAA,SAAS,EAAEkB,IADN;AAELf,IAAAA,iBAAiB,EAAE,CACjB;AACEC,MAAAA,QAAQ,EAAE,KADZ;AAEEC,MAAAA,OAAO,EAAEX,YAFX;AAGEY,MAAAA,UAAU,EAAE,IAAA;AAHd,KADiB,EAMjB;AACEF,MAAAA,QAAQ,EAAE,IADZ;MAEEC,OAAO,EAAEI,aAAa,CAACkB,mBAFzB;AAGErB,MAAAA,UAAU,EAAE,KAAA;AAHd,KANiB,EAWjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAE3B,QAAQ,CAACG,WAFpB;AAGEyB,MAAAA,UAAU,EAAE,IAAA;AAHd,KAXiB,EAgBjB;AACEF,MAAAA,QAAQ,EAAE,KADZ;MAEEC,OAAO,EAAEW,aAAa,CAACX,OAFzB;AAGEC,MAAAA,UAAU,EAAE,KAAA;KAnBG,CAAA;GAFrB,CAAA;AAyBD;;;;"}