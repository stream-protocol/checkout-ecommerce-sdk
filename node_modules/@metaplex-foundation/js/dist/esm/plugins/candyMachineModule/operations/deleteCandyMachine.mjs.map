{"version":3,"file":"deleteCandyMachine.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/deleteCandyMachine.ts"],"sourcesContent":["import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineOperation' as const;\n\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyMachineOperation =\n  useOperation<DeleteCandyMachineOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyMachineOperation = Operation<\n  typeof Key,\n  DeleteCandyMachineInput,\n  DeleteCandyMachineOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyMachineInput = {\n  /** The address of the Candy Machine account to delete. */\n  candyMachine: PublicKey;\n\n  /**\n   * The address of the Candy Guard associated with the Candy Machine account.\n   * When provided the Candy Guard will be deleted as well.\n   *\n   * @defaultValue Defaults to not being deleted.\n   */\n  candyGuard?: PublicKey;\n\n  /**\n   * The authority of the Candy Machine account.\n   *\n   * This is the account that will received the rent-exemption\n   * lamports from the Candy Machine account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The authority of the Candy Guard account to delete.\n   *\n   * This is only required if `candyGuard` is provided and the Candy\n   * Guard authority is not the same as the Candy Machine authority.\n   *\n   * @defaultValue `authority`\n   */\n  candyGuardAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyMachineOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyMachineOperationHandler: OperationHandler<DeleteCandyMachineOperation> =\n  {\n    async handle(\n      operation: DeleteCandyMachineOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyMachineOutput> {\n      return deleteCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyMachineBuilderParams = Omit<\n  DeleteCandyMachineInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Machine account. */\n  deleteCandyMachineInstructionKey?: string;\n};\n\n/**\n * Deletes a Candy Machine account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .delete({\n *     candyMachine: candyMachine.address,\n *     candyGuard: candyMachine.candyGuard.address,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyMachineBuilder = (\n  metaplex: Metaplex,\n  params: DeleteCandyMachineBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    candyGuard,\n    authority = metaplex.identity(),\n    candyGuardAuthority = authority,\n  } = params;\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n\n  const builder = TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWithdrawInstruction(\n        {\n          candyMachine,\n          authority: authority.publicKey,\n        },\n        candyMachineProgram.address\n      ),\n      signers: [authority],\n      key: params.deleteCandyMachineInstructionKey ?? 'deleteCandyMachine',\n    });\n\n  if (candyGuard) {\n    builder.add(\n      metaplex\n        .candyMachines()\n        .builders()\n        .deleteCandyGuard(\n          { candyGuard, authority: candyGuardAuthority },\n          { payer, programs }\n        )\n    );\n  }\n\n  return builder;\n};\n"],"names":["Key","deleteCandyMachineOperation","useOperation","deleteCandyMachineOperationHandler","handle","operation","metaplex","scope","deleteCandyMachineBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyMachine","candyGuard","authority","identity","candyGuardAuthority","candyMachineProgram","getCandyMachine","builder","TransactionBuilder","make","setFeePayer","add","instruction","createWithdrawInstruction","publicKey","address","signers","key","deleteCandyMachineInstructionKey","candyMachines","builders","deleteCandyGuard"],"mappings":";;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,6BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,2BAA2B,GACtCC,YAAY,CAA8BF,GAA9B,EADP;AAGP;AACA;AACA;AACA;;AAqDA;AACA;AACA;AACA;AACO,MAAMG,kCAAiF,GAC5F;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIqC;AACnC,IAAA,OAAOC,yBAAyB,CAC9BF,QAD8B,EAE9BD,SAAS,CAACI,KAFoB,EAG9BF,KAH8B,CAAzB,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,yBAAyB,GAAG,CACvCF,QADuC,EAEvCM,MAFuC,EAGvCC,OAAkC,GAAG,EAHE,KAIhB;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,YADI;IAEJC,UAFI;AAGJC,IAAAA,SAAS,GAAGd,QAAQ,CAACe,QAAT,EAHR;AAIJC,IAAAA,mBAAmB,GAAGF,SAAAA;AAJlB,GAAA,GAKFR,MALJ,CAAA;EAOA,MAAMW,mBAAmB,GAAGjB,QAAQ,CAACQ,QAAT,EAAoBU,CAAAA,eAApB,CAAoCV,QAApC,CAA5B,CAAA;EAEA,MAAMW,OAAO,GAAGC,kBAAkB,CAACC,IAAnB,EACbC,CAAAA,WADa,CACDb,KADC,CAEbc,CAAAA,GAFa,CAET;IACHC,WAAW,EAAEC,yBAAyB,CACpC;MACEb,YADF;MAEEE,SAAS,EAAEA,SAAS,CAACY,SAAAA;AAFvB,KADoC,EAKpCT,mBAAmB,CAACU,OALgB,CADnC;IAQHC,OAAO,EAAE,CAACd,SAAD,CARN;AASHe,IAAAA,GAAG,EAAEvB,MAAM,CAACwB,gCAAP,IAA2C,oBAAA;AAT7C,GAFS,CAAhB,CAAA;;AAcA,EAAA,IAAIjB,UAAJ,EAAgB;IACdM,OAAO,CAACI,GAAR,CACEvB,QAAQ,CACL+B,aADH,EAEGC,CAAAA,QAFH,EAGGC,CAAAA,gBAHH,CAII;MAAEpB,UAAF;AAAcC,MAAAA,SAAS,EAAEE,mBAAAA;AAAzB,KAJJ,EAKI;MAAEP,KAAF;AAASD,MAAAA,QAAAA;AAAT,KALJ,CADF,CAAA,CAAA;AASD,GAAA;;AAED,EAAA,OAAOW,OAAP,CAAA;AACD;;;;"}