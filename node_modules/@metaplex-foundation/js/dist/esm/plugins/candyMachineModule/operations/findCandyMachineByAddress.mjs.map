{"version":3,"file":"findCandyMachineByAddress.mjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyMachineByAddress.ts"],"sourcesContent":["import { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { CandyMachine, toCandyGuard, toCandyMachine } from '../models';\nimport { assertCandyGuardProgram } from '../programs';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachineByAddressOperation' as const;\n\n/**\n * Find an existing Candy Machine by its address.\n *\n * ```ts\n * const candyMachine = await metaplex\n *   .candyMachines()\n *   .findbyAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachineByAddressOperation =\n  _findCandyMachineByAddressOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _findCandyMachineByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  input: FindCandyMachineByAddressInput\n): FindCandyMachineByAddressOperation<T> {\n  return { key: Key, input };\n}\n_findCandyMachineByAddressOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachineByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, FindCandyMachineByAddressInput, CandyMachine<T>>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachineByAddressInput = {\n  /** The Candy Machine address. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachineByAddressOperationHandler: OperationHandler<FindCandyMachineByAddressOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: FindCandyMachineByAddressOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) {\n      const { address } = operation.input;\n      const { commitment, programs } = scope;\n      const potentialCandyGuardAddress = metaplex\n        .candyMachines()\n        .pdas()\n        .candyGuard({ base: address, programs });\n      const [candyMachineAccount, potentialCandyGuardAccount] = await metaplex\n        .rpc()\n        .getMultipleAccounts([address, potentialCandyGuardAddress], commitment);\n      scope.throwIfCanceled();\n\n      assertAccountExists(candyMachineAccount, 'CandyMachine');\n      const candyMachine = toCandyMachine<T>(candyMachineAccount);\n      const mintAuthority = candyMachine.mintAuthorityAddress;\n\n      // Optimisation that tries to load both the Candy Machine\n      // And the Candy Guard in one RPC call assuming the Candy\n      // Machine's address is the base address of the Candy Guard.\n      if (\n        potentialCandyGuardAccount.exists &&\n        potentialCandyGuardAccount.publicKey.equals(mintAuthority)\n      ) {\n        return {\n          ...candyMachine,\n          candyGuard: toCandyGuard<T>(potentialCandyGuardAccount, metaplex),\n        };\n      }\n\n      // If the Candy Machine's mint authority is not a PDA,\n      // it cannot have an associated Candy Guard.\n      // TODO(loris): Does not seem to work when the Candy Guard does not derive from the Candy Machine.\n      if (PublicKey.isOnCurve(mintAuthority)) {\n        return candyMachine;\n      }\n\n      // Fetch the content of the mint authority PDA.\n      const mintAuthorityAccount = await metaplex\n        .rpc()\n        .getAccount(mintAuthority, commitment);\n      scope.throwIfCanceled();\n\n      try {\n        // Identity the program owner as a Candy Guard program\n        // and parse the Candy Guard accordingly.\n        assertAccountExists(mintAuthorityAccount);\n        const program = metaplex.programs().get(mintAuthorityAccount.owner);\n        assertCandyGuardProgram(program);\n\n        return {\n          ...candyMachine,\n          candyGuard: toCandyGuard<T>(mintAuthorityAccount, metaplex),\n        };\n      } catch (error) {\n        // If anything goes wrong, assume there is no Candy Guard\n        // attached to this Candy Machine.\n        return candyMachine;\n      }\n    },\n  };\n"],"names":["Key","findCandyMachineByAddressOperation","_findCandyMachineByAddressOperation","input","key","findCandyMachineByAddressOperationHandler","handle","operation","metaplex","scope","address","commitment","programs","potentialCandyGuardAddress","candyMachines","pdas","candyGuard","base","candyMachineAccount","potentialCandyGuardAccount","rpc","getMultipleAccounts","throwIfCanceled","assertAccountExists","candyMachine","toCandyMachine","mintAuthority","mintAuthorityAddress","exists","publicKey","equals","toCandyGuard","PublicKey","isOnCurve","mintAuthorityAccount","getAccount","program","get","owner","assertCandyGuardProgram","error"],"mappings":";;;;;;AAYA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,oCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,kCAAkC,GAC7CC;;AAEF,SAASA,mCAAT,CAGEC,KAHF,EAIyC;EACvC,OAAO;AAAEC,IAAAA,GAAG,EAAEJ,GAAP;AAAYG,IAAAA,KAAAA;GAAnB,CAAA;AACD,CAAA;;AACDD,mCAAmC,CAACE,GAApC,GAA0CJ,GAA1C,CAAA;AAEA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACO,MAAMK,yCAA+F,GAC1G;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIE;IACA,MAAM;AAAEC,MAAAA,OAAAA;KAAYH,GAAAA,SAAS,CAACJ,KAA9B,CAAA;IACA,MAAM;MAAEQ,UAAF;AAAcC,MAAAA,QAAAA;AAAd,KAAA,GAA2BH,KAAjC,CAAA;IACA,MAAMI,0BAA0B,GAAGL,QAAQ,CACxCM,aADgC,EAEhCC,CAAAA,IAFgC,EAGhCC,CAAAA,UAHgC,CAGrB;AAAEC,MAAAA,IAAI,EAAEP,OAAR;AAAiBE,MAAAA,QAAAA;AAAjB,KAHqB,CAAnC,CAAA;AAIA,IAAA,MAAM,CAACM,mBAAD,EAAsBC,0BAAtB,CAAoD,GAAA,MAAMX,QAAQ,CACrEY,GAD6D,GAE7DC,mBAF6D,CAEzC,CAACX,OAAD,EAAUG,0BAAV,CAFyC,EAEFF,UAFE,CAAhE,CAAA;AAGAF,IAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;AAEAC,IAAAA,mBAAmB,CAACL,mBAAD,EAAsB,cAAtB,CAAnB,CAAA;AACA,IAAA,MAAMM,YAAY,GAAGC,cAAc,CAAIP,mBAAJ,CAAnC,CAAA;AACA,IAAA,MAAMQ,aAAa,GAAGF,YAAY,CAACG,oBAAnC,CAdA;AAiBA;AACA;;AACA,IAAA,IACER,0BAA0B,CAACS,MAA3B,IACAT,0BAA0B,CAACU,SAA3B,CAAqCC,MAArC,CAA4CJ,aAA5C,CAFF,EAGE;MACA,OAAO,EACL,GAAGF,YADE;AAELR,QAAAA,UAAU,EAAEe,YAAY,CAAIZ,0BAAJ,EAAgCX,QAAhC,CAAA;OAF1B,CAAA;AAID,KA3BD;AA8BA;AACA;;;AACA,IAAA,IAAIwB,SAAS,CAACC,SAAV,CAAoBP,aAApB,CAAJ,EAAwC;AACtC,MAAA,OAAOF,YAAP,CAAA;AACD,KAlCD;;;AAqCA,IAAA,MAAMU,oBAAoB,GAAG,MAAM1B,QAAQ,CACxCY,GADgC,EAEhCe,CAAAA,UAFgC,CAErBT,aAFqB,EAENf,UAFM,CAAnC,CAAA;AAGAF,IAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;;IAEA,IAAI;AACF;AACA;MACAC,mBAAmB,CAACW,oBAAD,CAAnB,CAAA;MACA,MAAME,OAAO,GAAG5B,QAAQ,CAACI,QAAT,EAAoByB,CAAAA,GAApB,CAAwBH,oBAAoB,CAACI,KAA7C,CAAhB,CAAA;MACAC,uBAAuB,CAACH,OAAD,CAAvB,CAAA;MAEA,OAAO,EACL,GAAGZ,YADE;AAELR,QAAAA,UAAU,EAAEe,YAAY,CAAIG,oBAAJ,EAA0B1B,QAA1B,CAAA;OAF1B,CAAA;KAPF,CAWE,OAAOgC,KAAP,EAAc;AACd;AACA;AACA,MAAA,OAAOhB,YAAP,CAAA;AACD,KAAA;AACF,GAAA;;AA/DH;;;;"}