{"version":3,"file":"ProgramClient.mjs","sources":["../../../../src/plugins/programModule/ProgramClient.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport type { Metaplex } from '@/Metaplex';\nimport { MissingGpaBuilderError, ProgramNotRecognizedError } from '@/errors';\nimport { Program, Cluster } from '@/types';\nimport { GpaBuilder } from '@/utils';\n\n/**\n * @group Modules\n */\nexport class ProgramClient {\n  protected programs: Program[] = [];\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  register(program: Program): void {\n    this.programs.unshift(program);\n  }\n\n  all(overrides: Program[] = []): Program[] {\n    return [...overrides, ...this.programs];\n  }\n\n  allForCluster(cluster: Cluster, overrides: Program[] = []): Program[] {\n    return this.all(overrides).filter((program) => {\n      return program.clusterFilter?.(cluster) ?? true;\n    });\n  }\n\n  allForCurrentCluster(overrides: Program[] = []): Program[] {\n    return this.allForCluster(this.metaplex.cluster, overrides);\n  }\n\n  get<T extends Program = Program>(\n    nameOrAddress: string | PublicKey,\n    overrides: Program[] = []\n  ): T {\n    const programs = this.allForCurrentCluster(overrides);\n    const program =\n      typeof nameOrAddress === 'string'\n        ? programs.find((program) => program.name === nameOrAddress)\n        : programs.find((program) => program.address.equals(nameOrAddress));\n\n    if (!program) {\n      throw new ProgramNotRecognizedError(nameOrAddress, this.metaplex.cluster);\n    }\n\n    return program as T;\n  }\n\n  public getGpaBuilder<T extends GpaBuilder>(\n    nameOrAddress: string | PublicKey,\n    overrides: Program[] = []\n  ): T {\n    const program = this.get(nameOrAddress, overrides);\n\n    if (!program.gpaResolver) {\n      throw new MissingGpaBuilderError(program);\n    }\n\n    return program.gpaResolver(this.metaplex) as T;\n  }\n}\n"],"names":["ProgramClient","constructor","metaplex","register","program","programs","unshift","all","overrides","allForCluster","cluster","filter","clusterFilter","allForCurrentCluster","get","nameOrAddress","find","name","address","equals","ProgramNotRecognizedError","getGpaBuilder","gpaResolver","MissingGpaBuilderError"],"mappings":";;;AAMA;AACA;AACA;AACO,MAAMA,aAAN,CAAoB;EAEzBC,WAAW,CAAoBC,QAApB,EAAwC;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,UAAA,EADnB,EACmB,CAAA,CAAA;;IAAA,IAApBA,CAAAA,QAAoB,GAApBA,QAAoB,CAAA;AAAE,GAAA;;EAErDC,QAAQ,CAACC,OAAD,EAAyB;AAC/B,IAAA,IAAA,CAAKC,QAAL,CAAcC,OAAd,CAAsBF,OAAtB,CAAA,CAAA;AACD,GAAA;;AAEDG,EAAAA,GAAG,CAACC,SAAoB,GAAG,EAAxB,EAAuC;AACxC,IAAA,OAAO,CAAC,GAAGA,SAAJ,EAAe,GAAG,IAAA,CAAKH,QAAvB,CAAP,CAAA;AACD,GAAA;;AAEDI,EAAAA,aAAa,CAACC,OAAD,EAAmBF,SAAoB,GAAG,EAA1C,EAAyD;IACpE,OAAO,IAAA,CAAKD,GAAL,CAASC,SAAT,EAAoBG,MAApB,CAA4BP,OAAD,IAAa;AAC7C,MAAA,OAAOA,OAAO,CAACQ,aAAR,GAAwBF,OAAxB,KAAoC,IAA3C,CAAA;AACD,KAFM,CAAP,CAAA;AAGD,GAAA;;AAEDG,EAAAA,oBAAoB,CAACL,SAAoB,GAAG,EAAxB,EAAuC;IACzD,OAAO,IAAA,CAAKC,aAAL,CAAmB,IAAA,CAAKP,QAAL,CAAcQ,OAAjC,EAA0CF,SAA1C,CAAP,CAAA;AACD,GAAA;;AAEDM,EAAAA,GAAG,CACDC,aADC,EAEDP,SAAoB,GAAG,EAFtB,EAGE;AACH,IAAA,MAAMH,QAAQ,GAAG,IAAA,CAAKQ,oBAAL,CAA0BL,SAA1B,CAAjB,CAAA;AACA,IAAA,MAAMJ,OAAO,GACX,OAAOW,aAAP,KAAyB,QAAzB,GACIV,QAAQ,CAACW,IAAT,CAAeZ,OAAD,IAAaA,OAAO,CAACa,IAAR,KAAiBF,aAA5C,CADJ,GAEIV,QAAQ,CAACW,IAAT,CAAeZ,OAAD,IAAaA,OAAO,CAACc,OAAR,CAAgBC,MAAhB,CAAuBJ,aAAvB,CAA3B,CAHN,CAAA;;IAKA,IAAI,CAACX,OAAL,EAAc;MACZ,MAAM,IAAIgB,yBAAJ,CAA8BL,aAA9B,EAA6C,IAAKb,CAAAA,QAAL,CAAcQ,OAA3D,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAON,OAAP,CAAA;AACD,GAAA;;AAEMiB,EAAAA,aAAa,CAClBN,aADkB,EAElBP,SAAoB,GAAG,EAFL,EAGf;IACH,MAAMJ,OAAO,GAAG,IAAKU,CAAAA,GAAL,CAASC,aAAT,EAAwBP,SAAxB,CAAhB,CAAA;;AAEA,IAAA,IAAI,CAACJ,OAAO,CAACkB,WAAb,EAA0B;AACxB,MAAA,MAAM,IAAIC,sBAAJ,CAA2BnB,OAA3B,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,OAAOA,OAAO,CAACkB,WAAR,CAAoB,IAAA,CAAKpB,QAAzB,CAAP,CAAA;AACD,GAAA;;AAlDwB;;;;"}