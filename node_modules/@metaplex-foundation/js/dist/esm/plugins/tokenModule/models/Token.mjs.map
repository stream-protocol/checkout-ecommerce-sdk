{"version":3,"file":"Token.mjs","sources":["../../../../../src/plugins/tokenModule/models/Token.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { AccountState } from '@solana/spl-token';\nimport { TokenAccount } from '../accounts';\nimport { associatedTokenProgram } from '../program';\nimport { Mint } from './Mint';\nimport { amount, Pda, SplTokenAmount, token } from '@/types';\nimport { assert, Option } from '@/utils';\n\n/**\n * This model represents a token account.\n *\n * @group Models\n */\nexport type Token = {\n  /** A model identifier to distinguish models in the SDK. */\n  readonly model: 'token';\n\n  /** The address of the token account. */\n  readonly address: PublicKey | Pda;\n\n  /** Whether or not this is an associated token account. */\n  readonly isAssociatedToken: boolean;\n\n  /** The address of the mint account. */\n  readonly mintAddress: PublicKey;\n\n  /** The address of the owner of this token account. */\n  readonly ownerAddress: PublicKey;\n\n  /** The amount of tokens held in this account. */\n  readonly amount: SplTokenAmount;\n\n  /**\n   * The address of the authority that can close the account.\n   * This field is optional and may be `null`.\n   */\n  readonly closeAuthorityAddress: Option<PublicKey>;\n\n  /**\n   * The address of the authority that can act on behalf of the owner\n   * of the account. This field is optional and may be `null`.\n   */\n  readonly delegateAddress: Option<PublicKey>;\n\n  /**\n   * The amount of tokens that were delegated to the delegate authority.\n   * This means the delegate authority cannot transfer more tokens\n   * than this amount even if the token account has more tokens available.\n   *\n   * This field is only relevant if the account has a delegate authority.\n   */\n  readonly delegateAmount: SplTokenAmount;\n\n  /**\n   * The state of the token account.\n   * It is mostly used to determine whether or not the account is frozen.\n   *\n   * It can be one of the following:\n   * - `AccountState.Uninitialized`: The account has not been initialized.\n   *   This should never happen in this model since the SDK would fail to\n   *   parse this model if it were uninitialized.\n   * - `AccountState.Initialized`: The account has been initialized and is not frozen.\n   * - `AccountState.Frozen`: The account has been initialized and is frozen.\n   */\n  readonly state: AccountState;\n};\n\n/** @group Model Helpers */\nexport const isToken = (value: any): value is Token =>\n  typeof value === 'object' && value.model === 'token';\n\n/** @group Model Helpers */\nexport function assertToken(value: any): asserts value is Token {\n  assert(isToken(value), `Expected Token model`);\n}\n\n/** @group Model Helpers */\nexport const toToken = (account: TokenAccount): Token => {\n  const associatedTokenAddress = Pda.find(associatedTokenProgram.address, [\n    account.data.owner.toBuffer(),\n    account.owner.toBuffer(),\n    account.data.mint.toBuffer(),\n  ]);\n  const isAssociatedToken = associatedTokenAddress.equals(account.publicKey);\n\n  return {\n    model: 'token',\n    address: isAssociatedToken ? associatedTokenAddress : account.publicKey,\n    isAssociatedToken,\n    mintAddress: account.data.mint,\n    ownerAddress: account.data.owner,\n    amount: token(account.data.amount.toString()),\n    closeAuthorityAddress: account.data.closeAuthorityOption\n      ? account.data.closeAuthority\n      : null,\n    delegateAddress: account.data.delegateOption ? account.data.delegate : null,\n    delegateAmount: token(account.data.delegatedAmount.toString()),\n    state: account.data.state,\n  };\n};\n\n/** @group Models */\nexport type TokenWithMint = Omit<Token, 'model' | 'mintAddress'> &\n  Readonly<{\n    model: 'tokenWithMint';\n    mint: Mint;\n  }>;\n\n/** @group Model Helpers */\nexport const isTokenWithMint = (value: any): value is TokenWithMint =>\n  typeof value === 'object' && value.model === 'tokenWithMint';\n\n/** @group Model Helpers */\nexport function assertTokenWithMint(\n  value: any\n): asserts value is TokenWithMint {\n  assert(isTokenWithMint(value), `Expected TokenWithMint model`);\n}\n\n/** @group Model Helpers */\nexport const toTokenWithMint = (\n  tokenAccount: TokenAccount,\n  mintModel: Mint\n): TokenWithMint => {\n  const token = toToken(tokenAccount);\n  return {\n    ...token,\n    model: 'tokenWithMint',\n    mint: mintModel,\n    amount: amount(token.amount.basisPoints, mintModel.currency),\n    delegateAmount: amount(\n      token.delegateAmount.basisPoints,\n      mintModel.currency\n    ),\n  };\n};\n"],"names":["isToken","value","model","assertToken","assert","toToken","account","associatedTokenAddress","Pda","find","associatedTokenProgram","address","data","owner","toBuffer","mint","isAssociatedToken","equals","publicKey","mintAddress","ownerAddress","amount","token","toString","closeAuthorityAddress","closeAuthorityOption","closeAuthority","delegateAddress","delegateOption","delegate","delegateAmount","delegatedAmount","state","isTokenWithMint","assertTokenWithMint","toTokenWithMint","tokenAccount","mintModel","basisPoints","currency"],"mappings":";;;;;AAQA;AACA;AACA;AACA;AACA;;AAuDA;AACaA,MAAAA,OAAO,GAAIC,KAAD,IACrB,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,QADxC;AAGP;;AACO,SAASC,WAAT,CAAqBF,KAArB,EAAyD;AAC9DG,EAAAA,MAAM,CAACJ,OAAO,CAACC,KAAD,CAAR,EAAkB,sBAAlB,CAAN,CAAA;AACD,CAAA;AAED;;AACaI,MAAAA,OAAO,GAAIC,OAAD,IAAkC;AACvD,EAAA,MAAMC,sBAAsB,GAAGC,GAAG,CAACC,IAAJ,CAASC,sBAAsB,CAACC,OAAhC,EAAyC,CACtEL,OAAO,CAACM,IAAR,CAAaC,KAAb,CAAmBC,QAAnB,EADsE,EAEtER,OAAO,CAACO,KAAR,CAAcC,QAAd,EAFsE,EAGtER,OAAO,CAACM,IAAR,CAAaG,IAAb,CAAkBD,QAAlB,EAHsE,CAAzC,CAA/B,CAAA;EAKA,MAAME,iBAAiB,GAAGT,sBAAsB,CAACU,MAAvB,CAA8BX,OAAO,CAACY,SAAtC,CAA1B,CAAA;EAEA,OAAO;AACLhB,IAAAA,KAAK,EAAE,OADF;AAELS,IAAAA,OAAO,EAAEK,iBAAiB,GAAGT,sBAAH,GAA4BD,OAAO,CAACY,SAFzD;IAGLF,iBAHK;AAILG,IAAAA,WAAW,EAAEb,OAAO,CAACM,IAAR,CAAaG,IAJrB;AAKLK,IAAAA,YAAY,EAAEd,OAAO,CAACM,IAAR,CAAaC,KALtB;IAMLQ,MAAM,EAAEC,KAAK,CAAChB,OAAO,CAACM,IAAR,CAAaS,MAAb,CAAoBE,QAApB,EAAD,CANR;AAOLC,IAAAA,qBAAqB,EAAElB,OAAO,CAACM,IAAR,CAAaa,oBAAb,GACnBnB,OAAO,CAACM,IAAR,CAAac,cADM,GAEnB,IATC;AAULC,IAAAA,eAAe,EAAErB,OAAO,CAACM,IAAR,CAAagB,cAAb,GAA8BtB,OAAO,CAACM,IAAR,CAAaiB,QAA3C,GAAsD,IAVlE;IAWLC,cAAc,EAAER,KAAK,CAAChB,OAAO,CAACM,IAAR,CAAamB,eAAb,CAA6BR,QAA7B,EAAD,CAXhB;AAYLS,IAAAA,KAAK,EAAE1B,OAAO,CAACM,IAAR,CAAaoB,KAAAA;GAZtB,CAAA;AAcD,EAtBM;AAwBP;;AAOA;AACaC,MAAAA,eAAe,GAAIhC,KAAD,IAC7B,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACC,KAAN,KAAgB,gBADxC;AAGP;;AACO,SAASgC,mBAAT,CACLjC,KADK,EAE2B;AAChCG,EAAAA,MAAM,CAAC6B,eAAe,CAAChC,KAAD,CAAhB,EAA0B,8BAA1B,CAAN,CAAA;AACD,CAAA;AAED;;MACakC,eAAe,GAAG,CAC7BC,YAD6B,EAE7BC,SAF6B,KAGX;AAClB,EAAA,MAAMf,KAAK,GAAGjB,OAAO,CAAC+B,YAAD,CAArB,CAAA;EACA,OAAO,EACL,GAAGd,KADE;AAELpB,IAAAA,KAAK,EAAE,eAFF;AAGLa,IAAAA,IAAI,EAAEsB,SAHD;AAILhB,IAAAA,MAAM,EAAEA,MAAM,CAACC,KAAK,CAACD,MAAN,CAAaiB,WAAd,EAA2BD,SAAS,CAACE,QAArC,CAJT;IAKLT,cAAc,EAAET,MAAM,CACpBC,KAAK,CAACQ,cAAN,CAAqBQ,WADD,EAEpBD,SAAS,CAACE,QAFU,CAAA;GALxB,CAAA;AAUD;;;;"}