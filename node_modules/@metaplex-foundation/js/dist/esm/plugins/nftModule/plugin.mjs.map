{"version":3,"file":"plugin.mjs","sources":["../../../../src/plugins/nftModule/plugin.ts"],"sourcesContent":["import { cusper, PROGRAM_ID } from '@metaplex-foundation/mpl-token-metadata';\nimport { ProgramClient } from '../programModule';\nimport { NftClient } from './NftClient';\nimport {\n  approveNftCollectionAuthorityOperation,\n  approveNftCollectionAuthorityOperationHandler,\n  approveNftUseAuthorityOperation,\n  approveNftUseAuthorityOperationHandler,\n  createNftOperation,\n  createNftOperationHandler,\n  createSftOperation,\n  createSftOperationHandler,\n  deleteNftOperation,\n  deleteNftOperationHandler,\n  findNftByMetadataOperation,\n  findNftByMetadataOperationHandler,\n  findNftByMintOperation,\n  findNftByMintOperationHandler,\n  findNftByTokenOperation,\n  findNftByTokenOperationHandler,\n  findNftsByCreatorOperation,\n  findNftsByCreatorOperationHandler,\n  findNftsByMintListOperation,\n  findNftsByMintListOperationHandler,\n  findNftsByOwnerOperation,\n  findNftsByOwnerOperationHandler,\n  findNftsByUpdateAuthorityOperation,\n  findNftsByUpdateAuthorityOperationHandler,\n  freezeDelegatedNftOperation,\n  freezeDelegatedNftOperationHandler,\n  loadMetadataOperation,\n  loadMetadataOperationHandler,\n  migrateToSizedCollectionNftOperation,\n  migrateToSizedCollectionNftOperationHandler,\n  printNewEditionOperation,\n  printNewEditionOperationHandler,\n  revokeNftCollectionAuthorityOperation,\n  revokeNftCollectionAuthorityOperationHandler,\n  revokeNftUseAuthorityOperation,\n  revokeNftUseAuthorityOperationHandler,\n  thawDelegatedNftOperation,\n  thawDelegatedNftOperationHandler,\n  unverifyNftCollectionOperation,\n  unverifyNftCollectionOperationHandler,\n  unverifyNftCreatorOperation,\n  unverifyNftCreatorOperationHandler,\n  updateNftOperation,\n  updateNftOperationHandler,\n  uploadMetadataOperation,\n  uploadMetadataOperationHandler,\n  useNftOperation,\n  useNftOperationHandler,\n  verifyNftCollectionOperation,\n  verifyNftCollectionOperationHandler,\n  verifyNftCreatorOperation,\n  verifyNftCreatorOperationHandler,\n} from './operations';\nimport { ErrorWithLogs, MetaplexPlugin, Program } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/** @group Plugins */\nexport const nftModule = (): MetaplexPlugin => ({\n  install(metaplex: Metaplex) {\n    // Token Metadata Program.\n    const tokenMetadataProgram = {\n      name: 'TokenMetadataProgram',\n      address: PROGRAM_ID,\n      errorResolver: (error: ErrorWithLogs) =>\n        cusper.errorFromProgramLogs(error.logs, false),\n    };\n    metaplex.programs().register(tokenMetadataProgram);\n    metaplex.programs().getTokenMetadata = function (\n      this: ProgramClient,\n      programs?: Program[]\n    ) {\n      return this.get(tokenMetadataProgram.name, programs);\n    };\n\n    // Operations.\n    const op = metaplex.operations();\n    op.register(\n      approveNftCollectionAuthorityOperation,\n      approveNftCollectionAuthorityOperationHandler\n    );\n    op.register(\n      approveNftUseAuthorityOperation,\n      approveNftUseAuthorityOperationHandler\n    );\n    op.register(createNftOperation, createNftOperationHandler);\n    op.register(createSftOperation, createSftOperationHandler);\n    op.register(deleteNftOperation, deleteNftOperationHandler);\n    op.register(findNftByMetadataOperation, findNftByMetadataOperationHandler);\n    op.register(findNftByMintOperation, findNftByMintOperationHandler);\n    op.register(findNftByTokenOperation, findNftByTokenOperationHandler);\n    op.register(findNftsByCreatorOperation, findNftsByCreatorOperationHandler);\n    op.register(\n      findNftsByMintListOperation,\n      findNftsByMintListOperationHandler\n    );\n    op.register(findNftsByOwnerOperation, findNftsByOwnerOperationHandler);\n    op.register(\n      findNftsByUpdateAuthorityOperation,\n      findNftsByUpdateAuthorityOperationHandler\n    );\n    op.register(\n      freezeDelegatedNftOperation,\n      freezeDelegatedNftOperationHandler\n    );\n    op.register(loadMetadataOperation, loadMetadataOperationHandler);\n    op.register(\n      migrateToSizedCollectionNftOperation,\n      migrateToSizedCollectionNftOperationHandler\n    );\n    op.register(printNewEditionOperation, printNewEditionOperationHandler);\n    op.register(\n      revokeNftCollectionAuthorityOperation,\n      revokeNftCollectionAuthorityOperationHandler\n    );\n    op.register(\n      revokeNftUseAuthorityOperation,\n      revokeNftUseAuthorityOperationHandler\n    );\n    op.register(thawDelegatedNftOperation, thawDelegatedNftOperationHandler);\n    op.register(\n      unverifyNftCollectionOperation,\n      unverifyNftCollectionOperationHandler\n    );\n    op.register(\n      unverifyNftCreatorOperation,\n      unverifyNftCreatorOperationHandler\n    );\n    op.register(updateNftOperation, updateNftOperationHandler);\n    op.register(uploadMetadataOperation, uploadMetadataOperationHandler);\n    op.register(useNftOperation, useNftOperationHandler);\n    op.register(\n      verifyNftCollectionOperation,\n      verifyNftCollectionOperationHandler\n    );\n    op.register(verifyNftCreatorOperation, verifyNftCreatorOperationHandler);\n\n    metaplex.nfts = function () {\n      return new NftClient(this);\n    };\n  },\n});\n\ndeclare module '../../Metaplex' {\n  interface Metaplex {\n    nfts(): NftClient;\n  }\n}\n\ndeclare module '../programModule/ProgramClient' {\n  interface ProgramClient {\n    getTokenMetadata(programs?: Program[]): Program;\n  }\n}\n"],"names":["nftModule","install","metaplex","tokenMetadataProgram","name","address","PROGRAM_ID","errorResolver","error","cusper","errorFromProgramLogs","logs","programs","register","getTokenMetadata","get","op","operations","approveNftCollectionAuthorityOperation","approveNftCollectionAuthorityOperationHandler","approveNftUseAuthorityOperation","approveNftUseAuthorityOperationHandler","createNftOperation","createNftOperationHandler","createSftOperation","createSftOperationHandler","deleteNftOperation","deleteNftOperationHandler","findNftByMetadataOperation","findNftByMetadataOperationHandler","findNftByMintOperation","findNftByMintOperationHandler","findNftByTokenOperation","findNftByTokenOperationHandler","findNftsByCreatorOperation","findNftsByCreatorOperationHandler","findNftsByMintListOperation","findNftsByMintListOperationHandler","findNftsByOwnerOperation","findNftsByOwnerOperationHandler","findNftsByUpdateAuthorityOperation","findNftsByUpdateAuthorityOperationHandler","freezeDelegatedNftOperation","freezeDelegatedNftOperationHandler","loadMetadataOperation","loadMetadataOperationHandler","migrateToSizedCollectionNftOperation","migrateToSizedCollectionNftOperationHandler","printNewEditionOperation","printNewEditionOperationHandler","revokeNftCollectionAuthorityOperation","revokeNftCollectionAuthorityOperationHandler","revokeNftUseAuthorityOperation","revokeNftUseAuthorityOperationHandler","thawDelegatedNftOperation","thawDelegatedNftOperationHandler","unverifyNftCollectionOperation","unverifyNftCollectionOperationHandler","unverifyNftCreatorOperation","unverifyNftCreatorOperationHandler","updateNftOperation","updateNftOperationHandler","uploadMetadataOperation","uploadMetadataOperationHandler","useNftOperation","useNftOperationHandler","verifyNftCollectionOperation","verifyNftCollectionOperationHandler","verifyNftCreatorOperation","verifyNftCreatorOperationHandler","nfts","NftClient"],"mappings":"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"}