{"version":3,"file":"NftPdasClient.mjs","sources":["../../../../src/plugins/nftModule/NftPdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey, toBigNumber } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the NFT module.\n *\n * @see {@link NftClient}\n * @group Module Pdas\n */\nexport class NftPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Metadata PDA of a given mint address. */\n  metadata({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Master Edition PDA of a given mint address. */\n  masterEdition({ mint, programs }: MintAddressPdaInput): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n    ]);\n  }\n\n  /** Finds the Edition PDA of a given mint address. */\n  edition(input: MintAddressPdaInput): Pda {\n    return this.masterEdition(input);\n  }\n\n  /** Finds the Edition Marker PDA of a given edition number. */\n  editionMarker({\n    mint,\n    edition,\n    programs,\n  }: {\n    /** The address of the mint account of the edition NFT. */\n    mint: PublicKey;\n    /** The edition number of the NFT. */\n    edition: BigNumber;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('edition', 'utf8'),\n      Buffer.from(edition.div(toBigNumber(248)).toString()),\n    ]);\n  }\n\n  /** Finds the collection authority PDA for a given NFT and authority. */\n  collectionAuthorityRecord({\n    mint,\n    collectionAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the collection authority. */\n    collectionAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('collection_authority', 'utf8'),\n      collectionAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the use authority PDA for a given NFT and user. */\n  useAuthorityRecord({\n    mint,\n    useAuthority,\n    programs,\n  }: {\n    /** The address of the NFT's mint account. */\n    mint: PublicKey;\n    /** The address of the use authority. */\n    useAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      mint.toBuffer(),\n      Buffer.from('user', 'utf8'),\n      useAuthority.toBuffer(),\n    ]);\n  }\n\n  /** Finds the burner PDA of the Token Metadata program. */\n  burner({\n    programs,\n  }: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(programs);\n    return Pda.find(programId, [\n      Buffer.from('metadata', 'utf8'),\n      programId.toBuffer(),\n      Buffer.from('burn', 'utf8'),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getTokenMetadata(programs).address;\n  }\n}\n\ntype MintAddressPdaInput = {\n  /** The address of the mint account. */\n  mint: PublicKey;\n\n  /** An optional set of programs that override the registered ones. */\n  programs?: Program[];\n};\n"],"names":["NftPdasClient","constructor","metaplex","metadata","mint","programs","programId","Pda","find","Buffer","from","toBuffer","masterEdition","edition","input","editionMarker","div","toBigNumber","toString","collectionAuthorityRecord","collectionAuthority","useAuthorityRecord","useAuthority","burner","getTokenMetadata","address"],"mappings":"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"}