{"version":3,"file":"findNftByMint.mjs","sources":["../../../../../src/plugins/nftModule/operations/findNftByMint.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  toMint,\n  toMintAccount,\n  toToken,\n  toTokenAccount,\n} from '../../tokenModule';\nimport {\n  parseOriginalOrPrintEditionAccount,\n  toMetadataAccount,\n} from '../accounts';\nimport {\n  JsonMetadata,\n  Nft,\n  NftWithToken,\n  Sft,\n  SftWithToken,\n  toMetadata,\n  toNft,\n  toNftEdition,\n  toNftWithToken,\n  toSft,\n  toSftWithToken,\n} from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftByMintOperation' as const;\n\n/**\n * Finds an NFT or an SFT by its mint address.\n *\n * ```ts\n * const nft = await metaplex\n *   .nfts()\n *   .findByMint({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftByMintOperation = useOperation<FindNftByMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftByMintOperation = Operation<\n  typeof Key,\n  FindNftByMintInput,\n  FindNftByMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftByMintInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The explicit token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that address is valid, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenOwner` parameter to fetch the\n   * associated token account.\n   *\n   * @defaultValue Defaults to not fetching the token account.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The associated token account to fetch with the NFT or SFT.\n   *\n   * If provided, and if that account exists, the NFT or SFT returned\n   * will be of the type `NftWithToken` or `SftWithToken` respectively.\n   *\n   * Alternatively, you may use the `tokenAddress` parameter to fetch the\n   * token account at an explicit address.\n   *\n   * @defaultValue Defaults to not fetching the associated token account.\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftByMintOutput = Nft | Sft | NftWithToken | SftWithToken;\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftByMintOperationHandler: OperationHandler<FindNftByMintOperation> =\n  {\n    handle: async (\n      operation: FindNftByMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftByMintOutput> => {\n      const { programs, commitment } = scope;\n      const {\n        mintAddress,\n        tokenAddress,\n        tokenOwner,\n        loadJsonMetadata = true,\n      } = operation.input;\n\n      const associatedTokenAddress = tokenOwner\n        ? metaplex.tokens().pdas().associatedTokenAccount({\n            mint: mintAddress,\n            owner: tokenOwner,\n            programs,\n          })\n        : undefined;\n      const nftPdas = metaplex.nfts().pdas();\n      const accountAddresses = [\n        mintAddress,\n        nftPdas.metadata({ mint: mintAddress, programs }),\n        nftPdas.masterEdition({ mint: mintAddress, programs }),\n        tokenAddress ?? associatedTokenAddress,\n      ].filter((address): address is PublicKey => !!address);\n\n      const accounts = await metaplex\n        .rpc()\n        .getMultipleAccounts(accountAddresses, commitment);\n      scope.throwIfCanceled();\n\n      const mint = toMint(toMintAccount(accounts[0]));\n      let metadata = toMetadata(toMetadataAccount(accounts[1]));\n      const editionAccount = parseOriginalOrPrintEditionAccount(accounts[2]);\n      const token = accounts[3] ? toToken(toTokenAccount(accounts[3])) : null;\n\n      if (loadJsonMetadata) {\n        try {\n          const json = await metaplex\n            .storage()\n            .downloadJson<JsonMetadata>(metadata.uri, scope);\n          metadata = { ...metadata, jsonLoaded: true, json };\n        } catch (error) {\n          metadata = { ...metadata, jsonLoaded: true, json: null };\n        }\n      }\n\n      const isNft =\n        editionAccount.exists &&\n        mint.mintAuthorityAddress &&\n        mint.mintAuthorityAddress.equals(editionAccount.publicKey);\n\n      if (isNft) {\n        const edition = toNftEdition(editionAccount);\n        return token\n          ? toNftWithToken(metadata, mint, edition, token)\n          : toNft(metadata, mint, edition);\n      }\n\n      return token\n        ? toSftWithToken(metadata, mint, token)\n        : toSft(metadata, mint);\n    },\n  };\n"],"names":["Key","findNftByMintOperation","useOperation","findNftByMintOperationHandler","handle","operation","metaplex","scope","programs","commitment","mintAddress","tokenAddress","tokenOwner","loadJsonMetadata","input","associatedTokenAddress","tokens","pdas","associatedTokenAccount","mint","owner","undefined","nftPdas","nfts","accountAddresses","metadata","masterEdition","filter","address","accounts","rpc","getMultipleAccounts","throwIfCanceled","toMint","toMintAccount","toMetadata","toMetadataAccount","editionAccount","parseOriginalOrPrintEditionAccount","token","toToken","toTokenAccount","json","storage","downloadJson","uri","jsonLoaded","error","isNft","exists","mintAuthorityAddress","equals","publicKey","edition","toNftEdition","toNftWithToken","toNft","toSftWithToken","toSft"],"mappings":"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"}