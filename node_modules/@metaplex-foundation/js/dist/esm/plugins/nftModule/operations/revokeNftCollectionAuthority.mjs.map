{"version":3,"file":"revokeNftCollectionAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftCollectionAuthority.ts"],"sourcesContent":["import { createRevokeCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftCollectionAuthorityOperation' as const;\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityOperation =\n  useOperation<RevokeNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftCollectionAuthorityInput,\n  RevokeNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to revoke. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * An authority that can revoke this collection authority.\n   *\n   * This can either be the collection's update authority or the delegated\n   * collection authority itself (i.e. revoking its own rights).\n   */\n  revokeAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftCollectionAuthorityOperationHandler: OperationHandler<RevokeNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftCollectionAuthorityOutput> => {\n      return revokeNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftCollectionAuthorityBuilderParams = Omit<\n  RevokeNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeCollectionAuthority({ mintAddress, collectionAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    revokeAuthority = metaplex.identity(),\n  } = params;\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  const instruction = createRevokeCollectionAuthorityInstruction(\n    {\n      collectionAuthorityRecord,\n      delegateAuthority: collectionAuthority,\n      revokeAuthority: revokeAuthority.publicKey,\n      metadata,\n      mint: mintAddress,\n    },\n    tokenMetadataProgram.address\n  );\n\n  // Temporary fix. The Shank macro wrongfully ask for the delegateAuthority to be a signer.\n  // https://github.com/metaplex-foundation/metaplex-program-library/pull/639\n  instruction.keys[1].isSigner = false;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the collection authority.\n      .add({\n        instruction,\n        signers: [revokeAuthority],\n        key: params.instructionKey ?? 'revokeCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftCollectionAuthorityOperation","useOperation","revokeNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","revokeAuthority","identity","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","instruction","createRevokeCollectionAuthorityInstruction","delegateAuthority","publicKey","address","keys","isSigner","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":";;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,YAAY,CAAwCF,GAAxC,EADP;AAGP;AACA;AACA;AACA;;AAoCA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;AAChD,IAAA,OAAOC,mCAAmC,CACxCF,QADwC,EAExCD,SAAS,CAACI,KAF8B,EAGxCF,KAHwC,CAAnC,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,mCAAmC,GAAG,CACjDF,QADiD,EAEjDM,MAFiD,EAGjDC,OAAkC,GAAG,EAHY,KAI1B;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;IAEJC,mBAFI;IAGJC,eAAe,GAAGd,QAAQ,CAACe,QAAT,EAAA;AAHd,GAAA,GAIFT,MAJJ,CAAA;EAMA,MAAMU,oBAAoB,GAAGhB,QAAQ,CAACQ,QAAT,EAAoBS,CAAAA,gBAApB,CAAqCT,QAArC,CAA7B,CAAA;EACA,MAAMU,QAAQ,GAAGlB,QAAQ,CAACmB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBF,CAAAA,QAAvB,CAAgC;AAC/CG,IAAAA,IAAI,EAAET,WADyC;AAE/CJ,IAAAA,QAAAA;AAF+C,GAAhC,CAAjB,CAAA;EAIA,MAAMc,yBAAyB,GAAGtB,QAAQ,CACvCmB,IAD+B,EAE/BC,CAAAA,IAF+B,EAG/BE,CAAAA,yBAH+B,CAGL;AACzBD,IAAAA,IAAI,EAAET,WADmB;IAEzBC,mBAFyB;AAGzBL,IAAAA,QAAAA;AAHyB,GAHK,CAAlC,CAAA;EASA,MAAMe,WAAW,GAAGC,0CAA0C,CAC5D;IACEF,yBADF;AAEEG,IAAAA,iBAAiB,EAAEZ,mBAFrB;IAGEC,eAAe,EAAEA,eAAe,CAACY,SAHnC;IAIER,QAJF;AAKEG,IAAAA,IAAI,EAAET,WAAAA;AALR,GAD4D,EAQ5DI,oBAAoB,CAACW,OARuC,CAA9D,CAtBuB;AAkCvB;;AACAJ,EAAAA,WAAW,CAACK,IAAZ,CAAiB,CAAjB,CAAoBC,CAAAA,QAApB,GAA+B,KAA/B,CAAA;AAEA,EAAA,OACEC,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACevB,KADf,CAGE;AAHF,GAIGwB,GAJH,CAIO;IACHV,WADG;IAEHW,OAAO,EAAE,CAACpB,eAAD,CAFN;AAGHqB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAP,IAAyB,2BAAA;AAH3B,GAJP,CADF,CAAA;AAWD;;;;"}