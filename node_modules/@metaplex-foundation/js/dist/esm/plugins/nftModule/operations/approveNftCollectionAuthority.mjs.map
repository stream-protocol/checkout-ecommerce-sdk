{"version":3,"file":"approveNftCollectionAuthority.mjs","sources":["../../../../../src/plugins/nftModule/operations/approveNftCollectionAuthority.ts"],"sourcesContent":["import { createApproveCollectionAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ApproveNftCollectionAuthorityOperation' as const;\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityOperation =\n  useOperation<ApproveNftCollectionAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ApproveNftCollectionAuthorityOperation = Operation<\n  typeof Key,\n  ApproveNftCollectionAuthorityInput,\n  ApproveNftCollectionAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the collection authority to approve. */\n  collectionAuthority: PublicKey;\n\n  /**\n   * The update authority of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  updateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ApproveNftCollectionAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const approveNftCollectionAuthorityOperationHandler: OperationHandler<ApproveNftCollectionAuthorityOperation> =\n  {\n    handle: async (\n      operation: ApproveNftCollectionAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ApproveNftCollectionAuthorityOutput> => {\n      return approveNftCollectionAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ApproveNftCollectionAuthorityBuilderParams = Omit<\n  ApproveNftCollectionAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that approves the collection authority. */\n  instructionKey?: string;\n};\n\n/**\n * Approves a new collection authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .approveCollectionAuthority({\n *     mintAddress,\n *     collectionAuthority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const approveNftCollectionAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: ApproveNftCollectionAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority,\n    updateAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: mintAddress,\n      collectionAuthority,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Approve the collection authority.\n      .add({\n        instruction: createApproveCollectionAuthorityInstruction(\n          {\n            collectionAuthorityRecord,\n            newCollectionAuthority: collectionAuthority,\n            updateAuthority: updateAuthority.publicKey,\n            payer: payer.publicKey,\n            metadata,\n            mint: mintAddress,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [payer, updateAuthority],\n        key: params.instructionKey ?? 'approveCollectionAuthority',\n      })\n  );\n};\n"],"names":["Key","approveNftCollectionAuthorityOperation","useOperation","approveNftCollectionAuthorityOperationHandler","handle","operation","metaplex","scope","approveNftCollectionAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","updateAuthority","identity","systemProgram","getSystem","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","collectionAuthorityRecord","TransactionBuilder","make","setFeePayer","add","instruction","createApproveCollectionAuthorityInstruction","newCollectionAuthority","publicKey","address","signers","key","instructionKey"],"mappings":";;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,wCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,sCAAsC,GACjDC,YAAY,CAAyCF,GAAzC,EADP;AAGP;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACO,MAAMG,6CAAuG,GAClH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI2C;AACjD,IAAA,OAAOC,oCAAoC,CACzCF,QADyC,EAEzCD,SAAS,CAACI,KAF+B,EAGzCF,KAHyC,CAApC,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,oCAAoC,GAAG,CAClDF,QADkD,EAElDM,MAFkD,EAGlDC,OAAkC,GAAG,EAHa,KAI3B;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;IAEJC,mBAFI;IAGJC,eAAe,GAAGd,QAAQ,CAACe,QAAT,EAAA;GAChBT,GAAAA,MAJJ,CAFuB;;EASvB,MAAMU,aAAa,GAAGhB,QAAQ,CAACQ,QAAT,EAAoBS,CAAAA,SAApB,CAA8BT,QAA9B,CAAtB,CAAA;EACA,MAAMU,oBAAoB,GAAGlB,QAAQ,CAACQ,QAAT,EAAoBW,CAAAA,gBAApB,CAAqCX,QAArC,CAA7B,CAVuB;;EAavB,MAAMY,QAAQ,GAAGpB,QAAQ,CAACqB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBF,CAAAA,QAAvB,CAAgC;AAC/CG,IAAAA,IAAI,EAAEX,WADyC;AAE/CJ,IAAAA,QAAAA;AAF+C,GAAhC,CAAjB,CAAA;EAIA,MAAMgB,yBAAyB,GAAGxB,QAAQ,CACvCqB,IAD+B,EAE/BC,CAAAA,IAF+B,EAG/BE,CAAAA,yBAH+B,CAGL;AACzBD,IAAAA,IAAI,EAAEX,WADmB;IAEzBC,mBAFyB;AAGzBL,IAAAA,QAAAA;AAHyB,GAHK,CAAlC,CAAA;AASA,EAAA,OACEiB,kBAAkB,CAACC,IAAnB,GACGC,WADH,CACelB,KADf,CAGE;AAHF,GAIGmB,GAJH,CAIO;IACHC,WAAW,EAAEC,2CAA2C,CACtD;MACEN,yBADF;AAEEO,MAAAA,sBAAsB,EAAElB,mBAF1B;MAGEC,eAAe,EAAEA,eAAe,CAACkB,SAHnC;MAIEvB,KAAK,EAAEA,KAAK,CAACuB,SAJf;MAKEZ,QALF;AAMEG,MAAAA,IAAI,EAAEX,WANR;MAOEI,aAAa,EAAEA,aAAa,CAACiB,OAAAA;AAP/B,KADsD,EAUtDf,oBAAoB,CAACe,OAViC,CADrD;AAaHC,IAAAA,OAAO,EAAE,CAACzB,KAAD,EAAQK,eAAR,CAbN;AAcHqB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAP,IAAyB,4BAAA;AAd3B,GAJP,CADF,CAAA;AAsBD;;;;"}