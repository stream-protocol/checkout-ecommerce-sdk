{"version":3,"file":"CandyMachinesV2Client.mjs","sources":["../../../../src/plugins/candyMachineV2Module/CandyMachinesV2Client.ts"],"sourcesContent":["import type { PublicKey } from '@solana/web3.js';\nimport { CandyMachinesV2BuildersClient } from './CandyMachinesV2BuildersClient';\nimport { CandyMachineV2 } from './models';\nimport {\n  CreateCandyMachineV2Input,\n  createCandyMachineV2Operation,\n  DeleteCandyMachineV2Input,\n  deleteCandyMachineV2Operation,\n  FindCandyMachineV2ByAddressInput,\n  findCandyMachineV2ByAddressOperation,\n  FindCandyMachinesV2ByPublicKeyFieldInput,\n  findCandyMachinesV2ByPublicKeyFieldOperation,\n  FindMintedNftsByCandyMachineV2Input,\n  findMintedNftsByCandyMachineV2Operation,\n  InsertItemsToCandyMachineV2Input,\n  insertItemsToCandyMachineV2Operation,\n  MintCandyMachineV2Input,\n  mintCandyMachineV2Operation,\n  UpdateCandyMachineV2Input,\n  updateCandyMachineV2Operation,\n} from './operations';\nimport { OperationOptions, toPublicKey } from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This is a client for the Candy Machine module.\n *\n * It enables us to interact with the Candy Machine program in order to\n * create, update and delete Candy Machines as well as mint from them.\n *\n * You may access this client via the `candyMachinesV2()` method of your `Metaplex` instance.\n *\n * ```ts\n * const candyMachineV2Client = metaplex.candyMachinesV2();\n * ```\n *\n * @example\n * You can create a new Candy Machine with minimum input like so.\n * By default, the current identity of the Metaplex instance will be\n * the authority of the Candy Machine.\n *\n * ```ts\n * const { candyMachine } = await metaplex\n *   .candyMachinesV2()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   };\n * ```\n *\n * @see {@link CandyMachine} The `CandyMachine` model\n * @group Modules\n */\nexport class CandyMachinesV2Client {\n  constructor(readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.candyMachinesV2().builders();\n   * ```\n   */\n  builders() {\n    return new CandyMachinesV2BuildersClient(this.metaplex);\n  }\n\n  /** {@inheritDoc createCandyMachineV2Operation} */\n  create(input: CreateCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc deleteCandyMachineV2Operation} */\n  delete(input: DeleteCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(deleteCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc findCandyMachinesV2ByPublicKeyFieldOperation} */\n  findAllBy(\n    input: FindCandyMachinesV2ByPublicKeyFieldInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyMachinesV2ByPublicKeyFieldOperation(input), options);\n  }\n\n  /** {@inheritDoc findCandyMachineV2ByAddressOperation} */\n  findByAddress(\n    input: FindCandyMachineV2ByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findCandyMachineV2ByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findMintedNftsByCandyMachineV2Operation} */\n  findMintedNfts(\n    input: FindMintedNftsByCandyMachineV2Input,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findMintedNftsByCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc insertItemsToCandyMachineV2Operation} */\n  insertItems(\n    input: InsertItemsToCandyMachineV2Input,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(insertItemsToCandyMachineV2Operation(input), options);\n  }\n\n  /** {@inheritDoc mintCandyMachineV2Operation} */\n  mint(input: MintCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(mintCandyMachineV2Operation(input), options);\n  }\n\n  /**\n   * Helper method that refetches a given Candy Machine.\n   *\n   * ```ts\n   * const candyMachine = await metaplex.candyMachinesV2().refresh(candyMachine);\n   * ```\n   */\n  refresh(\n    candyMachine: CandyMachineV2 | PublicKey,\n    options?: OperationOptions\n  ) {\n    return this.findByAddress({ address: toPublicKey(candyMachine) }, options);\n  }\n\n  /** {@inheritDoc updateCandyMachineV2Operation} */\n  update(input: UpdateCandyMachineV2Input, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(updateCandyMachineV2Operation(input), options);\n  }\n}\n"],"names":["CandyMachinesV2Client","constructor","metaplex","builders","CandyMachinesV2BuildersClient","create","input","options","operations","execute","createCandyMachineV2Operation","delete","deleteCandyMachineV2Operation","findAllBy","findCandyMachinesV2ByPublicKeyFieldOperation","findByAddress","findCandyMachineV2ByAddressOperation","findMintedNfts","findMintedNftsByCandyMachineV2Operation","insertItems","insertItemsToCandyMachineV2Operation","mint","mintCandyMachineV2Operation","refresh","candyMachine","address","toPublicKey","update","updateCandyMachineV2Operation"],"mappings":"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"}