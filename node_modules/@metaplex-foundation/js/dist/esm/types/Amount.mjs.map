{"version":3,"file":"Amount.mjs","sources":["../../../src/types/Amount.ts"],"sourcesContent":["import { LAMPORTS_PER_SOL } from '@solana/web3.js';\nimport BN from 'bn.js';\nimport { BigNumber, BigNumberValues, toBigNumber } from './BigNumber';\nimport { CurrencyMismatchError, UnexpectedCurrencyError } from '@/errors';\n\nexport type Amount<T extends Currency = Currency> = {\n  basisPoints: BigNumber;\n  currency: T;\n};\n\nexport type Currency = {\n  symbol: string;\n  decimals: number;\n  namespace?: 'spl-token';\n};\n\nexport type SplTokenCurrency = {\n  symbol: string;\n  decimals: number;\n  namespace: 'spl-token';\n};\nexport type SplTokenAmount = Amount<SplTokenCurrency>;\n\n/** @group Constants */\nexport const SOL = {\n  symbol: 'SOL',\n  decimals: 9,\n} as const;\nexport type SolCurrency = typeof SOL;\nexport type SolAmount = Amount<SolCurrency>;\n\n/** @group Constants */\nexport const USD = {\n  symbol: 'USD',\n  decimals: 2,\n} as const;\nexport type UsdCurrency = typeof USD;\nexport type UsdAmount = Amount<UsdCurrency>;\n\nexport const amount = <T extends Currency = Currency>(\n  basisPoints: BigNumberValues,\n  currency: T\n): Amount<T> => {\n  return {\n    basisPoints: toBigNumber(basisPoints),\n    currency,\n  };\n};\n\nexport const lamports = (lamports: BigNumberValues): SolAmount => {\n  return amount(lamports, SOL);\n};\n\nexport const sol = (sol: number): SolAmount => {\n  return lamports(sol * LAMPORTS_PER_SOL);\n};\n\nexport const usd = (usd: number): UsdAmount => {\n  return amount(usd * 100, USD);\n};\n\nexport const token = (\n  amount: BigNumberValues,\n  decimals = 0,\n  symbol = 'Token'\n): SplTokenAmount => {\n  if (typeof amount !== 'number') {\n    amount = toBigNumber(amount).toNumber();\n  }\n\n  return {\n    basisPoints: toBigNumber(amount * Math.pow(10, decimals)),\n    currency: {\n      symbol,\n      decimals,\n      namespace: 'spl-token',\n    },\n  };\n};\n\nexport const isSol = (currencyOrAmount: Currency | Amount): boolean => {\n  return sameCurrencies(currencyOrAmount, SOL);\n};\n\nexport const sameAmounts = (left: Amount, right: Amount): boolean => {\n  return sameCurrencies(left, right) && left.basisPoints.eq(right.basisPoints);\n};\n\nexport const sameCurrencies = (\n  left: Currency | Amount,\n  right: Currency | Amount\n): boolean => {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  return (\n    left.symbol === right.symbol &&\n    left.decimals === right.decimals &&\n    left.namespace === right.namespace\n  );\n};\n\nexport function assertCurrency<T extends Currency>(\n  actual: Currency,\n  expected: T\n): asserts actual is T;\nexport function assertCurrency<T extends Currency>(\n  actual: Amount,\n  expected: T\n): asserts actual is Amount<T>;\nexport function assertCurrency<T extends Currency>(\n  actual: Currency | Amount,\n  expected: T\n): asserts actual is T | Amount<T>;\nexport function assertCurrency<T extends Currency>(\n  actual: Currency | Amount,\n  expected: T\n): asserts actual is T | Amount<T> {\n  if ('currency' in actual) {\n    actual = actual.currency;\n  }\n\n  if (!sameCurrencies(actual, expected)) {\n    throw new UnexpectedCurrencyError(actual, expected);\n  }\n}\nexport function assertSol(actual: Amount): asserts actual is SolAmount;\nexport function assertSol(actual: Currency): asserts actual is SolCurrency;\nexport function assertSol(\n  actual: Currency | Amount\n): asserts actual is SolCurrency | SolAmount;\nexport function assertSol(\n  actual: Currency | Amount\n): asserts actual is SolCurrency | SolAmount {\n  assertCurrency(actual, SOL);\n}\n\nexport function assertSameCurrencies<L extends Currency, R extends Currency>(\n  left: L | Amount<L>,\n  right: R | Amount<R>,\n  operation?: string\n) {\n  if ('currency' in left) {\n    left = left.currency;\n  }\n\n  if ('currency' in right) {\n    right = right.currency;\n  }\n\n  if (!sameCurrencies(left, right)) {\n    throw new CurrencyMismatchError(left, right, operation);\n  }\n}\n\nexport const addAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): Amount<T> => {\n  assertSameCurrencies(left, right, 'add');\n\n  return amount(left.basisPoints.add(right.basisPoints), left.currency);\n};\n\nexport const subtractAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): Amount<T> => {\n  assertSameCurrencies(left, right, 'subtract');\n\n  return amount(left.basisPoints.sub(right.basisPoints), left.currency);\n};\n\nexport const multiplyAmount = <T extends Currency>(\n  left: Amount<T>,\n  multiplier: number\n): Amount<T> => {\n  return amount(left.basisPoints.muln(multiplier), left.currency);\n};\n\nexport const divideAmount = <T extends Currency>(\n  left: Amount<T>,\n  divisor: number\n): Amount<T> => {\n  return amount(left.basisPoints.divn(divisor), left.currency);\n};\n\nexport const absoluteAmount = <T extends Currency>(\n  value: Amount<T>\n): Amount<T> => {\n  return amount(value.basisPoints.abs(), value.currency);\n};\n\nexport const compareAmounts = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): -1 | 0 | 1 => {\n  assertSameCurrencies(left, right, 'compare');\n\n  return left.basisPoints.cmp(right.basisPoints);\n};\n\nexport const isEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>,\n  tolerance?: Amount<T>\n): boolean => {\n  tolerance = tolerance ?? amount(0, left.currency);\n  assertSameCurrencies(left, right, 'isEqualToAmount');\n  assertSameCurrencies(left, tolerance, 'isEqualToAmount');\n\n  const delta = absoluteAmount(subtractAmounts(left, right));\n\n  return isLessThanOrEqualToAmount(delta, tolerance);\n};\n\nexport const isLessThanAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) < 0;\n\nexport const isLessThanOrEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) <= 0;\n\nexport const isGreaterThanAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) > 0;\n\nexport const isGreaterThanOrEqualToAmount = <T extends Currency>(\n  left: Amount<T>,\n  right: Amount<T>\n): boolean => compareAmounts(left, right) >= 0;\n\nexport const isZeroAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) === 0;\n\nexport const isPositiveAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) >= 0;\n\nexport const isNegativeAmount = (value: Amount): boolean =>\n  compareAmounts(value, amount(0, value.currency)) < 0;\n\nexport const formatAmount = (value: Amount): string => {\n  if (value.currency.decimals === 0) {\n    return `${value.currency.symbol} ${value.basisPoints.toString()}`;\n  }\n\n  const power = new BN(10).pow(new BN(value.currency.decimals));\n  const basisPoints = value.basisPoints as unknown as BN & {\n    divmod: (other: BN) => { div: BN; mod: BN };\n  };\n\n  const { div, mod } = basisPoints.divmod(power);\n  const units = `${div.toString()}.${mod\n    .abs()\n    .toString(10, value.currency.decimals)}`;\n\n  return `${value.currency.symbol} ${units}`;\n};\n"],"names":["SOL","symbol","decimals","USD","amount","basisPoints","currency","toBigNumber","lamports","sol","LAMPORTS_PER_SOL","usd","token","toNumber","Math","pow","namespace","isSol","currencyOrAmount","sameCurrencies","sameAmounts","left","right","eq","assertCurrency","actual","expected","UnexpectedCurrencyError","assertSol","assertSameCurrencies","operation","CurrencyMismatchError","addAmounts","add","subtractAmounts","sub","multiplyAmount","multiplier","muln","divideAmount","divisor","divn","absoluteAmount","value","abs","compareAmounts","cmp","isEqualToAmount","tolerance","delta","isLessThanOrEqualToAmount","isLessThanAmount","isGreaterThanAmount","isGreaterThanOrEqualToAmount","isZeroAmount","isPositiveAmount","isNegativeAmount","formatAmount","toString","power","BN","div","mod","divmod","units"],"mappings":"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"}