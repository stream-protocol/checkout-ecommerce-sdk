{"version":3,"file":"TransactionBuilder.cjs","sources":["../../../src/utils/TransactionBuilder.ts"],"sourcesContent":["import {\n  BlockhashWithExpiryBlockHeight,\n  ConfirmOptions,\n  SignaturePubkeyPair,\n  Transaction,\n  TransactionInstruction,\n} from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../plugins/rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport type { OperationOptions, Signer } from '@/types';\n\nexport type InstructionWithSigners = {\n  instruction: TransactionInstruction;\n  signers: Signer[];\n  key?: string;\n};\n\ntype TransactionOptions = {\n  /** Additional signatures. */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\nexport type TransactionBuilderOptions = Pick<\n  OperationOptions,\n  'programs' | 'payer'\n>;\n\nexport class TransactionBuilder<C extends object = object> {\n  /** The list of all instructions and their respective signers. */\n  protected records: InstructionWithSigners[] = [];\n\n  /** Options used when building the transaction. */\n  protected transactionOptions: TransactionOptions;\n\n  /** The signer to use to pay for transaction fees. */\n  protected feePayer: Signer | undefined = undefined;\n\n  /** Any additional context gathered when creating the transaction builder. */\n  protected context: C = {} as C;\n\n  constructor(transactionOptions: TransactionOptions = {}) {\n    this.transactionOptions = transactionOptions;\n  }\n\n  static make<C extends object = object>(\n    transactionOptions?: TransactionOptions\n  ): TransactionBuilder<C> {\n    return new TransactionBuilder<C>(transactionOptions);\n  }\n\n  prepend(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    const newRecords = txs.flatMap((tx) =>\n      tx instanceof TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]\n    );\n    this.records = [...newRecords, ...this.records];\n\n    return this;\n  }\n\n  append(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    const newRecords = txs.flatMap((tx) =>\n      tx instanceof TransactionBuilder ? tx.getInstructionsWithSigners() : [tx]\n    );\n    this.records = [...this.records, ...newRecords];\n\n    return this;\n  }\n\n  add(\n    ...txs: (InstructionWithSigners | TransactionBuilder)[]\n  ): TransactionBuilder<C> {\n    return this.append(...txs);\n  }\n\n  splitUsingKey(\n    key: string,\n    include = true\n  ): [TransactionBuilder, TransactionBuilder] {\n    const firstBuilder = new TransactionBuilder(this.transactionOptions);\n    const secondBuilder = new TransactionBuilder(this.transactionOptions);\n    let keyPosition = this.records.findIndex((record) => record.key === key);\n\n    if (keyPosition > -1) {\n      keyPosition += include ? 1 : 0;\n      firstBuilder.add(...this.records.slice(0, keyPosition));\n      firstBuilder.add(...this.records.slice(keyPosition));\n    } else {\n      firstBuilder.add(this);\n    }\n\n    return [firstBuilder, secondBuilder];\n  }\n\n  splitBeforeKey(key: string): [TransactionBuilder, TransactionBuilder] {\n    return this.splitUsingKey(key, false);\n  }\n\n  splitAfterKey(key: string): [TransactionBuilder, TransactionBuilder] {\n    return this.splitUsingKey(key, true);\n  }\n\n  getInstructionsWithSigners(): InstructionWithSigners[] {\n    return this.records;\n  }\n\n  getInstructions(): TransactionInstruction[] {\n    return this.records.map((record) => record.instruction);\n  }\n\n  getInstructionCount(): number {\n    return this.records.length;\n  }\n\n  isEmpty(): boolean {\n    return this.getInstructionCount() === 0;\n  }\n\n  getSigners(): Signer[] {\n    const feePayer = this.feePayer == null ? [] : [this.feePayer];\n    const signers = this.records.flatMap((record) => record.signers);\n\n    return [...feePayer, ...signers];\n  }\n\n  setTransactionOptions(\n    transactionOptions: TransactionOptions\n  ): TransactionBuilder<C> {\n    this.transactionOptions = transactionOptions;\n\n    return this;\n  }\n\n  getTransactionOptions(): TransactionOptions | undefined {\n    return this.transactionOptions;\n  }\n\n  setFeePayer(feePayer: Signer): TransactionBuilder<C> {\n    this.feePayer = feePayer;\n\n    return this;\n  }\n\n  getFeePayer(): Signer | undefined {\n    return this.feePayer;\n  }\n\n  setContext(context: C): TransactionBuilder<C> {\n    this.context = context;\n\n    return this;\n  }\n\n  getContext(): C {\n    return this.context;\n  }\n\n  when(\n    condition: boolean,\n    callback: (tx: TransactionBuilder<C>) => TransactionBuilder<C>\n  ) {\n    return condition ? callback(this) : this;\n  }\n\n  unless(\n    condition: boolean,\n    callback: (tx: TransactionBuilder<C>) => TransactionBuilder<C>\n  ) {\n    return this.when(!condition, callback);\n  }\n\n  toTransaction(\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight,\n    options: TransactionOptions = {}\n  ): Transaction {\n    options = { ...this.getTransactionOptions(), ...options };\n\n    const transaction = new Transaction({\n      feePayer: this.getFeePayer()?.publicKey,\n      signatures: options.signatures,\n      blockhash: blockhashWithExpiryBlockHeight.blockhash,\n      lastValidBlockHeight: blockhashWithExpiryBlockHeight.lastValidBlockHeight,\n    });\n\n    transaction.add(...this.getInstructions());\n\n    return transaction;\n  }\n\n  async sendAndConfirm(\n    metaplex: Metaplex,\n    confirmOptions?: ConfirmOptions\n  ): Promise<{ response: SendAndConfirmTransactionResponse } & C> {\n    const response = await metaplex\n      .rpc()\n      .sendAndConfirmTransaction(this, confirmOptions);\n\n    return {\n      response,\n      ...this.getContext(),\n    };\n  }\n}\n"],"names":["TransactionBuilder","constructor","transactionOptions","_defineProperty","undefined","make","prepend","txs","newRecords","flatMap","tx","getInstructionsWithSigners","records","append","add","splitUsingKey","key","include","firstBuilder","secondBuilder","keyPosition","findIndex","record","slice","splitBeforeKey","splitAfterKey","getInstructions","map","instruction","getInstructionCount","length","isEmpty","getSigners","feePayer","signers","setTransactionOptions","getTransactionOptions","setFeePayer","getFeePayer","setContext","context","getContext","when","condition","callback","unless","toTransaction","blockhashWithExpiryBlockHeight","options","transaction","Transaction","publicKey","signatures","blockhash","lastValidBlockHeight","sendAndConfirm","metaplex","confirmOptions","response","rpc","sendAndConfirmTransaction"],"mappings":"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"}