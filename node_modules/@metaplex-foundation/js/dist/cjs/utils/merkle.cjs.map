{"version":3,"file":"merkle.cjs","sources":["../../../src/utils/merkle.ts"],"sourcesContent":["import { MerkleTree } from 'merkletreejs';\nimport { keccak_256 } from '@noble/hashes/sha3';\n\n/**\n * Describes the required data input for\n * handling Merkle Tree operations.\n */\ntype MerkleTreeInput = Uint8Array | string;\n\n/**\n * Creates a Merkle Tree from the provided data.\n */\nexport const getMerkleTree = (data: MerkleTreeInput[]): MerkleTree => {\n  return new MerkleTree(data.map(keccak_256), keccak_256, {\n    sortPairs: true,\n  });\n};\n\n/**\n * Creates a Merkle Root from the provided data.\n *\n * This root provides a short identifier for the\n * provided data that is unique and deterministic.\n * This means, we can use this root to verify that\n * a given data is part of the original data set.\n */\nexport const getMerkleRoot = (data: MerkleTreeInput[]): Uint8Array => {\n  return getMerkleTree(data).getRoot();\n};\n\n/**\n * Creates a Merkle Proof for a given data item.\n *\n * This proof can be used to verify that the given\n * data item is part of the original data set.\n */\nexport const getMerkleProof = (\n  data: MerkleTreeInput[],\n  leaf: MerkleTreeInput,\n  index?: number\n): Uint8Array[] => {\n  return getMerkleTree(data)\n    .getProof(Buffer.from(keccak_256(leaf)), index)\n    .map((proofItem) => proofItem.data);\n};\n\n/**\n * Creates a Merkle Proof for a data item at a given index.\n *\n * This proof can be used to verify that the data item at\n * the given index is part of the original data set.\n */\nexport const getMerkleProofAtIndex = (\n  data: MerkleTreeInput[],\n  index: number\n): Uint8Array[] => {\n  return getMerkleProof(data, data[index], index);\n};\n"],"names":["getMerkleTree","data","MerkleTree","map","keccak_256","sortPairs","getMerkleRoot","getRoot","getMerkleProof","leaf","index","getProof","Buffer","from","proofItem","getMerkleProofAtIndex"],"mappings":";;;;;;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACaA,MAAAA,aAAa,GAAIC,IAAD,IAAyC;EACpE,OAAO,IAAIC,uBAAJ,CAAeD,IAAI,CAACE,GAAL,CAASC,eAAT,CAAf,EAAqCA,eAArC,EAAiD;AACtDC,IAAAA,SAAS,EAAE,IAAA;AAD2C,GAAjD,CAAP,CAAA;AAGD,EAJM;AAMP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,aAAa,GAAIL,IAAD,IAAyC;AACpE,EAAA,OAAOD,aAAa,CAACC,IAAD,CAAb,CAAoBM,OAApB,EAAP,CAAA;AACD,EAFM;AAIP;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMC,cAAc,GAAG,CAC5BP,IAD4B,EAE5BQ,IAF4B,EAG5BC,KAH4B,KAIX;EACjB,OAAOV,aAAa,CAACC,IAAD,CAAb,CACJU,QADI,CACKC,MAAM,CAACC,IAAP,CAAYT,eAAU,CAACK,IAAD,CAAtB,CADL,EACoCC,KADpC,CAEJP,CAAAA,GAFI,CAECW,SAAD,IAAeA,SAAS,CAACb,IAFzB,CAAP,CAAA;AAGD,EARM;AAUP;AACA;AACA;AACA;AACA;AACA;;MACac,qBAAqB,GAAG,CACnCd,IADmC,EAEnCS,KAFmC,KAGlB;EACjB,OAAOF,cAAc,CAACP,IAAD,EAAOA,IAAI,CAACS,KAAD,CAAX,EAAoBA,KAApB,CAArB,CAAA;AACD;;;;;;;"}