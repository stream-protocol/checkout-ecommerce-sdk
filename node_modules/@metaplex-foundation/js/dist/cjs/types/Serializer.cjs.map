{"version":3,"file":"Serializer.cjs","sources":["../../../src/types/Serializer.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Beet } from '@metaplex-foundation/beet';\nimport * as beet from '@metaplex-foundation/beet';\nimport {\n  FailedToDeserializeDataError,\n  FailedToSerializeDataError,\n  UnexpectedAccountError,\n} from '../errors';\nimport {\n  Account,\n  MaybeAccount,\n  UnparsedAccount,\n  UnparsedMaybeAccount,\n} from './Account';\n\nexport type Serializer<T> = {\n  description: string;\n  serialize: (value: T) => Buffer;\n  deserialize: (buffer: Buffer, offset?: number) => [T, number];\n};\n\nexport const mapSerializer = <T, U>(\n  serializer: Serializer<T>,\n  map: (value: T) => U,\n  unmap: (value: U) => T\n): Serializer<U> => ({\n  description: serializer.description,\n  serialize: (value) => serializer.serialize(unmap(value)),\n  deserialize: (buffer, offset) => {\n    const [value, newOffset] = serializer.deserialize(buffer, offset);\n    return [map(value), newOffset];\n  },\n});\n\nexport const createSerializerFromBeet = <T>(\n  beetArg: Beet<T>\n): Serializer<T> => ({\n  description: beetArg.description,\n  serialize: (value: T) => {\n    const fixedBeet = beet.isFixableBeet(beetArg)\n      ? beetArg.toFixedFromValue(value)\n      : beetArg;\n    const writer = new beet.BeetWriter(fixedBeet.byteSize);\n    writer.write(fixedBeet, value);\n    return writer.buffer;\n  },\n  deserialize: (buffer: Buffer, offset?: number) => {\n    const fixedBeet = beet.isFixableBeet(beetArg)\n      ? beetArg.toFixedFromData(buffer, offset ?? 0)\n      : beetArg;\n    const reader = new beet.BeetReader(buffer, offset ?? 0);\n    const value = reader.read(fixedBeet);\n    return [value, reader.offset];\n  },\n});\n\nexport type SolitaType<T> = {\n  name: string;\n  deserialize: (data: Buffer, offset?: number) => [T, number];\n  fromArgs: (args: T) => {\n    serialize: () => [Buffer, number];\n  };\n};\n\nexport const createSerializerFromSolitaType = <T>(\n  solitaType: SolitaType<T>,\n  description?: string\n): Serializer<T> => ({\n  description: description ?? solitaType.name,\n  serialize: (value: T) => {\n    return solitaType.fromArgs(value).serialize()[0];\n  },\n  deserialize: (buffer: Buffer, offset?: number) => {\n    return solitaType.deserialize(buffer, offset);\n  },\n});\n\nexport const serialize = <T>(\n  value: T,\n  serializer: Pick<Serializer<T>, 'description' | 'serialize'>\n): Buffer => {\n  try {\n    return serializer.serialize(value);\n  } catch (error) {\n    throw new FailedToSerializeDataError(serializer.description, {\n      cause: error as Error,\n    });\n  }\n};\n\nexport const deserialize = <T>(\n  value: Buffer,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): [T, number] => {\n  try {\n    return serializer.deserialize(value);\n  } catch (error) {\n    throw new FailedToDeserializeDataError(serializer.description, {\n      cause: error as Error,\n    });\n  }\n};\n\nexport function deserializeAccount<T>(\n  account: UnparsedMaybeAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): MaybeAccount<T>;\nexport function deserializeAccount<T>(\n  account: UnparsedAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): Account<T>;\nexport function deserializeAccount<T>(\n  account: UnparsedAccount | UnparsedMaybeAccount,\n  serializer: Pick<Serializer<T>, 'description' | 'deserialize'>\n): Account<T> | MaybeAccount<T> {\n  if ('exists' in account && !account.exists) {\n    return account;\n  }\n\n  try {\n    const data: T = serializer.deserialize(account.data)[0];\n    return { ...account, data };\n  } catch (error) {\n    throw new UnexpectedAccountError(\n      account.publicKey,\n      serializer.description,\n      { cause: error as Error }\n    );\n  }\n}\n\nexport const serializeDiscriminator = (discriminator: number[]): Buffer => {\n  const serializer = createSerializerFromBeet(\n    beet.uniformFixedSizeArray(beet.u8, 8)\n  );\n  return serialize(discriminator, serializer);\n};\n"],"names":["mapSerializer","serializer","map","unmap","description","serialize","value","deserialize","buffer","offset","newOffset","createSerializerFromBeet","beetArg","fixedBeet","beet","isFixableBeet","toFixedFromValue","writer","BeetWriter","byteSize","write","toFixedFromData","reader","BeetReader","read","createSerializerFromSolitaType","solitaType","name","fromArgs","error","FailedToSerializeDataError","cause","FailedToDeserializeDataError","deserializeAccount","account","exists","data","UnexpectedAccountError","publicKey","serializeDiscriminator","discriminator","uniformFixedSizeArray","u8"],"mappings":"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"}