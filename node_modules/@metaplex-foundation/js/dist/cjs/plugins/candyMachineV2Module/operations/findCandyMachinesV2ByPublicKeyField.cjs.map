{"version":3,"file":"findCandyMachinesV2ByPublicKeyField.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/findCandyMachinesV2ByPublicKeyField.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport {\n  CandyMachineV2Account,\n  parseCandyMachineV2Account,\n  parseCandyMachineV2CollectionAccount,\n} from '../accounts';\nimport { CandyMachineV2GpaBuilder } from '../gpaBuilders';\nimport { CandyMachineV2, toCandyMachineV2 } from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { CandyMachineV2Program } from '../program';\nimport { zipMap } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Mint, toMint, toMintAccount } from '@/plugins/tokenModule';\nimport { Metaplex } from '@/Metaplex';\nimport { UnreachableCaseError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyMachinesV2ByPublicKeyOperation' as const;\n\n/**\n * Find all Candy Machines matching by a given `publicKey` or a given `type`.\n *\n * The following two types are supported.\n *\n * `authority`: Find Candy Machines whose authority is the given `publicKey`.\n * ```ts\n * const someAuthority = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachinesV2()\n *   .findAllBy({ type: 'authority', someAuthority });\n * ```\n *\n * `wallet`: Find Candy Machines whose wallet address is the given `publicKey`.\n * ```ts\n * const someWallet = new PublicKey('...');\n * const candyMachines = await metaplex\n *   .candyMachinesV2()\n *   .findAllBy({ type: 'wallet', someWallet });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyMachinesV2ByPublicKeyFieldOperation =\n  useOperation<FindCandyMachinesV2ByPublicKeyFieldOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyMachinesV2ByPublicKeyFieldOperation = Operation<\n  typeof Key,\n  FindCandyMachinesV2ByPublicKeyFieldInput,\n  CandyMachineV2[]\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyMachinesV2ByPublicKeyFieldInput = {\n  /** Defines which type of account the `publicKey` field refers to.  */\n  type: 'authority' | 'wallet';\n\n  /** The publicKey to filter Candy Machine by. */\n  publicKey: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyMachinesV2ByPublicKeyFieldOperationHandler: OperationHandler<FindCandyMachinesV2ByPublicKeyFieldOperation> =\n  {\n    handle: async (\n      operation: FindCandyMachinesV2ByPublicKeyFieldOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CandyMachineV2[]> => {\n      const { commitment } = scope;\n      const { type, publicKey } = operation.input;\n      const accounts = CandyMachineV2Program.accounts(metaplex).mergeConfig({\n        commitment,\n      });\n\n      let candyMachineQuery: CandyMachineV2GpaBuilder;\n      switch (type) {\n        case 'authority':\n          candyMachineQuery =\n            accounts.candyMachineAccountsForAuthority(publicKey);\n          break;\n        case 'wallet':\n          candyMachineQuery = accounts.candyMachineAccountsForWallet(publicKey);\n          break;\n        default:\n          throw new UnreachableCaseError(type);\n      }\n\n      const unparsedAccounts = await candyMachineQuery.get();\n      scope.throwIfCanceled();\n\n      const collectionPdas = unparsedAccounts.map((unparsedAccount) =>\n        findCandyMachineV2CollectionPda(unparsedAccount.publicKey)\n      );\n\n      // Find mint details for all unique SPL tokens used\n      // in candy machines that have non-null `tokenMint`\n\n      const parsedAccounts: Record<string, CandyMachineV2Account> =\n        Object.fromEntries(\n          unparsedAccounts.map((unparsedAccount) => [\n            unparsedAccount.publicKey.toString(),\n            parseCandyMachineV2Account(unparsedAccount),\n          ])\n        );\n\n      const tokenMints = [\n        ...new Set(\n          Object.values(parsedAccounts)\n            .map((account) => account.data.tokenMint?.toString())\n            .filter((tokenMint): tokenMint is string => tokenMint !== undefined)\n        ),\n      ].map((address) => new PublicKey(address));\n\n      const result = await metaplex\n        .rpc()\n        .getMultipleAccounts(tokenMints.concat(collectionPdas), commitment);\n      scope.throwIfCanceled();\n\n      const unparsedMintAccounts = result.slice(0, tokenMints.length);\n      const unparsedCollectionAccounts = result.slice(-collectionPdas.length);\n\n      const mints: Record<string, Mint> = Object.fromEntries(\n        unparsedMintAccounts.map((account) => [\n          account.publicKey.toString(),\n          toMint(toMintAccount(account)),\n        ])\n      );\n\n      return zipMap(\n        unparsedAccounts,\n        unparsedCollectionAccounts,\n        (unparsedAccount, unparsedCollectionAccount) => {\n          const parsedAccount =\n            parsedAccounts[unparsedAccount.publicKey.toString()];\n          const collectionAccount = unparsedCollectionAccount\n            ? parseCandyMachineV2CollectionAccount(unparsedCollectionAccount)\n            : null;\n          const tokenMintAddress = parsedAccount.data.tokenMint?.toString();\n\n          return toCandyMachineV2(\n            parsedAccount,\n            unparsedAccount,\n            collectionAccount,\n            tokenMintAddress ? mints[tokenMintAddress] : null\n          );\n        }\n      );\n    },\n  };\n"],"names":["Key","findCandyMachinesV2ByPublicKeyFieldOperation","useOperation","findCandyMachinesV2ByPublicKeyFieldOperationHandler","handle","operation","metaplex","scope","commitment","type","publicKey","input","accounts","CandyMachineV2Program","mergeConfig","candyMachineQuery","candyMachineAccountsForAuthority","candyMachineAccountsForWallet","UnreachableCaseError","unparsedAccounts","get","throwIfCanceled","collectionPdas","map","unparsedAccount","findCandyMachineV2CollectionPda","parsedAccounts","Object","fromEntries","toString","parseCandyMachineV2Account","tokenMints","Set","values","account","data","tokenMint","filter","undefined","address","PublicKey","result","rpc","getMultipleAccounts","concat","unparsedMintAccounts","slice","length","unparsedCollectionAccounts","mints","toMint","toMintAccount","zipMap","unparsedCollectionAccount","parsedAccount","collectionAccount","parseCandyMachineV2CollectionAccount","tokenMintAddress","toCandyMachineV2"],"mappings":"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"}