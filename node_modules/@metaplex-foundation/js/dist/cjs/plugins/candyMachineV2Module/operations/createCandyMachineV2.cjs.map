{"version":3,"file":"createCandyMachineV2.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/createCandyMachineV2.ts"],"sourcesContent":["import {\n  createInitializeCandyMachineInstruction,\n  createSetCollectionInstruction,\n  Creator,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { getCandyMachineV2AccountSizeFromData } from '../helpers';\nimport {\n  CandyMachineV2,\n  CandyMachineV2Configs,\n  toCandyMachineV2InstructionData,\n} from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { CandyMachineV2Program } from '../program';\nimport {\n  Option,\n  RequiredKeys,\n  TransactionBuilder,\n  TransactionBuilderOptions,\n} from '@/utils';\nimport {\n  assertSameCurrencies,\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SOL,\n  toBigNumber,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineV2Operation' as const;\n\n/**\n * Creates a brand new Candy Machine.\n *\n * ```ts\n * const { candyMachine } = await metaplex\n *   .candyMachinesV2()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createCandyMachineV2Operation =\n  useOperation<CreateCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateCandyMachineV2Operation = Operation<\n  typeof Key,\n  CreateCandyMachineV2Input,\n  CreateCandyMachineV2Output\n>;\n\nexport type CreateCandyMachineV2InputWithoutConfigs = {\n  /**\n   * The Candy Machine to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  candyMachine?: Signer;\n\n  /**\n   * The authority that will be allowed to update the Candy Machine.\n   * Upon creation, passing the authority's public key is enough to set it.\n   * However, when also passing a `collection` to this operation,\n   * this authority will need to be passed as a Signer so the relevant\n   * instruction can be signed.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer | PublicKey; // Defaults to mx.identity().\n\n  /**\n   * The mint address of the Collection NFT that all NFTs minted from\n   * this Candy Machine should be part of.\n   * When provided, the `authority` parameter will need to be passed as a `Signer`.\n   * When `null`, minted NFTs won't be part of a collection.\n   *\n   * @defaultValue `null`\n   */\n  collection?: Option<PublicKey>;\n};\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateCandyMachineV2Input =\n  CreateCandyMachineV2InputWithoutConfigs &\n    RequiredKeys<\n      Partial<CandyMachineV2Configs>,\n      'price' | 'sellerFeeBasisPoints' | 'itemsAvailable'\n    >;\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The created Candy Machine. */\n  candyMachine: CandyMachineV2;\n\n  /** The create Candy Machine's account as a Signer. */\n  candyMachineSigner: Signer;\n\n  /** The created Candy Machine's wallet. */\n  wallet: PublicKey;\n\n  /** The created Candy Machine's authority. */\n  authority: PublicKey;\n\n  /** The created Candy Machine's creators. */\n  creators: Creator[];\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createCandyMachineV2OperationHandler: OperationHandler<CreateCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: CreateCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateCandyMachineV2Output> {\n      const builder = await createCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const candyMachine = await metaplex\n        .candyMachinesV2()\n        .findByAddress({ address: output.candyMachineSigner.publicKey }, scope);\n\n      return { ...output, candyMachine };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateCandyMachineV2BuilderParams = Omit<\n  CreateCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the Candy Machine. */\n  initializeCandyMachineInstructionKey?: string;\n\n  /** A key to distinguish the instruction that sets the collection. */\n  setCollectionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateCandyMachineV2BuilderContext = Omit<\n  CreateCandyMachineV2Output,\n  'response' | 'candyMachine'\n>;\n\n/**\n * Creates a brand new Candy Machine.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .create({\n *     sellerFeeBasisPoints: 500, // 5% royalties\n *     price: sol(1.3), // 1.3 SOL\n *     itemsAvailable: toBigNumber(1000), // 1000 items available\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createCandyMachineV2Builder = async (\n  metaplex: Metaplex,\n  params: CreateCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateCandyMachineV2BuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const candyMachine = params.candyMachine ?? Keypair.generate();\n  const authority = params.authority ?? metaplex.identity();\n  const collection: PublicKey | null = params.collection ?? null;\n\n  const { data, wallet, tokenMint } = toCandyMachineV2InstructionData(\n    candyMachine.publicKey,\n    {\n      ...params,\n      wallet: params.wallet ?? metaplex.identity().publicKey,\n      tokenMint: params.tokenMint ?? null,\n      symbol: params.symbol ?? '',\n      maxEditionSupply: params.maxEditionSupply ?? toBigNumber(0),\n      isMutable: params.isMutable ?? true,\n      retainAuthority: params.retainAuthority ?? true,\n      goLiveDate: params.goLiveDate ?? null,\n      endSettings: params.endSettings ?? null,\n      creators: params.creators ?? [\n        {\n          address: metaplex.identity().publicKey,\n          share: 100,\n          verified: false,\n        },\n      ],\n      hiddenSettings: params.hiddenSettings ?? null,\n      whitelistMintSettings: params.whitelistMintSettings ?? null,\n      gatekeeper: params.gatekeeper ?? null,\n    }\n  );\n\n  const initializeInstruction = createInitializeCandyMachineInstruction(\n    {\n      candyMachine: candyMachine.publicKey,\n      wallet,\n      authority: toPublicKey(authority),\n      payer: payer.publicKey,\n    },\n    { data }\n  );\n\n  if (tokenMint) {\n    initializeInstruction.keys.push({\n      pubkey: tokenMint,\n      isWritable: false,\n      isSigner: false,\n    });\n  } else {\n    assertSameCurrencies(params.price, SOL);\n  }\n\n  return (\n    TransactionBuilder.make<CreateCandyMachineV2BuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        candyMachineSigner: candyMachine,\n        wallet,\n        authority: toPublicKey(authority),\n        creators: data.creators,\n      })\n\n      // Create an empty account for the candy machine.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount(\n            {\n              newAccount: candyMachine,\n              space: getCandyMachineV2AccountSizeFromData(data),\n              program: CandyMachineV2Program.publicKey,\n              instructionKey:\n                params.createAccountInstructionKey ?? 'createAccount',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Initialize the candy machine account.\n      .add({\n        instruction: initializeInstruction,\n        signers: [candyMachine, payer],\n        key:\n          params.initializeCandyMachineInstructionKey ??\n          'initializeCandyMachine',\n      })\n\n      // Set the collection.\n      .when(!!collection, (builder) => {\n        if (!isSigner(authority)) {\n          throw new ExpectedSignerError('authority', 'PublicKey', {\n            problemSuffix:\n              'You are trying to create a Candy Machine with a Collection NFT. ' +\n              'In order for the Collection NFT to be set successfully, you must provide the authority as a Signer.',\n            solution:\n              'Please provide the \"authority\" parameter as a Signer if you want to set the Collection NFT upon creation. ' +\n              'Alternatively, you may remove the \"collection\" parameter to create a Candy Machine without an associated Collection NFT.',\n          });\n        }\n\n        const collectionMint = collection as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const edition = metaplex.nfts().pdas().masterEdition({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.publicKey\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.publicKey,\n            authority: toPublicKey(authority),\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram: metaplex.programs().getTokenMetadata()\n              .address,\n          }),\n          signers: [authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n  );\n};\n"],"names":["Key","createCandyMachineV2Operation","useOperation","createCandyMachineV2OperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineV2Builder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","candyMachine","candyMachinesV2","findByAddress","address","candyMachineSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","Keypair","generate","authority","identity","collection","data","wallet","tokenMint","toCandyMachineV2InstructionData","symbol","maxEditionSupply","toBigNumber","isMutable","retainAuthority","goLiveDate","endSettings","creators","share","verified","hiddenSettings","whitelistMintSettings","gatekeeper","initializeInstruction","createInitializeCandyMachineInstruction","toPublicKey","keys","push","pubkey","isWritable","isSigner","assertSameCurrencies","price","SOL","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","getCandyMachineV2AccountSizeFromData","program","CandyMachineV2Program","instructionKey","createAccountInstructionKey","instruction","signers","key","initializeCandyMachineInstructionKey","when","ExpectedSignerError","problemSuffix","solution","collectionMint","metadata","nfts","pdas","mint","edition","masterEdition","collectionPda","findCandyMachineV2CollectionPda","collectionAuthorityRecord","collectionAuthority","createSetCollectionInstruction","tokenMetadataProgram","getTokenMetadata","setCollectionInstructionKey"],"mappings":"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"}