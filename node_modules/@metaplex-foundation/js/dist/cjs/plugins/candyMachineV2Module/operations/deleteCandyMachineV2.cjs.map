{"version":3,"file":"deleteCandyMachineV2.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/deleteCandyMachineV2.ts"],"sourcesContent":["import { createWithdrawFundsInstruction } from '@metaplex-foundation/mpl-candy-machine';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyMachineV2 } from '../models/CandyMachineV2';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyMachineV2Operation' as const;\n\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * await metaplex.candyMachinesV2().delete({ candyMachine });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyMachineV2Operation =\n  useOperation<DeleteCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyMachineV2Operation = Operation<\n  typeof Key,\n  DeleteCandyMachineV2Input,\n  DeleteCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyMachineV2Input = {\n  /**\n   * The Candy Machine to delete.\n   * We need the address of the Candy Machine as well as the address\n   * of the potential collection since we will need to delete the PDA account\n   * that links the Candy Machine to the collection.\n   *\n   * If the Candy Machine does not have a collection, simply set\n   * `collectionMintAddress` to `null`.\n   */\n  candyMachine: Pick<CandyMachineV2, 'address' | 'collectionMintAddress'>;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyMachineV2OperationHandler: OperationHandler<DeleteCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: DeleteCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyMachineV2Output> {\n      return deleteCandyMachineV2Builder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyMachineV2BuilderParams = Omit<\n  DeleteCandyMachineV2Input,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Machine. */\n  instructionKey?: string;\n};\n\n/**\n * Deletes an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .delete({\n *     candyMachine: { address, collectionMintAddress },\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: DeleteCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const authority = params.authority ?? metaplex.identity();\n  const { candyMachine } = params;\n\n  const deleteInstruction = createWithdrawFundsInstruction({\n    candyMachine: candyMachine.address,\n    authority: authority.publicKey,\n  });\n\n  if (candyMachine.collectionMintAddress) {\n    const collectionPda = findCandyMachineV2CollectionPda(candyMachine.address);\n    deleteInstruction.keys.push({\n      pubkey: collectionPda,\n      isWritable: true,\n      isSigner: false,\n    });\n  }\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: deleteInstruction,\n      signers: [authority],\n      key: params.instructionKey ?? 'withdrawFunds',\n    });\n};\n"],"names":["Key","deleteCandyMachineV2Operation","useOperation","deleteCandyMachineV2OperationHandler","handle","operation","metaplex","scope","deleteCandyMachineV2Builder","input","sendAndConfirm","confirmOptions","params","options","payer","rpc","getDefaultFeePayer","authority","identity","candyMachine","deleteInstruction","createWithdrawFundsInstruction","address","publicKey","collectionMintAddress","collectionPda","findCandyMachineV2CollectionPda","keys","push","pubkey","isWritable","isSigner","TransactionBuilder","make","setFeePayer","add","instruction","signers","key","instructionKey"],"mappings":";;;;;;;;;AAcA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,+BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,6BAA6B,GACxCC,sBAAY,CAAgCF,GAAhC,EADP;AAGP;AACA;AACA;AACA;;AAwCA;AACA;AACA;AACA;AACO,MAAMG,oCAAqF,GAChG;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIuC;AACrC,IAAA,OAAOC,2BAA2B,CAChCF,QADgC,EAEhCD,SAAS,CAACI,KAFsB,EAGhCF,KAHgC,CAA3B,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,2BAA2B,GAAG,CACzCF,QADyC,EAEzCM,MAFyC,EAGzCC,OAAkC,GAAG,EAHI,KAIlB;EACvB,MAAM;AAAEC,IAAAA,KAAK,GAAGR,QAAQ,CAACS,GAAT,GAAeC,kBAAf,EAAA;AAAV,GAAA,GAAkDH,OAAxD,CAAA;EACA,MAAMI,SAAS,GAAGL,MAAM,CAACK,SAAP,IAAoBX,QAAQ,CAACY,QAAT,EAAtC,CAAA;EACA,MAAM;AAAEC,IAAAA,YAAAA;AAAF,GAAA,GAAmBP,MAAzB,CAAA;EAEA,MAAMQ,iBAAiB,GAAGC,8CAA8B,CAAC;IACvDF,YAAY,EAAEA,YAAY,CAACG,OAD4B;IAEvDL,SAAS,EAAEA,SAAS,CAACM,SAAAA;AAFkC,GAAD,CAAxD,CAAA;;EAKA,IAAIJ,YAAY,CAACK,qBAAjB,EAAwC;AACtC,IAAA,MAAMC,aAAa,GAAGC,oCAA+B,CAACP,YAAY,CAACG,OAAd,CAArD,CAAA;AACAF,IAAAA,iBAAiB,CAACO,IAAlB,CAAuBC,IAAvB,CAA4B;AAC1BC,MAAAA,MAAM,EAAEJ,aADkB;AAE1BK,MAAAA,UAAU,EAAE,IAFc;AAG1BC,MAAAA,QAAQ,EAAE,KAAA;KAHZ,CAAA,CAAA;AAKD,GAAA;;EAED,OAAOC,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQpB,KADR,CAEJqB,CAAAA,GAFI,CAEA;AACHC,IAAAA,WAAW,EAAEhB,iBADV;IAEHiB,OAAO,EAAE,CAACpB,SAAD,CAFN;AAGHqB,IAAAA,GAAG,EAAE1B,MAAM,CAAC2B,cAAP,IAAyB,eAAA;AAH3B,GAFA,CAAP,CAAA;AAOD;;;;;;"}