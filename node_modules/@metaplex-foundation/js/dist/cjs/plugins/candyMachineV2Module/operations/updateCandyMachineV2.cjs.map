{"version":3,"file":"updateCandyMachineV2.cjs","sources":["../../../../../src/plugins/candyMachineV2Module/operations/updateCandyMachineV2.ts"],"sourcesContent":["import {\n  CandyMachineData,\n  createRemoveCollectionInstruction,\n  createSetCollectionInstruction,\n  createUpdateAuthorityInstruction,\n  createUpdateCandyMachineInstruction,\n} from '@metaplex-foundation/mpl-candy-machine';\nimport type { PublicKey } from '@solana/web3.js';\nimport isEqual from 'lodash.isequal';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  CandyMachineV2,\n  CandyMachineV2Configs,\n  toCandyMachineV2Configs,\n  toCandyMachineV2InstructionData,\n} from '../models';\nimport { findCandyMachineV2CollectionPda } from '../pdas';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { NoInstructionsToSendError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyMachineV2Operation' as const;\n\n/**\n * Updates an existing Candy Machine.\n *\n * ```ts\n * await metaplex\n *   .candyMachinesV2()\n *   .update({\n *     candyMachine,\n *     price: sol(2), // Updates the price only.\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyMachineV2Operation =\n  useOperation<UpdateCandyMachineV2Operation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyMachineV2Operation = Operation<\n  typeof Key,\n  UpdateCandyMachineV2Input,\n  UpdateCandyMachineV2Output\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyMachineV2Input = Partial<CandyMachineV2Configs> & {\n  /**\n   * The Candy Machine to update.\n   * We need the full model in order to compare the current data with\n   * the provided data to update. For instance, if you only want to\n   * update the `price`, we need to send an instruction that updates\n   * the data whilst keeping all other properties the same.\n   *\n   * If you want more control over how this transaction is built,\n   * you may use the associated transaction builder instead using\n   * `metaplex.candyMachinesV2().builders().updateCandyMachineV2({...})`.\n   */\n  candyMachine: CandyMachineV2;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The new Candy Machine authority.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The mint address of the new Candy Machine collection.\n   * When `null` is provided, the collection is removed.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCollection?: Option<PublicKey>;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyMachineV2Output = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyMachineV2OperationHandler: OperationHandler<UpdateCandyMachineV2Operation> =\n  {\n    async handle(\n      operation: UpdateCandyMachineV2Operation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyMachineV2Output> {\n      const {\n        candyMachine,\n        authority = metaplex.identity(),\n        newAuthority,\n        newCollection,\n        ...updatableFields\n      } = operation.input;\n\n      const currentConfigs = toCandyMachineV2Configs(candyMachine);\n      const instructionDataWithoutChanges = toCandyMachineV2InstructionData(\n        candyMachine.address,\n        currentConfigs\n      );\n      const instructionData = toCandyMachineV2InstructionData(\n        candyMachine.address,\n        {\n          ...currentConfigs,\n          ...updatableFields,\n        }\n      );\n      const { data, wallet, tokenMint } = instructionData;\n      const shouldUpdateData = !isEqual(\n        instructionData,\n        instructionDataWithoutChanges\n      );\n\n      const builder = updateCandyMachineV2Builder(\n        metaplex,\n        {\n          candyMachine,\n          authority,\n          newData: shouldUpdateData\n            ? { ...data, wallet, tokenMint }\n            : undefined,\n          newCollection,\n          newAuthority,\n        },\n        scope\n      );\n\n      if (builder.isEmpty()) {\n        throw new NoInstructionsToSendError(Key);\n      }\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyMachineV2BuilderParams = {\n  /**\n   * The Candy Machine to update.\n   * We only need a subset of the `CandyMachine` model to figure out\n   * the current values for the wallet and collection addresses.\n   */\n  candyMachine: Pick<\n    CandyMachineV2,\n    'address' | 'walletAddress' | 'collectionMintAddress'\n  >;\n\n  /**\n   * The Signer authorized to update the candy machine.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * The new Candy Machine data.\n   * This includes the wallet and token mint addresses\n   * which can both be updated.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newData?: CandyMachineData & {\n    wallet: PublicKey;\n    tokenMint: Option<PublicKey>;\n  };\n\n  /**\n   * The new Candy Machine authority.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newAuthority?: PublicKey;\n\n  /**\n   * The mint address of the new Candy Machine collection.\n   * When `null` is provided, the collection is removed.\n   *\n   * @defaultValue Defaults to not being updated.\n   */\n  newCollection?: Option<PublicKey>;\n\n  /** A key to distinguish the instruction that updates the data. */\n  updateInstructionKey?: string;\n\n  /** A key to distinguish the instruction that updates the authority. */\n  updateAuthorityInstructionKey?: string;\n\n  /** A key to distinguish the instruction that sets the collection. */\n  setCollectionInstructionKey?: string;\n\n  /** A key to distinguish the instruction that removes the collection. */\n  removeCollectionInstructionKey?: string;\n};\n\n/**\n * Updates an existing Candy Machine.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .candyMachinesV2()\n *   .builders()\n *   .update({\n *     candyMachine: { address, walletAddress, collectionMintAddress },\n *     newData: {...}, // Updates the provided data.\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyMachineV2Builder = (\n  metaplex: Metaplex,\n  params: UpdateCandyMachineV2BuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine,\n    authority = metaplex.identity(),\n    newData,\n    newAuthority,\n    newCollection,\n  } = params;\n  const tokenMetadataProgram = metaplex\n    .programs()\n    .getTokenMetadata(programs).address;\n  const shouldUpdateAuthority =\n    !!newAuthority && !newAuthority.equals(authority.publicKey);\n  const sameCollection =\n    newCollection &&\n    candyMachine.collectionMintAddress &&\n    candyMachine.collectionMintAddress.equals(newCollection);\n  const shouldUpdateCollection = !!newCollection && !sameCollection;\n  const shouldRemoveCollection =\n    !shouldUpdateCollection &&\n    newCollection === null &&\n    candyMachine.collectionMintAddress !== null;\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update data.\n      .when(!!newData, (builder) => {\n        const data = newData as CandyMachineData;\n        const wallet = newData?.wallet as PublicKey;\n        const tokenMint = newData?.tokenMint as Option<PublicKey>;\n        const updateInstruction = createUpdateCandyMachineInstruction(\n          {\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            wallet,\n          },\n          { data }\n        );\n\n        if (tokenMint) {\n          updateInstruction.keys.push({\n            pubkey: tokenMint,\n            isWritable: false,\n            isSigner: false,\n          });\n        }\n\n        return builder.add({\n          instruction: updateInstruction,\n          signers: [authority],\n          key: params.updateInstructionKey ?? 'update',\n        });\n      })\n\n      // Set or update collection.\n      .when(shouldUpdateCollection, (builder) => {\n        const collectionMint = newCollection as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const edition = metaplex.nfts().pdas().masterEdition({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createSetCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            payer: payer.publicKey,\n            metadata,\n            mint: collectionMint,\n            edition,\n            collectionAuthorityRecord,\n            tokenMetadataProgram,\n          }),\n          signers: [payer, authority],\n          key: params.setCollectionInstructionKey ?? 'setCollection',\n        });\n      })\n\n      // Remove collection.\n      .when(shouldRemoveCollection, (builder) => {\n        const collectionMint = candyMachine.collectionMintAddress as PublicKey;\n        const metadata = metaplex.nfts().pdas().metadata({\n          mint: collectionMint,\n          programs,\n        });\n        const collectionPda = findCandyMachineV2CollectionPda(\n          candyMachine.address\n        );\n        const collectionAuthorityRecord = metaplex\n          .nfts()\n          .pdas()\n          .collectionAuthorityRecord({\n            mint: collectionMint,\n            collectionAuthority: collectionPda,\n            programs,\n          });\n\n        return builder.add({\n          instruction: createRemoveCollectionInstruction({\n            candyMachine: candyMachine.address,\n            authority: authority.publicKey,\n            collectionPda,\n            metadata,\n            mint: collectionMint,\n            collectionAuthorityRecord,\n            tokenMetadataProgram,\n          }),\n          signers: [authority],\n          key: params.removeCollectionInstructionKey ?? 'removeCollection',\n        });\n      })\n\n      // Update authority.\n      .when(shouldUpdateAuthority, (builder) =>\n        builder.add({\n          instruction: createUpdateAuthorityInstruction(\n            {\n              candyMachine: candyMachine.address,\n              authority: authority.publicKey,\n              wallet: newData?.wallet ?? candyMachine.walletAddress,\n            },\n            { newAuthority: newAuthority as PublicKey }\n          ),\n          signers: [authority],\n          key: params.updateAuthorityInstructionKey ?? 'updateAuthority',\n        })\n      )\n  );\n};\n"],"names":["Key","updateCandyMachineV2Operation","useOperation","updateCandyMachineV2OperationHandler","handle","operation","metaplex","scope","candyMachine","authority","identity","newAuthority","newCollection","updatableFields","input","currentConfigs","toCandyMachineV2Configs","instructionDataWithoutChanges","toCandyMachineV2InstructionData","address","instructionData","data","wallet","tokenMint","shouldUpdateData","isEqual","builder","updateCandyMachineV2Builder","newData","undefined","isEmpty","NoInstructionsToSendError","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","tokenMetadataProgram","getTokenMetadata","shouldUpdateAuthority","equals","publicKey","sameCollection","collectionMintAddress","shouldUpdateCollection","shouldRemoveCollection","TransactionBuilder","make","setFeePayer","when","updateInstruction","createUpdateCandyMachineInstruction","keys","push","pubkey","isWritable","isSigner","add","instruction","signers","key","updateInstructionKey","collectionMint","metadata","nfts","pdas","mint","edition","masterEdition","collectionPda","findCandyMachineV2CollectionPda","collectionAuthorityRecord","collectionAuthority","createSetCollectionInstruction","setCollectionInstructionKey","createRemoveCollectionInstruction","removeCollectionInstructionKey","createUpdateAuthorityInstruction","walletAddress","updateAuthorityInstructionKey"],"mappings":"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"}