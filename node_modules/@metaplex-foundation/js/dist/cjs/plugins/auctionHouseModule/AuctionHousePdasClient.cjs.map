{"version":3,"file":"AuctionHousePdasClient.cjs","sources":["../../../../src/plugins/auctionHouseModule/AuctionHousePdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { BigNumber, Pda, Program, PublicKey } from '@/types';\nimport { Option } from '@/utils';\n\n/**\n * This client allows you to build PDAs related to the Auction House module.\n *\n * @see {@link AuctionHouseClient}\n * @group Module Pdas\n */\nexport class AuctionHousePdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Auction House PDA for a creator and treasury tuple. */\n  auctionHouse(input: {\n    /** The address of the Auction House's creator. */\n    creator: PublicKey;\n    /** The mint address of the Auction House's treasury. */\n    treasuryMint: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.creator.toBuffer(),\n      input.treasuryMint.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Auctioneer PDA of an Auction House. */\n  auctioneer(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the Auctioneer authority. */\n    auctioneerAuthority: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auctioneer', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.auctioneerAuthority.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the PDA of the Auction House Program\n   * itself used to sign transaction.\n   */\n  programAsSigner(input?: {\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input?.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      Buffer.from('signer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's fee account. */\n  fee(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('fee_payer', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of an Auction House's treasury account. */\n  treasury(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      Buffer.from('treasury', 'utf8'),\n    ]);\n  }\n\n  /** Finds the PDA of a buyer's escrow account. */\n  buyerEscrow(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer. */\n    buyer: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.auctionHouse.toBuffer(),\n      input.buyer.toBuffer(),\n    ]);\n  }\n\n  /** Finds the trade state PDA of a bid or listing. */\n  tradeState(input: {\n    /** The Auction House address. */\n    auctionHouse: PublicKey;\n    /** The address of the buyer or seller. */\n    wallet: PublicKey;\n    /** The mint address of the Auction House's treasury at the time of trade. */\n    treasuryMint: PublicKey;\n    /** The mint address of the token to trade. */\n    tokenMint: PublicKey;\n    /** The price of the trade in basis points. */\n    price: BigNumber;\n    /** The number of tokens to trade in basis points. */\n    tokenSize: BigNumber;\n    /** The token account from which to trade, unless it is a public bid. */\n    tokenAccount?: Option<PublicKey>;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('auction_house', 'utf8'),\n      input.wallet.toBuffer(),\n      input.auctionHouse.toBuffer(),\n      ...(input.tokenAccount ? [input.tokenAccount.toBuffer()] : []),\n      input.treasuryMint.toBuffer(),\n      input.tokenMint.toBuffer(),\n      input.price.toArrayLike(Buffer, 'le', 8),\n      input.tokenSize.toArrayLike(Buffer, 'le', 8),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Listing trade state. */\n  listingReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('listing_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Bid trade state. */\n  bidReceipt(input: {\n    /** The trade state PDA of the Bid. */\n    tradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('bid_receipt', 'utf8'),\n      input.tradeState.toBuffer(),\n    ]);\n  }\n\n  /** Finds the receipt PDA of a Purchase. */\n  purchaseReceipt(input: {\n    /** The trade state PDA of the Listing. */\n    listingTradeState: PublicKey;\n    /** The trade state PDA of the Bid. */\n    bidTradeState: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const programId = this.programId(input.programs);\n    return Pda.find(programId, [\n      Buffer.from('purchase_receipt', 'utf8'),\n      input.listingTradeState.toBuffer(),\n      input.bidTradeState.toBuffer(),\n    ]);\n  }\n\n  private programId(programs?: Program[]) {\n    return this.metaplex.programs().getAuctionHouse(programs).address;\n  }\n}\n"],"names":["AuctionHousePdasClient","constructor","metaplex","auctionHouse","input","programId","programs","Pda","find","Buffer","from","creator","toBuffer","treasuryMint","auctioneer","auctioneerAuthority","programAsSigner","fee","treasury","buyerEscrow","buyer","tradeState","wallet","tokenAccount","tokenMint","price","toArrayLike","tokenSize","listingReceipt","bidReceipt","purchaseReceipt","listingTradeState","bidTradeState","getAuctionHouse","address"],"mappings":";;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,sBAAN,CAA6B;EAClCC,WAAW,CAAoBC,QAApB,EAAwC;IAAA,IAApBA,CAAAA,QAAoB,GAApBA,QAAoB,CAAA;AAAE,GAAA;AAErD;;;EACAC,YAAY,CAACC,KAAD,EAOJ;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBN,KAAK,CAACO,OAAN,CAAcC,QAAd,EAFyB,EAGzBR,KAAK,CAACS,YAAN,CAAmBD,QAAnB,EAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;AAED;;;EACAE,UAAU,CAACV,KAAD,EAOF;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,YAAZ,EAA0B,MAA1B,CADyB,EAEzBN,KAAK,CAACD,YAAN,CAAmBS,QAAnB,EAFyB,EAGzBR,KAAK,CAACW,mBAAN,CAA0BH,QAA1B,EAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;AAED;AACF;AACA;AACA;;;EACEI,eAAe,CAACZ,KAAD,EAGP;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,EAAEE,QAAtB,CAAlB,CAAA;IACA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBD,aAAM,CAACC,IAAP,CAAY,QAAZ,EAAsB,MAAtB,CAFyB,CAApB,CAAP,CAAA;AAID,GAAA;AAED;;;EACAO,GAAG,CAACb,KAAD,EAKK;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBN,KAAK,CAACD,YAAN,CAAmBS,QAAnB,EAFyB,EAGzBH,aAAM,CAACC,IAAP,CAAY,WAAZ,EAAyB,MAAzB,CAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;AAED;;;EACAQ,QAAQ,CAACd,KAAD,EAKA;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBN,KAAK,CAACD,YAAN,CAAmBS,QAAnB,EAFyB,EAGzBH,aAAM,CAACC,IAAP,CAAY,UAAZ,EAAwB,MAAxB,CAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;AAED;;;EACAS,WAAW,CAACf,KAAD,EAOH;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBN,KAAK,CAACD,YAAN,CAAmBS,QAAnB,EAFyB,EAGzBR,KAAK,CAACgB,KAAN,CAAYR,QAAZ,EAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;AAED;;;EACAS,UAAU,CAACjB,KAAD,EAiBF;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,eAAZ,EAA6B,MAA7B,CADyB,EAEzBN,KAAK,CAACkB,MAAN,CAAaV,QAAb,EAFyB,EAGzBR,KAAK,CAACD,YAAN,CAAmBS,QAAnB,EAHyB,EAIzB,IAAIR,KAAK,CAACmB,YAAN,GAAqB,CAACnB,KAAK,CAACmB,YAAN,CAAmBX,QAAnB,EAAD,CAArB,GAAuD,EAA3D,CAJyB,EAKzBR,KAAK,CAACS,YAAN,CAAmBD,QAAnB,EALyB,EAMzBR,KAAK,CAACoB,SAAN,CAAgBZ,QAAhB,EANyB,EAOzBR,KAAK,CAACqB,KAAN,CAAYC,WAAZ,CAAwBjB,aAAxB,EAAgC,IAAhC,EAAsC,CAAtC,CAPyB,EAQzBL,KAAK,CAACuB,SAAN,CAAgBD,WAAhB,CAA4BjB,aAA5B,EAAoC,IAApC,EAA0C,CAA1C,CARyB,CAApB,CAAP,CAAA;AAUD,GAAA;AAED;;;EACAmB,cAAc,CAACxB,KAAD,EAKN;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;IACA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,iBAAZ,EAA+B,MAA/B,CADyB,EAEzBN,KAAK,CAACiB,UAAN,CAAiBT,QAAjB,EAFyB,CAApB,CAAP,CAAA;AAID,GAAA;AAED;;;EACAiB,UAAU,CAACzB,KAAD,EAKF;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;IACA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,aAAZ,EAA2B,MAA3B,CADyB,EAEzBN,KAAK,CAACiB,UAAN,CAAiBT,QAAjB,EAFyB,CAApB,CAAP,CAAA;AAID,GAAA;AAED;;;EACAkB,eAAe,CAAC1B,KAAD,EAOP;IACN,MAAMC,SAAS,GAAG,IAAKA,CAAAA,SAAL,CAAeD,KAAK,CAACE,QAArB,CAAlB,CAAA;AACA,IAAA,OAAOC,OAAG,CAACC,IAAJ,CAASH,SAAT,EAAoB,CACzBI,aAAM,CAACC,IAAP,CAAY,kBAAZ,EAAgC,MAAhC,CADyB,EAEzBN,KAAK,CAAC2B,iBAAN,CAAwBnB,QAAxB,EAFyB,EAGzBR,KAAK,CAAC4B,aAAN,CAAoBpB,QAApB,EAHyB,CAApB,CAAP,CAAA;AAKD,GAAA;;EAEOP,SAAS,CAACC,QAAD,EAAuB;IACtC,OAAO,IAAA,CAAKJ,QAAL,CAAcI,QAAd,GAAyB2B,eAAzB,CAAyC3B,QAAzC,CAAA,CAAmD4B,OAA1D,CAAA;AACD,GAAA;;AAlLiC;;;;"}