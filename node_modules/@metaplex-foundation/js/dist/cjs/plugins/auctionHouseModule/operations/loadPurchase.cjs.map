{"version":3,"file":"loadPurchase.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/loadPurchase.ts"],"sourcesContent":["import { assertNftOrSftWithToken } from '../../nftModule';\nimport { LazyPurchase, Purchase } from '../models/Purchase';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  amount,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'LoadPurchaseOperation' as const;\n\n/**\n * Transforms a `LazyPurchase` model into a `Purchase` model.\n *\n * ```ts\n * const purchase = await metaplex\n *   .auctionHouse()\n *   .loadPurchase({ lazyPurchase };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const loadPurchaseOperation = useOperation<LoadPurchaseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type LoadPurchaseOperation = Operation<\n  typeof Key,\n  LoadPurchaseInput,\n  Purchase\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type LoadPurchaseInput = {\n  /** The `LazyPurchase` model to transform into the `Purchase`.  */\n  lazyPurchase: LazyPurchase;\n\n  /**\n   * Whether or not we should fetch the JSON Metadata for the NFT or SFT.\n   *\n   * @defaultValue `true`\n   */\n  loadJsonMetadata?: boolean;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const loadPurchaseOperationHandler: OperationHandler<LoadPurchaseOperation> =\n  {\n    handle: async (\n      operation: LoadPurchaseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const { lazyPurchase, loadJsonMetadata = true } = operation.input;\n      const asset = await metaplex.nfts().findByMetadata(\n        {\n          metadata: lazyPurchase.metadataAddress,\n          tokenOwner: lazyPurchase.buyerAddress,\n          loadJsonMetadata,\n        },\n        scope\n      );\n      assertNftOrSftWithToken(asset);\n\n      return {\n        ...lazyPurchase,\n        lazy: false,\n        isPublic: false,\n        asset,\n        tokens: amount(lazyPurchase.tokens, asset.mint.currency),\n      };\n    },\n  };\n"],"names":["Key","loadPurchaseOperation","useOperation","loadPurchaseOperationHandler","handle","operation","metaplex","scope","lazyPurchase","loadJsonMetadata","input","asset","nfts","findByMetadata","metadata","metadataAddress","tokenOwner","buyerAddress","assertNftOrSftWithToken","lazy","isPublic","tokens","amount","mint","currency"],"mappings":";;;;;;;;AAYA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qBAAqB,GAAGC,sBAAY,CAAwBF,GAAxB,EAA1C;AAEP;AACA;AACA;AACA;;AAuBA;AACA;AACA;AACA;AACO,MAAMG,4BAAqE,GAChF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIH;IACH,MAAM;MAAEC,YAAF;AAAgBC,MAAAA,gBAAgB,GAAG,IAAA;KAASJ,GAAAA,SAAS,CAACK,KAA5D,CAAA;IACA,MAAMC,KAAK,GAAG,MAAML,QAAQ,CAACM,IAAT,EAAA,CAAgBC,cAAhB,CAClB;MACEC,QAAQ,EAAEN,YAAY,CAACO,eADzB;MAEEC,UAAU,EAAER,YAAY,CAACS,YAF3B;AAGER,MAAAA,gBAAAA;KAJgB,EAMlBF,KANkB,CAApB,CAAA;IAQAW,2BAAuB,CAACP,KAAD,CAAvB,CAAA;IAEA,OAAO,EACL,GAAGH,YADE;AAELW,MAAAA,IAAI,EAAE,KAFD;AAGLC,MAAAA,QAAQ,EAAE,KAHL;MAILT,KAJK;MAKLU,MAAM,EAAEC,aAAM,CAACd,YAAY,CAACa,MAAd,EAAsBV,KAAK,CAACY,IAAN,CAAWC,QAAjC,CAAA;KALhB,CAAA;AAOD,GAAA;AAxBH;;;;;"}