{"version":3,"file":"executeSale.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/executeSale.ts"],"sourcesContent":["import {\n  AuctioneerExecuteSaleInstructionAccounts,\n  createAuctioneerExecuteSaleInstruction,\n  createExecutePartialSaleInstruction,\n  createExecuteSaleInstruction,\n  createPrintPurchaseReceiptInstruction,\n  ExecutePartialSaleInstructionArgs,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey, SYSVAR_INSTRUCTIONS_PUBKEY } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport {\n  AuctioneerAuthorityRequiredError,\n  AuctioneerPartialSaleNotSupportedError,\n  BidAndListingHaveDifferentAuctionHousesError,\n  BidAndListingHaveDifferentMintsError,\n  CanceledBidIsNotAllowedError,\n  CanceledListingIsNotAllowedError,\n  PartialPriceMismatchError,\n} from '../errors';\nimport { AuctionHouse, Bid, LazyPurchase, Listing, Purchase } from '../models';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  amount,\n  isSigner,\n  lamports,\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ExecuteSaleOperation' as const;\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .executeSale({ auctionHouse, bid, listing };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const executeSaleOperation = useOperation<ExecuteSaleOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ExecuteSaleOperation = Operation<\n  typeof Key,\n  ExecuteSaleInput,\n  ExecuteSaleOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ExecuteSaleInput = {\n  /**\n   * The Bid that is used in the sale.\n   * We only need a subset of the `Bid` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, buyer, receipt address etc.\n   */\n  bid: Pick<\n    Bid,\n    | 'asset'\n    | 'auctionHouse'\n    | 'buyerAddress'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'price'\n    | 'receiptAddress'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n  >;\n\n  /** The Auction House in which to execute a sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer; // Use Auctioneer ix when provided\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ExecuteSaleOutput = {\n  /** Seller trade state account address encoding the listing order. */\n  sellerTradeState: PublicKey;\n\n  /** Biyer trade state account address encoding the bid order. */\n  buyerTradeState: PublicKey;\n\n  /** The buyer address. */\n  buyer: PublicKey;\n\n  /** The seller address. */\n  seller: PublicKey;\n\n  /** The asset's metadata address. */\n  metadata: PublicKey;\n\n  /** The address of the bookkeeper account responsible for the receipt. */\n  bookkeeper: Option<PublicKey>;\n\n  /** The PDA of the receipt account in case it was printed. */\n  receipt: Option<Pda>;\n\n  /** The sale price. */\n  price: SolAmount | SplTokenAmount;\n\n  /** The number of tokens bought. */\n  tokens: SplTokenAmount;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * Executes a sale on a given bid and listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .executeSale({ auctionHouse, listing, bid });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleOperationHandler: OperationHandler<ExecuteSaleOperation> =\n  {\n    async handle(\n      operation: ExecuteSaleOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ExecuteSaleOutput> {\n      const { auctionHouse } = operation.input;\n\n      const output = await executeSaleBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n      scope.throwIfCanceled();\n\n      if (output.receipt) {\n        const purchase = await metaplex\n          .auctionHouse()\n          .findPurchaseByReceipt(\n            { auctionHouse, receiptAddress: output.receipt },\n            scope\n          );\n\n        return { purchase, ...output };\n      }\n\n      const lazyPurchase: LazyPurchase = {\n        model: 'purchase',\n        lazy: true,\n        auctionHouse: operation.input.auctionHouse,\n        buyerAddress: output.buyer,\n        sellerAddress: output.seller,\n        metadataAddress: output.metadata,\n        bookkeeperAddress: output.bookkeeper,\n        receiptAddress: output.receipt,\n        price: output.price,\n        tokens: output.tokens.basisPoints,\n        createdAt: now(),\n      };\n\n      return {\n        purchase: await metaplex\n          .auctionHouse()\n          .loadPurchase({ lazyPurchase }, scope),\n        ...output,\n      };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ExecuteSaleBuilderParams = Omit<\n  ExecuteSaleInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type ExecuteSaleBuilderContext = Omit<\n  ExecuteSaleOutput,\n  'response' | 'purchase'\n>;\n\n/**\n * @group Transaction Builders\n * @category Constructors\n */\nexport const executeSaleBuilder = (\n  metaplex: Metaplex,\n  params: ExecuteSaleBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<ExecuteSaleBuilderContext> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { auctionHouse, listing, bid, auctioneerAuthority } = params;\n  const { sellerAddress, asset } = listing;\n  const { buyerAddress } = bid;\n  const {\n    hasAuctioneer,\n    isNative,\n    treasuryMint,\n    address: auctionHouseAddress,\n    authorityAddress,\n    feeAccountAddress,\n    treasuryAccountAddress,\n  } = auctionHouse;\n\n  const isPartialSale = bid.tokens.basisPoints < listing.tokens.basisPoints;\n\n  // Use full size of listing & price when finding trade state PDA for the partial sale.\n  const { tokens, price } = isPartialSale ? listing : bid;\n  const { price: buyerPrice, tokens: buyerTokensSize } = bid;\n\n  if (!listing.auctionHouse.address.equals(bid.auctionHouse.address)) {\n    throw new BidAndListingHaveDifferentAuctionHousesError();\n  }\n  if (!listing.asset.address.equals(bid.asset.address)) {\n    throw new BidAndListingHaveDifferentMintsError();\n  }\n  if (bid.canceledAt) {\n    throw new CanceledBidIsNotAllowedError();\n  }\n  if (listing.canceledAt) {\n    throw new CanceledListingIsNotAllowedError();\n  }\n  if (hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n  if (isPartialSale && hasAuctioneer) {\n    throw new AuctioneerPartialSaleNotSupportedError();\n  }\n  if (isPartialSale) {\n    const listingPricePerToken = price.basisPoints.div(tokens.basisPoints);\n    const buyerPricePerToken = buyerPrice.basisPoints.div(\n      buyerTokensSize.basisPoints\n    );\n\n    if (!listingPricePerToken.eq(buyerPricePerToken)) {\n      throw new PartialPriceMismatchError(\n        auctionHouse.isNative\n          ? lamports(listingPricePerToken)\n          : amount(listingPricePerToken, auctionHouse.treasuryMint.currency),\n        auctionHouse.isNative\n          ? lamports(buyerPricePerToken)\n          : amount(buyerPricePerToken, auctionHouse.treasuryMint.currency)\n      );\n    }\n  }\n\n  // Accounts.\n  const sellerPaymentReceiptAccount = isNative\n    ? sellerAddress\n    : metaplex.tokens().pdas().associatedTokenAccount({\n        mint: treasuryMint.address,\n        owner: sellerAddress,\n        programs,\n      });\n  const buyerReceiptTokenAccount = metaplex\n    .tokens()\n    .pdas()\n    .associatedTokenAccount({\n      mint: asset.address,\n      owner: buyerAddress,\n      programs,\n    });\n  const escrowPayment = metaplex.auctionHouse().pdas().buyerEscrow({\n    auctionHouse: auctionHouseAddress,\n    buyer: buyerAddress,\n    programs,\n  });\n  const freeTradeState = metaplex\n    .auctionHouse()\n    .pdas()\n    .tradeState({\n      auctionHouse: auctionHouseAddress,\n      wallet: sellerAddress,\n      treasuryMint: treasuryMint.address,\n      tokenMint: asset.address,\n      price: lamports(0).basisPoints,\n      tokenSize: tokens.basisPoints,\n      tokenAccount: asset.token.address,\n      programs,\n    });\n  const programAsSigner = metaplex.auctionHouse().pdas().programAsSigner();\n\n  const accounts = {\n    buyer: buyerAddress,\n    seller: sellerAddress,\n    tokenAccount: asset.token.address,\n    tokenMint: asset.address,\n    metadata: asset.metadataAddress,\n    treasuryMint: treasuryMint.address,\n    escrowPaymentAccount: escrowPayment,\n    sellerPaymentReceiptAccount,\n    buyerReceiptTokenAccount,\n    authority: authorityAddress,\n    auctionHouse: auctionHouseAddress,\n    auctionHouseFeeAccount: feeAccountAddress,\n    auctionHouseTreasury: treasuryAccountAddress,\n    buyerTradeState: bid.tradeStateAddress,\n    sellerTradeState: listing.tradeStateAddress,\n    freeTradeState,\n    programAsSigner,\n  };\n\n  // Args.\n  const args = {\n    freeTradeStateBump: freeTradeState.bump,\n    escrowPaymentBump: escrowPayment.bump,\n    programAsSignerBump: programAsSigner.bump,\n    buyerPrice: price.basisPoints,\n    tokenSize: tokens.basisPoints,\n  };\n\n  // Execute Sale Instruction\n  const partialSaleArgs: ExecutePartialSaleInstructionArgs = {\n    ...args,\n    partialOrderSize: bid.tokens.basisPoints,\n    partialOrderPrice: bid.price.basisPoints,\n  };\n\n  let executeSaleInstruction = isPartialSale\n    ? createExecutePartialSaleInstruction(accounts, partialSaleArgs)\n    : createExecuteSaleInstruction(accounts, args);\n\n  if (auctioneerAuthority) {\n    const auctioneerAccounts: AuctioneerExecuteSaleInstructionAccounts = {\n      ...accounts,\n      auctioneerAuthority: auctioneerAuthority.publicKey,\n      ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n        auctionHouse: auctionHouse.address,\n        auctioneerAuthority: auctioneerAuthority.publicKey,\n        programs,\n      }),\n    };\n\n    executeSaleInstruction = createAuctioneerExecuteSaleInstruction(\n      auctioneerAccounts,\n      args\n    );\n  }\n\n  // Provide additional keys to pay royalties.\n  asset.creators.forEach(({ address }) => {\n    executeSaleInstruction.keys.push({\n      pubkey: address,\n      isWritable: true,\n      isSigner: false,\n    });\n\n    // Provide ATA to receive SPL token royalty if is not native SOL sale.\n    if (!isNative) {\n      executeSaleInstruction.keys.push({\n        pubkey: metaplex.tokens().pdas().associatedTokenAccount({\n          mint: treasuryMint.address,\n          owner: address,\n          programs,\n        }),\n        isWritable: true,\n        isSigner: false,\n      });\n    }\n  });\n\n  // Signers.\n  const executeSaleSigners = [auctioneerAuthority].filter(isSigner);\n\n  // Receipt.\n  const shouldPrintReceipt =\n    (params.printReceipt ?? true) &&\n    Boolean(listing.receiptAddress && bid.receiptAddress && !isPartialSale);\n  const bookkeeper = params.bookkeeper ?? metaplex.identity();\n  const purchaseReceipt = metaplex.auctionHouse().pdas().purchaseReceipt({\n    listingTradeState: listing.tradeStateAddress,\n    bidTradeState: bid.tradeStateAddress,\n    programs,\n  });\n\n  return (\n    TransactionBuilder.make<ExecuteSaleBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        sellerTradeState: listing.tradeStateAddress,\n        buyerTradeState: bid.tradeStateAddress,\n        buyer: buyerAddress,\n        seller: sellerAddress,\n        metadata: asset.metadataAddress,\n        bookkeeper: shouldPrintReceipt ? bookkeeper.publicKey : null,\n        receipt: shouldPrintReceipt ? purchaseReceipt : null,\n        price,\n        tokens,\n      })\n\n      // Execute Sale.\n      .add({\n        instruction: executeSaleInstruction,\n        signers: executeSaleSigners,\n        key: params.instructionKey ?? 'executeSale',\n      })\n\n      // Print the Purchase Receipt.\n      .when(shouldPrintReceipt, (builder) =>\n        builder.add({\n          instruction: createPrintPurchaseReceiptInstruction(\n            {\n              purchaseReceipt,\n              listingReceipt: listing.receiptAddress as Pda,\n              bidReceipt: bid.receiptAddress as Pda,\n              bookkeeper: bookkeeper.publicKey,\n              instruction: SYSVAR_INSTRUCTIONS_PUBKEY,\n            },\n            { purchaseReceiptBump: purchaseReceipt.bump }\n          ),\n          signers: [bookkeeper],\n          key: 'printPurchaseReceipt',\n        })\n      )\n  );\n};\n"],"names":["Key","executeSaleOperation","useOperation","executeSaleOperationHandler","handle","operation","metaplex","scope","auctionHouse","input","output","executeSaleBuilder","sendAndConfirm","confirmOptions","throwIfCanceled","receipt","purchase","findPurchaseByReceipt","receiptAddress","lazyPurchase","model","lazy","buyerAddress","buyer","sellerAddress","seller","metadataAddress","metadata","bookkeeperAddress","bookkeeper","price","tokens","basisPoints","createdAt","now","loadPurchase","params","options","programs","payer","rpc","getDefaultFeePayer","listing","bid","auctioneerAuthority","asset","hasAuctioneer","isNative","treasuryMint","address","auctionHouseAddress","authorityAddress","feeAccountAddress","treasuryAccountAddress","isPartialSale","buyerPrice","buyerTokensSize","equals","BidAndListingHaveDifferentAuctionHousesError","BidAndListingHaveDifferentMintsError","canceledAt","CanceledBidIsNotAllowedError","CanceledListingIsNotAllowedError","AuctioneerAuthorityRequiredError","AuctioneerPartialSaleNotSupportedError","listingPricePerToken","div","buyerPricePerToken","eq","PartialPriceMismatchError","lamports","amount","currency","sellerPaymentReceiptAccount","pdas","associatedTokenAccount","mint","owner","buyerReceiptTokenAccount","escrowPayment","buyerEscrow","freeTradeState","tradeState","wallet","tokenMint","tokenSize","tokenAccount","token","programAsSigner","accounts","escrowPaymentAccount","authority","auctionHouseFeeAccount","auctionHouseTreasury","buyerTradeState","tradeStateAddress","sellerTradeState","args","freeTradeStateBump","bump","escrowPaymentBump","programAsSignerBump","partialSaleArgs","partialOrderSize","partialOrderPrice","executeSaleInstruction","createExecutePartialSaleInstruction","createExecuteSaleInstruction","auctioneerAccounts","publicKey","ahAuctioneerPda","auctioneer","createAuctioneerExecuteSaleInstruction","creators","forEach","keys","push","pubkey","isWritable","isSigner","executeSaleSigners","filter","shouldPrintReceipt","printReceipt","Boolean","identity","purchaseReceipt","listingTradeState","bidTradeState","TransactionBuilder","make","setFeePayer","setContext","add","instruction","signers","key","instructionKey","when","builder","createPrintPurchaseReceiptInstruction","listingReceipt","bidReceipt","SYSVAR_INSTRUCTIONS_PUBKEY","purchaseReceiptBump"],"mappings":";;;;;;;;;;;;;AAqCA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,sBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oBAAoB,GAAGC,sBAAY,CAAuBF,GAAvB,EAAzC;AAEP;AACA;AACA;AACA;;AAuHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMG,2BAAmE,GAC9E;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI8B;IAC5B,MAAM;AAAEC,MAAAA,YAAAA;KAAiBH,GAAAA,SAAS,CAACI,KAAnC,CAAA;IAEA,MAAMC,MAAM,GAAG,MAAMC,kBAAkB,CACrCL,QADqC,EAErCD,SAAS,CAACI,KAF2B,EAGrCF,KAHqC,CAAlB,CAInBK,cAJmB,CAIJN,QAJI,EAIMC,KAAK,CAACM,cAJZ,CAArB,CAAA;AAKAN,IAAAA,KAAK,CAACO,eAAN,EAAA,CAAA;;IAEA,IAAIJ,MAAM,CAACK,OAAX,EAAoB;MAClB,MAAMC,QAAQ,GAAG,MAAMV,QAAQ,CAC5BE,YADoB,EAAA,CAEpBS,qBAFoB,CAGnB;QAAET,YAAF;QAAgBU,cAAc,EAAER,MAAM,CAACK,OAAAA;OAHpB,EAInBR,KAJmB,CAAvB,CAAA;MAOA,OAAO;QAAES,QAAF;QAAY,GAAGN,MAAAA;OAAtB,CAAA;AACD,KAAA;;AAED,IAAA,MAAMS,YAA0B,GAAG;AACjCC,MAAAA,KAAK,EAAE,UAD0B;AAEjCC,MAAAA,IAAI,EAAE,IAF2B;AAGjCb,MAAAA,YAAY,EAAEH,SAAS,CAACI,KAAV,CAAgBD,YAHG;MAIjCc,YAAY,EAAEZ,MAAM,CAACa,KAJY;MAKjCC,aAAa,EAAEd,MAAM,CAACe,MALW;MAMjCC,eAAe,EAAEhB,MAAM,CAACiB,QANS;MAOjCC,iBAAiB,EAAElB,MAAM,CAACmB,UAPO;MAQjCX,cAAc,EAAER,MAAM,CAACK,OARU;MASjCe,KAAK,EAAEpB,MAAM,CAACoB,KATmB;AAUjCC,MAAAA,MAAM,EAAErB,MAAM,CAACqB,MAAP,CAAcC,WAVW;AAWjCC,MAAAA,SAAS,EAAEC,YAAG,EAAA;KAXhB,CAAA;IAcA,OAAO;AACLlB,MAAAA,QAAQ,EAAE,MAAMV,QAAQ,CACrBE,YADa,EAAA,CAEb2B,YAFa,CAEA;AAAEhB,QAAAA,YAAAA;OAFF,EAEkBZ,KAFlB,CADX;MAIL,GAAGG,MAAAA;KAJL,CAAA;AAMD,GAAA;;AA9CH;AAkDF;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACO,MAAMC,kBAAkB,GAAG,CAChCL,QADgC,EAEhC8B,MAFgC,EAGhCC,OAAkC,GAAG,EAHL,KAIkB;EAClD,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGjC,QAAQ,CAACkC,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IAAE7B,YAAF;IAAgBkC,OAAhB;IAAyBC,GAAzB;AAA8BC,IAAAA,mBAAAA;AAA9B,GAAA,GAAsDR,MAA5D,CAAA;EACA,MAAM;IAAEZ,aAAF;AAAiBqB,IAAAA,KAAAA;AAAjB,GAAA,GAA2BH,OAAjC,CAAA;EACA,MAAM;AAAEpB,IAAAA,YAAAA;AAAF,GAAA,GAAmBqB,GAAzB,CAAA;EACA,MAAM;IACJG,aADI;IAEJC,QAFI;IAGJC,YAHI;AAIJC,IAAAA,OAAO,EAAEC,mBAJL;IAKJC,gBALI;IAMJC,iBANI;AAOJC,IAAAA,sBAAAA;AAPI,GAAA,GAQF7C,YARJ,CAAA;AAUA,EAAA,MAAM8C,aAAa,GAAGX,GAAG,CAACZ,MAAJ,CAAWC,WAAX,GAAyBU,OAAO,CAACX,MAAR,CAAeC,WAA9D,CAfkD;;EAkBlD,MAAM;IAAED,MAAF;AAAUD,IAAAA,KAAAA;AAAV,GAAA,GAAoBwB,aAAa,GAAGZ,OAAH,GAAaC,GAApD,CAAA;EACA,MAAM;AAAEb,IAAAA,KAAK,EAAEyB,UAAT;AAAqBxB,IAAAA,MAAM,EAAEyB,eAAAA;AAA7B,GAAA,GAAiDb,GAAvD,CAAA;;AAEA,EAAA,IAAI,CAACD,OAAO,CAAClC,YAAR,CAAqByC,OAArB,CAA6BQ,MAA7B,CAAoCd,GAAG,CAACnC,YAAJ,CAAiByC,OAArD,CAAL,EAAoE;IAClE,MAAM,IAAIS,mDAAJ,EAAN,CAAA;AACD,GAAA;;AACD,EAAA,IAAI,CAAChB,OAAO,CAACG,KAAR,CAAcI,OAAd,CAAsBQ,MAAtB,CAA6Bd,GAAG,CAACE,KAAJ,CAAUI,OAAvC,CAAL,EAAsD;IACpD,MAAM,IAAIU,2CAAJ,EAAN,CAAA;AACD,GAAA;;EACD,IAAIhB,GAAG,CAACiB,UAAR,EAAoB;IAClB,MAAM,IAAIC,mCAAJ,EAAN,CAAA;AACD,GAAA;;EACD,IAAInB,OAAO,CAACkB,UAAZ,EAAwB;IACtB,MAAM,IAAIE,uCAAJ,EAAN,CAAA;AACD,GAAA;;AACD,EAAA,IAAIhB,aAAa,IAAI,CAACF,mBAAtB,EAA2C;IACzC,MAAM,IAAImB,uCAAJ,EAAN,CAAA;AACD,GAAA;;EACD,IAAIT,aAAa,IAAIR,aAArB,EAAoC;IAClC,MAAM,IAAIkB,6CAAJ,EAAN,CAAA;AACD,GAAA;;AACD,EAAA,IAAIV,aAAJ,EAAmB;IACjB,MAAMW,oBAAoB,GAAGnC,KAAK,CAACE,WAAN,CAAkBkC,GAAlB,CAAsBnC,MAAM,CAACC,WAA7B,CAA7B,CAAA;IACA,MAAMmC,kBAAkB,GAAGZ,UAAU,CAACvB,WAAX,CAAuBkC,GAAvB,CACzBV,eAAe,CAACxB,WADS,CAA3B,CAAA;;AAIA,IAAA,IAAI,CAACiC,oBAAoB,CAACG,EAArB,CAAwBD,kBAAxB,CAAL,EAAkD;AAChD,MAAA,MAAM,IAAIE,gCAAJ,CACJ7D,YAAY,CAACuC,QAAb,GACIuB,eAAQ,CAACL,oBAAD,CADZ,GAEIM,aAAM,CAACN,oBAAD,EAAuBzD,YAAY,CAACwC,YAAb,CAA0BwB,QAAjD,CAHN,EAIJhE,YAAY,CAACuC,QAAb,GACIuB,eAAQ,CAACH,kBAAD,CADZ,GAEII,aAAM,CAACJ,kBAAD,EAAqB3D,YAAY,CAACwC,YAAb,CAA0BwB,QAA/C,CANN,CAAN,CAAA;AAQD,KAAA;AACF,GAvDiD;;;AA0DlD,EAAA,MAAMC,2BAA2B,GAAG1B,QAAQ,GACxCvB,aADwC,GAExClB,QAAQ,CAACyB,MAAT,EAAA,CAAkB2C,IAAlB,EAAA,CAAyBC,sBAAzB,CAAgD;IAC9CC,IAAI,EAAE5B,YAAY,CAACC,OAD2B;AAE9C4B,IAAAA,KAAK,EAAErD,aAFuC;AAG9Cc,IAAAA,QAAAA;AAH8C,GAAhD,CAFJ,CAAA;EAOA,MAAMwC,wBAAwB,GAAGxE,QAAQ,CACtCyB,MAD8B,EAE9B2C,CAAAA,IAF8B,EAG9BC,CAAAA,sBAH8B,CAGP;IACtBC,IAAI,EAAE/B,KAAK,CAACI,OADU;AAEtB4B,IAAAA,KAAK,EAAEvD,YAFe;AAGtBgB,IAAAA,QAAAA;AAHsB,GAHO,CAAjC,CAAA;EAQA,MAAMyC,aAAa,GAAGzE,QAAQ,CAACE,YAAT,EAAwBkE,CAAAA,IAAxB,EAA+BM,CAAAA,WAA/B,CAA2C;AAC/DxE,IAAAA,YAAY,EAAE0C,mBADiD;AAE/D3B,IAAAA,KAAK,EAAED,YAFwD;AAG/DgB,IAAAA,QAAAA;AAH+D,GAA3C,CAAtB,CAAA;EAKA,MAAM2C,cAAc,GAAG3E,QAAQ,CAC5BE,YADoB,EAEpBkE,CAAAA,IAFoB,EAGpBQ,CAAAA,UAHoB,CAGT;AACV1E,IAAAA,YAAY,EAAE0C,mBADJ;AAEViC,IAAAA,MAAM,EAAE3D,aAFE;IAGVwB,YAAY,EAAEA,YAAY,CAACC,OAHjB;IAIVmC,SAAS,EAAEvC,KAAK,CAACI,OAJP;AAKVnB,IAAAA,KAAK,EAAEwC,eAAQ,CAAC,CAAD,CAAR,CAAYtC,WALT;IAMVqD,SAAS,EAAEtD,MAAM,CAACC,WANR;AAOVsD,IAAAA,YAAY,EAAEzC,KAAK,CAAC0C,KAAN,CAAYtC,OAPhB;AAQVX,IAAAA,QAAAA;AARU,GAHS,CAAvB,CAAA;EAaA,MAAMkD,eAAe,GAAGlF,QAAQ,CAACE,YAAT,EAAwBkE,CAAAA,IAAxB,EAA+Bc,CAAAA,eAA/B,EAAxB,CAAA;AAEA,EAAA,MAAMC,QAAQ,GAAG;AACflE,IAAAA,KAAK,EAAED,YADQ;AAEfG,IAAAA,MAAM,EAAED,aAFO;AAGf8D,IAAAA,YAAY,EAAEzC,KAAK,CAAC0C,KAAN,CAAYtC,OAHX;IAIfmC,SAAS,EAAEvC,KAAK,CAACI,OAJF;IAKftB,QAAQ,EAAEkB,KAAK,CAACnB,eALD;IAMfsB,YAAY,EAAEA,YAAY,CAACC,OANZ;AAOfyC,IAAAA,oBAAoB,EAAEX,aAPP;IAQfN,2BARe;IASfK,wBATe;AAUfa,IAAAA,SAAS,EAAExC,gBAVI;AAWf3C,IAAAA,YAAY,EAAE0C,mBAXC;AAYf0C,IAAAA,sBAAsB,EAAExC,iBAZT;AAafyC,IAAAA,oBAAoB,EAAExC,sBAbP;IAcfyC,eAAe,EAAEnD,GAAG,CAACoD,iBAdN;IAefC,gBAAgB,EAAEtD,OAAO,CAACqD,iBAfX;IAgBfd,cAhBe;AAiBfO,IAAAA,eAAAA;AAjBe,GAAjB,CA7FkD;;AAkHlD,EAAA,MAAMS,IAAI,GAAG;IACXC,kBAAkB,EAAEjB,cAAc,CAACkB,IADxB;IAEXC,iBAAiB,EAAErB,aAAa,CAACoB,IAFtB;IAGXE,mBAAmB,EAAEb,eAAe,CAACW,IAH1B;IAIX5C,UAAU,EAAEzB,KAAK,CAACE,WAJP;IAKXqD,SAAS,EAAEtD,MAAM,CAACC,WAAAA;AALP,GAAb,CAlHkD;;AA2HlD,EAAA,MAAMsE,eAAkD,GAAG,EACzD,GAAGL,IADsD;AAEzDM,IAAAA,gBAAgB,EAAE5D,GAAG,CAACZ,MAAJ,CAAWC,WAF4B;AAGzDwE,IAAAA,iBAAiB,EAAE7D,GAAG,CAACb,KAAJ,CAAUE,WAAAA;GAH/B,CAAA;AAMA,EAAA,IAAIyE,sBAAsB,GAAGnD,aAAa,GACtCoD,mDAAmC,CAACjB,QAAD,EAAWa,eAAX,CADG,GAEtCK,4CAA4B,CAAClB,QAAD,EAAWQ,IAAX,CAFhC,CAAA;;AAIA,EAAA,IAAIrD,mBAAJ,EAAyB;AACvB,IAAA,MAAMgE,kBAA4D,GAAG,EACnE,GAAGnB,QADgE;MAEnE7C,mBAAmB,EAAEA,mBAAmB,CAACiE,SAF0B;MAGnEC,eAAe,EAAExG,QAAQ,CAACE,YAAT,GAAwBkE,IAAxB,EAAA,CAA+BqC,UAA/B,CAA0C;QACzDvG,YAAY,EAAEA,YAAY,CAACyC,OAD8B;QAEzDL,mBAAmB,EAAEA,mBAAmB,CAACiE,SAFgB;AAGzDvE,QAAAA,QAAAA;OAHe,CAAA;KAHnB,CAAA;AAUAmE,IAAAA,sBAAsB,GAAGO,sDAAsC,CAC7DJ,kBAD6D,EAE7DX,IAF6D,CAA/D,CAAA;AAID,GApJiD;;;AAuJlDpD,EAAAA,KAAK,CAACoE,QAAN,CAAeC,OAAf,CAAuB,CAAC;AAAEjE,IAAAA,OAAAA;AAAF,GAAD,KAAiB;AACtCwD,IAAAA,sBAAsB,CAACU,IAAvB,CAA4BC,IAA5B,CAAiC;AAC/BC,MAAAA,MAAM,EAAEpE,OADuB;AAE/BqE,MAAAA,UAAU,EAAE,IAFmB;AAG/BC,MAAAA,QAAQ,EAAE,KAAA;AAHqB,KAAjC,EADsC;;IAQtC,IAAI,CAACxE,QAAL,EAAe;AACb0D,MAAAA,sBAAsB,CAACU,IAAvB,CAA4BC,IAA5B,CAAiC;QAC/BC,MAAM,EAAE/G,QAAQ,CAACyB,MAAT,GAAkB2C,IAAlB,EAAA,CAAyBC,sBAAzB,CAAgD;UACtDC,IAAI,EAAE5B,YAAY,CAACC,OADmC;AAEtD4B,UAAAA,KAAK,EAAE5B,OAF+C;AAGtDX,UAAAA,QAAAA;AAHsD,SAAhD,CADuB;AAM/BgF,QAAAA,UAAU,EAAE,IANmB;AAO/BC,QAAAA,QAAQ,EAAE,KAAA;OAPZ,CAAA,CAAA;AASD,KAAA;AACF,GAnBD,EAvJkD;;EA6KlD,MAAMC,kBAAkB,GAAG,CAAC5E,mBAAD,CAAA,CAAsB6E,MAAtB,CAA6BF,eAA7B,CAA3B,CA7KkD;;EAgLlD,MAAMG,kBAAkB,GACtB,CAACtF,MAAM,CAACuF,YAAP,IAAuB,IAAxB,KACAC,OAAO,CAAClF,OAAO,CAACxB,cAAR,IAA0ByB,GAAG,CAACzB,cAA9B,IAAgD,CAACoC,aAAlD,CAFT,CAAA;EAGA,MAAMzB,UAAU,GAAGO,MAAM,CAACP,UAAP,IAAqBvB,QAAQ,CAACuH,QAAT,EAAxC,CAAA;EACA,MAAMC,eAAe,GAAGxH,QAAQ,CAACE,YAAT,EAAwBkE,CAAAA,IAAxB,EAA+BoD,CAAAA,eAA/B,CAA+C;IACrEC,iBAAiB,EAAErF,OAAO,CAACqD,iBAD0C;IAErEiC,aAAa,EAAErF,GAAG,CAACoD,iBAFkD;AAGrEzD,IAAAA,QAAAA;AAHqE,GAA/C,CAAxB,CAAA;EAMA,OACE2F,qCAAkB,CAACC,IAAnB,EAAA,CACGC,WADH,CACe5F,KADf,CAEG6F,CAAAA,UAFH,CAEc;IACVpC,gBAAgB,EAAEtD,OAAO,CAACqD,iBADhB;IAEVD,eAAe,EAAEnD,GAAG,CAACoD,iBAFX;AAGVxE,IAAAA,KAAK,EAAED,YAHG;AAIVG,IAAAA,MAAM,EAAED,aAJE;IAKVG,QAAQ,EAAEkB,KAAK,CAACnB,eALN;AAMVG,IAAAA,UAAU,EAAE6F,kBAAkB,GAAG7F,UAAU,CAACgF,SAAd,GAA0B,IAN9C;AAOV9F,IAAAA,OAAO,EAAE2G,kBAAkB,GAAGI,eAAH,GAAqB,IAPtC;IAQVhG,KARU;AASVC,IAAAA,MAAAA;AATU,GAFd,CAcE;AAdF,GAeGsG,GAfH,CAeO;AACHC,IAAAA,WAAW,EAAE7B,sBADV;AAEH8B,IAAAA,OAAO,EAAEf,kBAFN;AAGHgB,IAAAA,GAAG,EAAEpG,MAAM,CAACqG,cAAP,IAAyB,aAAA;AAH3B,GAfP,CAqBE;GACCC,IAtBH,CAsBQhB,kBAtBR,EAsB6BiB,OAAD,IACxBA,OAAO,CAACN,GAAR,CAAY;IACVC,WAAW,EAAEM,qDAAqC,CAChD;MACEd,eADF;MAEEe,cAAc,EAAEnG,OAAO,CAACxB,cAF1B;MAGE4H,UAAU,EAAEnG,GAAG,CAACzB,cAHlB;MAIEW,UAAU,EAAEA,UAAU,CAACgF,SAJzB;AAKEyB,MAAAA,WAAW,EAAES,kCAAAA;AALf,KADgD,EAQhD;MAAEC,mBAAmB,EAAElB,eAAe,CAAC3B,IAAAA;AAAvC,KARgD,CADxC;IAWVoC,OAAO,EAAE,CAAC1G,UAAD,CAXC;AAYV2G,IAAAA,GAAG,EAAE,sBAAA;AAZK,GAAZ,CAvBJ,CADF,CAAA;AAwCD;;;;;;"}