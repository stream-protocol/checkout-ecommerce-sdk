{"version":3,"file":"directBuy.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/directBuy.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctioneerAuthorityRequiredError } from '../errors';\nimport { AuctionHouse, Bid, Listing, Purchase } from '../models';\nimport { ExecuteSaleBuilderContext } from './executeSale';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  now,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DirectBuyOperation' as const;\n\n/**\n * Creates a bid on a given asset and then executes a sale on the created bid and listing.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .buy({ auctionHouse, listing, buyer };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const directBuyOperation = useOperation<DirectBuyOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DirectBuyOperation = Operation<\n  typeof Key,\n  DirectBuyInput,\n  DirectBuyOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DirectBuyInput = {\n  /** The Auction House in which to create a Bid and execute a Sale. */\n  auctionHouse: AuctionHouse;\n\n  /**\n   * The Auction House authority.\n   * If this is Signer the transaction fee\n   * will be paid from the Auction House Fee Account\n   *\n   * @defaultValue `auctionHouse.authority`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * Creator of a bid.\n   * Should not be the same as seller who creates a Listing\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  buyer?: Signer;\n\n  /**\n   * The Listing that is used in the sale.\n   * We only need a subset of the `Listing` model but we\n   * need enough information regarding its settings to know how\n   * to execute the sale.\n   *\n   * This includes, its asset, auction house address, seller, receipt address etc.\n   */\n  listing: Pick<\n    Listing,\n    | 'asset'\n    | 'auctionHouse'\n    | 'canceledAt'\n    | 'price'\n    | 'sellerAddress'\n    | 'tokens'\n    | 'tradeStateAddress'\n    | 'receiptAddress'\n  >;\n\n  /**\n   * The buyer's price.\n   *\n   * @defaultValue `listing.price`.\n   */\n  price?: SolAmount | SplTokenAmount;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: Signer;\n\n  /**\n   * The address of the bookkeeper wallet responsible for the receipt.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  bookkeeper?: Signer;\n\n  /**\n   * Prints the purchase receipt.\n   * The receipt holds information about the purchase,\n   * So it's important to print it if you want to use the `Purchase` model\n   *\n   * @defaultValue `true`\n   */\n  printReceipt?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DirectBuyOutput = {\n  /** A model that keeps information about the Bid. */\n  bid: Bid;\n\n  /** A model that keeps information about the Purchase. */\n  purchase: Purchase;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const directBuyOperationHandler: OperationHandler<DirectBuyOperation> = {\n  handle: async (\n    operation: DirectBuyOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ) => {\n    const builder = await directBuyBuilder(metaplex, operation.input, scope);\n    scope.throwIfCanceled();\n\n    return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DirectBuyBuilderParams = Omit<DirectBuyInput, 'confirmOptions'> & {\n  createBidInstructionKey?: string;\n  executeSaleInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type DirectBuyBuilderContext = Omit<DirectBuyOutput, 'response'>;\n\n/**\n * Creates a bid on a given asset and executes a sale on the created bid and given listing.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .buy({ auctionHouse, listing, buyer })\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const directBuyBuilder = async (\n  metaplex: Metaplex,\n  params: DirectBuyBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<DirectBuyBuilderContext>> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    auctioneerAuthority,\n    listing,\n    price = listing.price,\n    buyer = metaplex.identity(),\n    authority = auctionHouse.authorityAddress,\n    bookkeeper = metaplex.identity(),\n    createBidInstructionKey,\n    executeSaleInstructionKey,\n  } = params;\n\n  const { tokens, asset, sellerAddress, receiptAddress } = listing;\n\n  const printReceipt = (params.printReceipt ?? true) && Boolean(receiptAddress);\n\n  if (auctionHouse.hasAuctioneer && !auctioneerAuthority) {\n    throw new AuctioneerAuthorityRequiredError();\n  }\n\n  const bidBuilder = await metaplex.auctionHouse().builders().bid(\n    {\n      auctionHouse,\n      auctioneerAuthority,\n      authority,\n      tokens,\n      price,\n      mintAccount: asset.mint.address,\n      seller: sellerAddress,\n      buyer,\n      printReceipt,\n      bookkeeper,\n      instructionKey: createBidInstructionKey,\n    },\n    { programs, payer }\n  );\n  const { receipt, buyerTradeState } = bidBuilder.getContext();\n\n  const bid: Bid = {\n    model: 'bid',\n    lazy: false,\n    auctionHouse,\n    asset,\n    tradeStateAddress: buyerTradeState,\n    bookkeeperAddress: bookkeeper.publicKey,\n    buyerAddress: buyer.publicKey,\n    receiptAddress: receipt,\n    purchaseReceiptAddress: null,\n    price,\n    tokens,\n    canceledAt: null,\n    createdAt: now(),\n    isPublic: false,\n  };\n\n  const saleBuilder: TransactionBuilder<ExecuteSaleBuilderContext> = metaplex\n    .auctionHouse()\n    .builders()\n    .executeSale(\n      {\n        auctionHouse,\n        auctioneerAuthority,\n        bid,\n        listing,\n        printReceipt,\n        bookkeeper,\n        instructionKey: executeSaleInstructionKey,\n      },\n      { programs, payer }\n    );\n\n  const { receipt: purchaseReceiptAddress } = saleBuilder.getContext();\n\n  const buyerTokenAccount = metaplex\n    .tokens()\n    .pdas()\n    .associatedTokenAccount({\n      mint: asset.address,\n      owner: toPublicKey(buyer),\n      programs,\n    });\n  const purchasedAsset = {\n    ...asset,\n    token: {\n      ...asset.token,\n      address: buyerTokenAccount,\n      ownerAddress: toPublicKey(buyer),\n    },\n  };\n\n  const purchase: Purchase = {\n    auctionHouse,\n    model: 'purchase',\n    lazy: false,\n    buyerAddress: toPublicKey(buyer),\n    sellerAddress,\n    asset: purchasedAsset,\n    bookkeeperAddress: toPublicKey(bookkeeper),\n    receiptAddress: purchaseReceiptAddress,\n    price: listing.price,\n    tokens,\n    createdAt: now(),\n  };\n\n  return TransactionBuilder.make<DirectBuyBuilderContext>()\n    .setContext({\n      bid,\n      purchase,\n    })\n    .add(bidBuilder)\n    .add(saleBuilder);\n};\n"],"names":["Key","directBuyOperation","useOperation","directBuyOperationHandler","handle","operation","metaplex","scope","builder","directBuyBuilder","input","throwIfCanceled","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","auctioneerAuthority","listing","price","buyer","identity","authority","authorityAddress","bookkeeper","createBidInstructionKey","executeSaleInstructionKey","tokens","asset","sellerAddress","receiptAddress","printReceipt","Boolean","hasAuctioneer","AuctioneerAuthorityRequiredError","bidBuilder","builders","bid","mintAccount","mint","address","seller","instructionKey","receipt","buyerTradeState","getContext","model","lazy","tradeStateAddress","bookkeeperAddress","publicKey","buyerAddress","purchaseReceiptAddress","canceledAt","createdAt","now","isPublic","saleBuilder","executeSale","buyerTokenAccount","pdas","associatedTokenAccount","owner","toPublicKey","purchasedAsset","token","ownerAddress","purchase","TransactionBuilder","make","setContext","add"],"mappings":"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"}