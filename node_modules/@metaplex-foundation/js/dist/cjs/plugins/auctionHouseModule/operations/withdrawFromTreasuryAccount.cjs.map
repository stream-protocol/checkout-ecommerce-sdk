{"version":3,"file":"withdrawFromTreasuryAccount.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/withdrawFromTreasuryAccount.ts"],"sourcesContent":["import {\n  createWithdrawFromTreasuryInstruction,\n  WithdrawFromTreasuryInstructionAccounts,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { AuctionHouse } from '../models';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SolAmount,\n  SplTokenAmount,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WithdrawFromTreasuryAccountOperation' as const;\n\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const withdrawFromTreasuryAccountOperation =\n  useOperation<WithdrawFromTreasuryAccountOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WithdrawFromTreasuryAccountOperation = Operation<\n  typeof Key,\n  WithdrawFromTreasuryAccountInput,\n  WithdrawFromTreasuryAccountOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\n\nexport type WithdrawFromTreasuryAccountInput = {\n  /**\n   * The Auction House from which to transfer funds from the treasury wallet to the treasury withdrawal destination wallet.\n   * `treasuryWithdrawalDestinationAddress` is set on Auction House creation, but you can also change it via the `update` operation.\n   */\n  auctionHouse: Pick<\n    AuctionHouse,\n    | 'treasuryMint'\n    | 'authorityAddress'\n    | 'treasuryWithdrawalDestinationAddress'\n    | 'address'\n  >;\n\n  /**\n   * The Auction House authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /**\n   * Amount of funds to withdraw.\n   * This can either be in SOL or in the SPL token used by the Auction House as a currency.\n   */\n  amount: SolAmount | SplTokenAmount;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WithdrawFromTreasuryAccountOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const withdrawFromTreasuryAccountOperationHandler: OperationHandler<WithdrawFromTreasuryAccountOperation> =\n  {\n    handle: async (\n      operation: WithdrawFromTreasuryAccountOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) =>\n      withdrawFromTreasuryAccountBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions),\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WithdrawFromTreasuryAccountBuilderParams = Omit<\n  WithdrawFromTreasuryAccountInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type WithdrawFromTreasuryAccountBuilderContext = Omit<\n  WithdrawFromTreasuryAccountOutput,\n  'response'\n>;\n\n/**\n * Transfers funds from Auction House Treasury Wallet to the Treasury Withdrawal Destination Wallet set on an Auction House creation.\n * By default Treasury Withdrawal Destination Wallet is set to `metaplex.identity()`.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .withdrawFromTreasuryAccount({ auctionHouse, amount });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const withdrawFromTreasuryAccountBuilder = (\n  metaplex: Metaplex,\n  params: WithdrawFromTreasuryAccountBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<WithdrawFromTreasuryAccountBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    auctionHouse,\n    amount,\n    instructionKey,\n    authority = metaplex.identity(),\n  } = params;\n\n  // Accounts.\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse: auctionHouse.address,\n    programs,\n  });\n\n  const accounts: WithdrawFromTreasuryInstructionAccounts = {\n    treasuryMint: auctionHouse.treasuryMint.address,\n    authority: auctionHouse.authorityAddress,\n    treasuryWithdrawalDestination:\n      auctionHouse.treasuryWithdrawalDestinationAddress,\n    auctionHouseTreasury,\n    auctionHouse: auctionHouse.address,\n  };\n\n  // Withdraw From Treasury Instruction.\n  const withdrawFromTreasuryInstruction = createWithdrawFromTreasuryInstruction(\n    accounts,\n    { amount: amount.basisPoints }\n  );\n\n  // Signers.\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Withdraw From Treasury.\n      .add({\n        instruction: withdrawFromTreasuryInstruction,\n        signers: [authority],\n        key: instructionKey ?? 'withdrawFromTreasuryAccount',\n      })\n  );\n};\n"],"names":["Key","withdrawFromTreasuryAccountOperation","useOperation","withdrawFromTreasuryAccountOperationHandler","handle","operation","metaplex","scope","withdrawFromTreasuryAccountBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","auctionHouse","amount","instructionKey","authority","identity","auctionHouseTreasury","pdas","treasury","address","accounts","treasuryMint","authorityAddress","treasuryWithdrawalDestination","treasuryWithdrawalDestinationAddress","withdrawFromTreasuryInstruction","createWithdrawFromTreasuryInstruction","basisPoints","TransactionBuilder","make","setFeePayer","add","instruction","signers","key"],"mappings":";;;;;;;;AAmBA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,sBAAY,CAAuCF,GAAvC,EADP;AAGP;AACA;AACA;AACA;;AAgDA;AACA;AACA;AACA;AACO,MAAMG,2CAAmG,GAC9G;EACEC,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAKNC,kCAAkC,CAChCF,QADgC,EAEhCD,SAAS,CAACI,KAFsB,EAGhCF,KAHgC,CAAlC,CAIEG,cAJF,CAIiBJ,QAJjB,EAI2BC,KAAK,CAACI,cAJjC,CAAA;AANJ;AAcF;AACA;;AAEA;AACA;AACA;AACA;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,kCAAkC,GAAG,CAChDF,QADgD,EAEhDM,MAFgD,EAGhDC,OAAkC,GAAG,EAHW,KAIkB;AAClE;EACA,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,YADI;IAEJC,MAFI;IAGJC,cAHI;IAIJC,SAAS,GAAGf,QAAQ,CAACgB,QAAT,EAAA;GACVV,GAAAA,MALJ,CAHkE;;EAWlE,MAAMW,oBAAoB,GAAGjB,QAAQ,CAACY,YAAT,EAAwBM,CAAAA,IAAxB,EAA+BC,CAAAA,QAA/B,CAAwC;IACnEP,YAAY,EAAEA,YAAY,CAACQ,OADwC;AAEnEZ,IAAAA,QAAAA;AAFmE,GAAxC,CAA7B,CAAA;AAKA,EAAA,MAAMa,QAAiD,GAAG;AACxDC,IAAAA,YAAY,EAAEV,YAAY,CAACU,YAAb,CAA0BF,OADgB;IAExDL,SAAS,EAAEH,YAAY,CAACW,gBAFgC;IAGxDC,6BAA6B,EAC3BZ,YAAY,CAACa,oCAJyC;IAKxDR,oBALwD;IAMxDL,YAAY,EAAEA,YAAY,CAACQ,OAAAA;AAN6B,GAA1D,CAhBkE;;AA0BlE,EAAA,MAAMM,+BAA+B,GAAGC,qDAAqC,CAC3EN,QAD2E,EAE3E;IAAER,MAAM,EAAEA,MAAM,CAACe,WAAAA;GAF0D,CAA7E,CA1BkE;;AAgClE,EAAA,OACEC,qCAAkB,CAACC,IAAnB,GACGC,WADH,CACetB,KADf,CAGE;AAHF,GAIGuB,GAJH,CAIO;AACHC,IAAAA,WAAW,EAAEP,+BADV;IAEHQ,OAAO,EAAE,CAACnB,SAAD,CAFN;IAGHoB,GAAG,EAAErB,cAAc,IAAI,6BAAA;AAHpB,GAJP,CADF,CAAA;AAWD;;;;;;"}