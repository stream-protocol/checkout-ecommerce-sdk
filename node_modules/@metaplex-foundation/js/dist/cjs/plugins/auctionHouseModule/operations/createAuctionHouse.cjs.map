{"version":3,"file":"createAuctionHouse.cjs","sources":["../../../../../src/plugins/auctionHouseModule/operations/createAuctionHouse.ts"],"sourcesContent":["import {\n  AuthorityScope,\n  createCreateAuctionHouseInstruction,\n  createDelegateAuctioneerInstruction,\n} from '@metaplex-foundation/mpl-auction-house';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { WRAPPED_SOL_MINT } from '../../tokenModule';\nimport { AUCTIONEER_ALL_SCOPES } from '../constants';\nimport { AuctionHouse } from '../models/AuctionHouse';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Pda,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateAuctionHouseOperation' as const;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500 }); // 5% fee\n * ```\n *\n * Provide `auctioneerAuthority` in case you want to enable Auctioneer.\n *\n * ```ts\n * await metaplex\n *   .auctionHouse()\n *   .create({ sellerFeeBasisPoints: 500, auctioneerAuthority: mx.identity().publicKey };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createAuctionHouseOperation =\n  useOperation<CreateAuctionHouseOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateAuctionHouseOperation = Operation<\n  typeof Key,\n  CreateAuctionHouseInput,\n  CreateAuctionHouseOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateAuctionHouseInput = {\n  /** The share of the sale the auction house takes on all NFTs as a fee. */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * This allows the centralised authority to gate which NFT can be listed, bought and sold.\n   *\n   * @defaultValue `canChangeSalePrice`\n   */\n  requiresSignOff?: boolean;\n\n  /**\n   * Is intended to be used with the Auction House that requires sign off.\n   * If the seller intentionally lists their NFT for a price of 0, a new FreeSellerTradeState is made.\n   * The Auction House can then change the price to match a matching Bid that is greater than 0.\n   *\n   * @defaultValue `false`\n   */\n  canChangeSalePrice?: boolean;\n\n  /**\n   * The list of scopes available to the user in the Auctioneer.\n   * For example Bid, List, Execute Sale.\n   *\n   * Only takes place when Auction House has Auctioneer enabled.\n   *\n   * @defaultValue `All scopes available`\n   */\n  auctioneerScopes?: AuthorityScope[];\n\n  /**\n   * The address of the Auction House treasury mint.\n   * The token you accept as the purchase currency.\n   *\n   * @defaultValue `WRAPPED_SOL_MINT`\n   */\n  treasuryMint?: PublicKey;\n\n  /**\n   * The Authority wallet of the Auction House.\n   * It is used to sign off listings and bids in case `requiresSignOff` is true.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The account that is marked as a destination of withdrawal from the fee account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  feeWithdrawalDestination?: PublicKey;\n\n  /**\n   * The account that is marked as the owner of treasury withdrawal destination.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  treasuryWithdrawalDestinationOwner?: PublicKey;\n\n  /**\n   * The Auctioneer authority key.\n   * It is required when Auction House is going to have Auctioneer enabled.\n   *\n   * @defaultValue No default value.\n   */\n  auctioneerAuthority?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateAuctionHouseOutput = {\n  /** The address of the Auction House. */\n  auctionHouseAddress: Pda;\n\n  /** The account that used to pay the fees for selling and buying. */\n  auctionHouseFeeAccountAddress: Pda;\n\n  /** The account that receives the AuctionHouse fees. */\n  auctionHouseTreasuryAddress: Pda;\n\n  /** The account that is marked as a destination of withdrawal from the treasury account. */\n  treasuryWithdrawalDestinationAddress: PublicKey;\n\n  /** Auction House model. */\n  auctionHouse: AuctionHouse;\n\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createAuctionHouseOperationHandler: OperationHandler<CreateAuctionHouseOperation> =\n  {\n    async handle(\n      operation: CreateAuctionHouseOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateAuctionHouseOutput> {\n      const builder = createAuctionHouseBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const auctionHouse = await metaplex.auctionHouse().findByAddress(\n        {\n          address: output.auctionHouseAddress,\n          auctioneerAuthority: operation.input.auctioneerAuthority,\n        },\n        scope\n      );\n\n      return { ...output, auctionHouse };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateAuctionHouseBuilderParams = Omit<\n  CreateAuctionHouseInput,\n  'confirmOptions'\n> & {\n  instructionKey?: string;\n  delegateAuctioneerInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateAuctionHouseBuilderContext = Omit<\n  CreateAuctionHouseOutput,\n  'response' | 'auctionHouse'\n>;\n\n/**\n * Creates an Auction House.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .auctionHouse()\n *   .builders()\n *   .createAuctionHouse({ sellerFeeBasisPoints: 500 }) // 5% fee\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createAuctionHouseBuilder = (\n  metaplex: Metaplex,\n  params: CreateAuctionHouseBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder<CreateAuctionHouseBuilderContext> => {\n  // Data.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const canChangeSalePrice = params.canChangeSalePrice ?? false;\n  const requiresSignOff = params.requiresSignOff ?? canChangeSalePrice;\n\n  // Accounts.\n  const authority = params.authority ?? metaplex.identity();\n  const treasuryMint = params.treasuryMint ?? WRAPPED_SOL_MINT;\n  const treasuryWithdrawalDestinationOwner =\n    params.treasuryWithdrawalDestinationOwner ?? metaplex.identity().publicKey;\n  const feeWithdrawalDestination =\n    params.feeWithdrawalDestination ?? metaplex.identity().publicKey;\n\n  // Auctioneer delegate instruction needs to be signed by authority\n  if (params.auctioneerAuthority && !isSigner(authority)) {\n    throw new ExpectedSignerError('authority', 'PublicKey', {\n      problemSuffix:\n        'You are trying to delegate to an Auctioneer authority which ' +\n        'requires the Auction House authority to sign a transaction. ' +\n        'But you provided the Auction House authority as a Public Key.',\n    });\n  }\n\n  // PDAs.\n  const auctionHouse = metaplex\n    .auctionHouse()\n    .pdas()\n    .auctionHouse({\n      creator: toPublicKey(authority),\n      treasuryMint,\n      programs,\n    });\n  const auctionHouseFeeAccount = metaplex.auctionHouse().pdas().fee({\n    auctionHouse,\n    programs,\n  });\n  const auctionHouseTreasury = metaplex.auctionHouse().pdas().treasury({\n    auctionHouse,\n    programs,\n  });\n  const treasuryWithdrawalDestination = treasuryMint.equals(WRAPPED_SOL_MINT)\n    ? treasuryWithdrawalDestinationOwner\n    : metaplex.tokens().pdas().associatedTokenAccount({\n        mint: treasuryMint,\n        owner: treasuryWithdrawalDestinationOwner,\n        programs,\n      });\n\n  return (\n    TransactionBuilder.make<CreateAuctionHouseBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        auctionHouseAddress: auctionHouse,\n        auctionHouseFeeAccountAddress: auctionHouseFeeAccount,\n        auctionHouseTreasuryAddress: auctionHouseTreasury,\n        treasuryWithdrawalDestinationAddress: treasuryWithdrawalDestination,\n      })\n\n      // Create and initialize the Auction House account.\n      .add({\n        instruction: createCreateAuctionHouseInstruction(\n          {\n            treasuryMint,\n            payer: payer.publicKey,\n            authority: toPublicKey(authority),\n            feeWithdrawalDestination,\n            treasuryWithdrawalDestination,\n            treasuryWithdrawalDestinationOwner,\n            auctionHouse,\n            auctionHouseFeeAccount,\n            auctionHouseTreasury,\n          },\n          {\n            bump: auctionHouse.bump,\n            feePayerBump: auctionHouseFeeAccount.bump,\n            treasuryBump: auctionHouseTreasury.bump,\n            sellerFeeBasisPoints: params.sellerFeeBasisPoints,\n            requiresSignOff,\n            canChangeSalePrice,\n          }\n        ),\n        signers: [payer],\n        key: params.instructionKey ?? 'createAuctionHouse',\n      })\n\n      // Delegate to the Auctioneer authority when provided.\n      .when(Boolean(params.auctioneerAuthority), (builder) => {\n        const auctioneerAuthority = params.auctioneerAuthority as PublicKey;\n        return builder.add({\n          instruction: createDelegateAuctioneerInstruction(\n            {\n              auctionHouse,\n              authority: toPublicKey(authority as Signer),\n              auctioneerAuthority,\n              ahAuctioneerPda: metaplex.auctionHouse().pdas().auctioneer({\n                auctionHouse,\n                auctioneerAuthority,\n                programs,\n              }),\n            },\n            { scopes: params.auctioneerScopes ?? AUCTIONEER_ALL_SCOPES }\n          ),\n          signers: [authority as Signer],\n          key: params.delegateAuctioneerInstructionKey ?? 'delegateAuctioneer',\n        });\n      })\n  );\n};\n"],"names":["Key","createAuctionHouseOperation","useOperation","createAuctionHouseOperationHandler","handle","operation","metaplex","scope","builder","createAuctionHouseBuilder","input","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","throwIfCanceled","auctionHouse","findByAddress","address","auctionHouseAddress","auctioneerAuthority","params","options","programs","payer","rpc","getDefaultFeePayer","canChangeSalePrice","requiresSignOff","authority","identity","treasuryMint","WRAPPED_SOL_MINT","treasuryWithdrawalDestinationOwner","publicKey","feeWithdrawalDestination","isSigner","ExpectedSignerError","problemSuffix","pdas","creator","toPublicKey","auctionHouseFeeAccount","fee","auctionHouseTreasury","treasury","treasuryWithdrawalDestination","equals","tokens","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","setContext","auctionHouseFeeAccountAddress","auctionHouseTreasuryAddress","treasuryWithdrawalDestinationAddress","add","instruction","createCreateAuctionHouseInstruction","bump","feePayerBump","treasuryBump","sellerFeeBasisPoints","signers","key","instructionKey","when","Boolean","createDelegateAuctioneerInstruction","ahAuctioneerPda","auctioneer","scopes","auctioneerScopes","AUCTIONEER_ALL_SCOPES","delegateAuctioneerInstructionKey"],"mappings":"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"}