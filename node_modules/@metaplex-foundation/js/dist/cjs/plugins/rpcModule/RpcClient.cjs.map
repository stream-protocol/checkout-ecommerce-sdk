{"version":3,"file":"RpcClient.cjs","sources":["../../../../src/plugins/rpcModule/RpcClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport {\n  AccountInfo,\n  Blockhash,\n  BlockhashWithExpiryBlockHeight,\n  Commitment,\n  ConfirmOptions,\n  GetLatestBlockhashConfig,\n  GetProgramAccountsConfig,\n  PublicKey,\n  RpcResponseAndContext,\n  SendOptions,\n  SignatureResult,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\nimport {\n  FailedToConfirmTransactionError,\n  FailedToConfirmTransactionWithResponseError,\n  FailedToSendTransactionError,\n  MetaplexError,\n  ParsedProgramError,\n  UnknownProgramError,\n} from '@/errors';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  assertSol,\n  getSignerHistogram,\n  isErrorWithLogs,\n  lamports,\n  Program,\n  Signer,\n  SolAmount,\n  UnparsedAccount,\n  UnparsedMaybeAccount,\n} from '@/types';\nimport { TransactionBuilder, zipMap } from '@/utils';\n\nexport type ConfirmTransactionResponse = RpcResponseAndContext<SignatureResult>;\nexport type SendAndConfirmTransactionResponse = {\n  signature: TransactionSignature;\n  confirmResponse: ConfirmTransactionResponse;\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n};\n\n/**\n * @group Modules\n */\nexport class RpcClient {\n  protected defaultFeePayer?: Signer;\n\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  protected async prepareTransaction(\n    transaction: Transaction | TransactionBuilder,\n    signers: Signer[]\n  ): Promise<{\n    transaction: Transaction;\n    signers: Signer[];\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n  }> {\n    let blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight;\n    if (\n      !('records' in transaction) &&\n      transaction.recentBlockhash &&\n      transaction.lastValidBlockHeight\n    ) {\n      blockhashWithExpiryBlockHeight = {\n        blockhash: transaction.recentBlockhash,\n        lastValidBlockHeight: transaction.lastValidBlockHeight,\n      };\n    } else {\n      blockhashWithExpiryBlockHeight = await this.getLatestBlockhash();\n    }\n\n    if ('records' in transaction) {\n      signers = [...transaction.getSigners(), ...signers];\n      transaction = transaction.toTransaction(blockhashWithExpiryBlockHeight);\n    }\n\n    return { transaction, signers, blockhashWithExpiryBlockHeight };\n  }\n\n  async signTransaction(\n    transaction: Transaction,\n    signers: Signer[]\n  ): Promise<Transaction> {\n    const { keypairs, identities } = getSignerHistogram(signers);\n\n    // Keypair signers.\n    if (keypairs.length > 0) {\n      transaction.partialSign(...keypairs);\n    }\n\n    // Identity signers.\n    for (let i = 0; i < identities.length; i++) {\n      await identities[i].signTransaction(transaction);\n    }\n\n    return transaction;\n  }\n\n  async sendTransaction(\n    transaction: Transaction | TransactionBuilder,\n    sendOptions: SendOptions = {},\n    signers: Signer[] = []\n  ): Promise<TransactionSignature> {\n    const prepared = await this.prepareTransaction(transaction, signers);\n    transaction = prepared.transaction;\n    signers = prepared.signers;\n\n    const defaultFeePayer = this.getDefaultFeePayer();\n    if (!transaction.feePayer && defaultFeePayer) {\n      transaction.feePayer = defaultFeePayer.publicKey;\n      signers = [defaultFeePayer, ...signers];\n    }\n\n    transaction = await this.signTransaction(transaction, signers);\n    const rawTransaction = transaction.serialize();\n\n    try {\n      return await this.metaplex.connection.sendRawTransaction(\n        rawTransaction,\n        sendOptions\n      );\n    } catch (error) {\n      throw this.parseProgramError(error, transaction);\n    }\n  }\n\n  async confirmTransaction(\n    signature: TransactionSignature,\n    blockhashWithExpiryBlockHeight: BlockhashWithExpiryBlockHeight,\n    commitment?: Commitment\n  ): Promise<ConfirmTransactionResponse> {\n    let rpcResponse: ConfirmTransactionResponse;\n    try {\n      rpcResponse = await this.metaplex.connection.confirmTransaction(\n        { signature, ...blockhashWithExpiryBlockHeight },\n        commitment\n      );\n    } catch (error) {\n      throw new FailedToConfirmTransactionError(error as Error);\n    }\n\n    if (rpcResponse.value.err) {\n      throw new FailedToConfirmTransactionWithResponseError(rpcResponse);\n    }\n\n    return rpcResponse;\n  }\n\n  async sendAndConfirmTransaction(\n    transaction: Transaction | TransactionBuilder,\n    confirmOptions?: ConfirmOptions,\n    signers: Signer[] = []\n  ): Promise<SendAndConfirmTransactionResponse> {\n    const prepared = await this.prepareTransaction(transaction, signers);\n    const { blockhashWithExpiryBlockHeight } = prepared;\n    transaction = prepared.transaction;\n    signers = prepared.signers;\n\n    const signature = await this.sendTransaction(\n      transaction,\n      confirmOptions,\n      signers\n    );\n\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      blockhashWithExpiryBlockHeight,\n      confirmOptions?.commitment\n    );\n\n    return { signature, confirmResponse, ...blockhashWithExpiryBlockHeight };\n  }\n\n  async getAccount(publicKey: PublicKey, commitment?: Commitment) {\n    const accountInfo = await this.metaplex.connection.getAccountInfo(\n      publicKey,\n      commitment\n    );\n\n    return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n  }\n\n  async accountExists(publicKey: PublicKey, commitment?: Commitment) {\n    const balance = await this.metaplex.connection.getBalance(\n      publicKey,\n      commitment\n    );\n\n    return balance > 0;\n  }\n\n  async getMultipleAccounts(publicKeys: PublicKey[], commitment?: Commitment) {\n    const accountInfos = await this.metaplex.connection.getMultipleAccountsInfo(\n      publicKeys,\n      commitment\n    );\n\n    return zipMap(publicKeys, accountInfos, (publicKey, accountInfo) => {\n      return this.getUnparsedMaybeAccount(publicKey, accountInfo);\n    });\n  }\n\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment\n  ): Promise<UnparsedAccount[]> {\n    const accounts = await this.metaplex.connection.getProgramAccounts(\n      programId,\n      configOrCommitment\n    );\n\n    return accounts.map(({ pubkey, account }) => ({\n      ...account,\n      publicKey: pubkey,\n      lamports: lamports(account.lamports),\n    }));\n  }\n\n  async airdrop(\n    publicKey: PublicKey,\n    amount: SolAmount,\n    commitment?: Commitment\n  ): Promise<SendAndConfirmTransactionResponse> {\n    assertSol(amount);\n\n    const signature = await this.metaplex.connection.requestAirdrop(\n      publicKey,\n      amount.basisPoints.toNumber()\n    );\n\n    const blockhashWithExpiryBlockHeight = await this.getLatestBlockhash();\n    const confirmResponse = await this.confirmTransaction(\n      signature,\n      blockhashWithExpiryBlockHeight,\n      commitment\n    );\n\n    return { signature, confirmResponse, ...blockhashWithExpiryBlockHeight };\n  }\n\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment\n  ): Promise<SolAmount> {\n    const balance = await this.metaplex.connection.getBalance(\n      publicKey,\n      commitment\n    );\n\n    return lamports(balance);\n  }\n\n  async getRent(bytes: number, commitment?: Commitment): Promise<SolAmount> {\n    const rent =\n      await this.metaplex.connection.getMinimumBalanceForRentExemption(\n        bytes,\n        commitment\n      );\n\n    return lamports(rent);\n  }\n\n  async getLatestBlockhash(\n    commitmentOrConfig: Commitment | GetLatestBlockhashConfig = 'finalized'\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    return this.metaplex.connection.getLatestBlockhash(commitmentOrConfig);\n  }\n\n  getSolanaExporerUrl(signature: string): string {\n    let clusterParam = '';\n    switch (this.metaplex.cluster) {\n      case 'devnet':\n        clusterParam = '?cluster=devnet';\n        break;\n      case 'testnet':\n        clusterParam = '?cluster=testnet';\n        break;\n      case 'localnet':\n      case 'custom':\n        const url = encodeURIComponent(this.metaplex.connection.rpcEndpoint);\n        clusterParam = `?cluster=custom&customUrl=${url}`;\n        break;\n    }\n\n    return `https://explorer.solana.com/tx/${signature}${clusterParam}`;\n  }\n\n  setDefaultFeePayer(payer: Signer) {\n    this.defaultFeePayer = payer;\n\n    return this;\n  }\n\n  getDefaultFeePayer(): Signer {\n    return this.defaultFeePayer\n      ? this.defaultFeePayer\n      : this.metaplex.identity();\n  }\n\n  protected getUnparsedMaybeAccount(\n    publicKey: PublicKey,\n    accountInfo: AccountInfo<Buffer> | null\n  ): UnparsedMaybeAccount {\n    if (!accountInfo) {\n      return { publicKey, exists: false };\n    }\n\n    return {\n      ...accountInfo,\n      publicKey,\n      exists: true,\n      lamports: lamports(accountInfo.lamports),\n    };\n  }\n\n  protected parseProgramError(\n    error: unknown,\n    transaction: Transaction\n  ): MetaplexError {\n    // Ensure the error as logs.\n    if (!isErrorWithLogs(error)) {\n      return new FailedToSendTransactionError(error as Error);\n    }\n\n    // Parse the instruction number.\n    const regex = /Error processing Instruction (\\d+):/;\n    const instruction: string | null = error.message.match(regex)?.[1] ?? null;\n\n    // Ensure there is an instruction number given to find the program.\n    if (!instruction) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Get the program ID from the instruction in the transaction.\n    const instructionNumber: number = parseInt(instruction, 10);\n    const programId: PublicKey | null =\n      transaction.instructions?.[instructionNumber]?.programId ?? null;\n\n    // Ensure we were able to find a program ID for the instruction.\n    if (!programId) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Find a registered program if any.\n    let program: Program;\n    try {\n      program = this.metaplex.programs().get(programId);\n    } catch (_programNotFoundError) {\n      return new FailedToSendTransactionError(error);\n    }\n\n    // Ensure an error resolver exists on the program.\n    if (!program.errorResolver) {\n      return new UnknownProgramError(program, error);\n    }\n\n    // Finally, resolve the error.\n    const resolvedError = program.errorResolver(error);\n\n    return resolvedError\n      ? new ParsedProgramError(program, resolvedError, { logs: error.logs })\n      : new UnknownProgramError(program, error);\n  }\n}\n"],"names":["RpcClient","constructor","metaplex","prepareTransaction","transaction","signers","blockhashWithExpiryBlockHeight","recentBlockhash","lastValidBlockHeight","blockhash","getLatestBlockhash","getSigners","toTransaction","signTransaction","keypairs","identities","getSignerHistogram","length","partialSign","i","sendTransaction","sendOptions","prepared","defaultFeePayer","getDefaultFeePayer","feePayer","publicKey","rawTransaction","serialize","connection","sendRawTransaction","error","parseProgramError","confirmTransaction","signature","commitment","rpcResponse","FailedToConfirmTransactionError","value","err","FailedToConfirmTransactionWithResponseError","sendAndConfirmTransaction","confirmOptions","confirmResponse","getAccount","accountInfo","getAccountInfo","getUnparsedMaybeAccount","accountExists","balance","getBalance","getMultipleAccounts","publicKeys","accountInfos","getMultipleAccountsInfo","zipMap","getProgramAccounts","programId","configOrCommitment","accounts","map","pubkey","account","lamports","airdrop","amount","assertSol","requestAirdrop","basisPoints","toNumber","getRent","bytes","rent","getMinimumBalanceForRentExemption","commitmentOrConfig","getSolanaExporerUrl","clusterParam","cluster","url","encodeURIComponent","rpcEndpoint","setDefaultFeePayer","payer","identity","exists","isErrorWithLogs","FailedToSendTransactionError","regex","instruction","message","match","instructionNumber","parseInt","instructions","program","programs","get","_programNotFoundError","errorResolver","UnknownProgramError","resolvedError","ParsedProgramError","logs"],"mappings":"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"}