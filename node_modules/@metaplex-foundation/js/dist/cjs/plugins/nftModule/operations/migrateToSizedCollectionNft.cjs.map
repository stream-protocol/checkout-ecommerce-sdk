{"version":3,"file":"migrateToSizedCollectionNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/migrateToSizedCollectionNft.ts"],"sourcesContent":["import { createSetCollectionSizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  BigNumber,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MigrateToSizedCollectionNftOperation' as const;\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftOperation =\n  useOperation<MigrateToSizedCollectionNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MigrateToSizedCollectionNftOperation = Operation<\n  typeof Key,\n  MigrateToSizedCollectionNftInput,\n  MigrateToSizedCollectionNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * An authority that can update the Collection NFT at the\n   * given mint address. This can either be the update authority\n   * for that Collection NFT or an approved delegate authority.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * The current size of all **verified** NFTs and/or SFTs within\n   * the Collection.\n   *\n   * **Warning, once set, this size can no longer be updated.**\n   */\n  size: BigNumber;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MigrateToSizedCollectionNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const migrateToSizedCollectionNftOperationHandler: OperationHandler<MigrateToSizedCollectionNftOperation> =\n  {\n    handle: async (\n      operation: MigrateToSizedCollectionNftOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MigrateToSizedCollectionNftOutput> => {\n      return migrateToSizedCollectionNftBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MigrateToSizedCollectionNftBuilderParams = Omit<\n  MigrateToSizedCollectionNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that sets the collection size. */\n  instructionKey?: string;\n};\n\n/**\n * Migrates a legacy Collection NFT to a sized Collection NFT.\n * Both can act as a Collection for NFTs but only the latter\n * keeps track of the size of the collection on chain.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .migrateToSizedCollection({ mintAddress, size: toBigNumber(10000) });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const migrateToSizedCollectionNftBuilder = (\n  metaplex: Metaplex,\n  params: MigrateToSizedCollectionNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionAuthority = metaplex.identity(),\n    size,\n    isDelegated = false,\n  } = params;\n\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n  const nftPdas = metaplex.nfts().pdas();\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createSetCollectionSizeInstruction(\n          {\n            collectionMetadata: nftPdas.metadata({\n              mint: mintAddress,\n              programs,\n            }),\n            collectionAuthority: collectionAuthority.publicKey,\n            collectionMint: mintAddress,\n            collectionAuthorityRecord: isDelegated\n              ? nftPdas.collectionAuthorityRecord({\n                  mint: mintAddress,\n                  collectionAuthority: collectionAuthority.publicKey,\n                  programs,\n                })\n              : undefined,\n          },\n          { setCollectionSizeArgs: { size } },\n          tokenMetadataProgram.address\n        ),\n        signers: [collectionAuthority],\n        key: params.instructionKey ?? 'setCollectionSize',\n      })\n  );\n};\n"],"names":["Key","migrateToSizedCollectionNftOperation","useOperation","migrateToSizedCollectionNftOperationHandler","handle","operation","metaplex","scope","migrateToSizedCollectionNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionAuthority","identity","size","isDelegated","tokenMetadataProgram","getTokenMetadata","nftPdas","nfts","pdas","TransactionBuilder","make","setFeePayer","add","instruction","createSetCollectionSizeInstruction","collectionMetadata","metadata","mint","publicKey","collectionMint","collectionAuthorityRecord","undefined","setCollectionSizeArgs","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAeA;AACA;;AAEA,MAAMA,GAAG,GAAG,sCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,oCAAoC,GAC/CC,sBAAY,CAAuCF,GAAvC,EADP;AAGP;AACA;AACA;AACA;;AAmDA;AACA;AACA;AACA;AACO,MAAMG,2CAAmG,GAC9G;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIyC;AAC/C,IAAA,OAAOC,kCAAkC,CACvCF,QADuC,EAEvCD,SAAS,CAACI,KAF6B,EAGvCF,KAHuC,CAAlC,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,kCAAkC,GAAG,CAChDF,QADgD,EAEhDM,MAFgD,EAGhDC,OAAkC,GAAG,EAHW,KAIzB;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;AAEJC,IAAAA,mBAAmB,GAAGb,QAAQ,CAACc,QAAT,EAFlB;IAGJC,IAHI;AAIJC,IAAAA,WAAW,GAAG,KAAA;AAJV,GAAA,GAKFV,MALJ,CAAA;EAOA,MAAMW,oBAAoB,GAAGjB,QAAQ,CAACQ,QAAT,EAAoBU,CAAAA,gBAApB,CAAqCV,QAArC,CAA7B,CAAA;AACA,EAAA,MAAMW,OAAO,GAAGnB,QAAQ,CAACoB,IAAT,EAAA,CAAgBC,IAAhB,EAAhB,CAAA;AAEA,EAAA,OACEC,qCAAkB,CAACC,IAAnB,GACGC,WADH,CACef,KADf,CAGE;AAHF,GAIGgB,GAJH,CAIO;IACHC,WAAW,EAAEC,mDAAkC,CAC7C;AACEC,MAAAA,kBAAkB,EAAET,OAAO,CAACU,QAAR,CAAiB;AACnCC,QAAAA,IAAI,EAAElB,WAD6B;AAEnCJ,QAAAA,QAAAA;AAFmC,OAAjB,CADtB;MAKEK,mBAAmB,EAAEA,mBAAmB,CAACkB,SAL3C;AAMEC,MAAAA,cAAc,EAAEpB,WANlB;AAOEqB,MAAAA,yBAAyB,EAAEjB,WAAW,GAClCG,OAAO,CAACc,yBAAR,CAAkC;AAChCH,QAAAA,IAAI,EAAElB,WAD0B;QAEhCC,mBAAmB,EAAEA,mBAAmB,CAACkB,SAFT;AAGhCvB,QAAAA,QAAAA;AAHgC,OAAlC,CADkC,GAMlC0B,SAAAA;AAbN,KAD6C,EAgB7C;AAAEC,MAAAA,qBAAqB,EAAE;AAAEpB,QAAAA,IAAAA;AAAF,OAAA;AAAzB,KAhB6C,EAiB7CE,oBAAoB,CAACmB,OAjBwB,CAD5C;IAoBHC,OAAO,EAAE,CAACxB,mBAAD,CApBN;AAqBHyB,IAAAA,GAAG,EAAEhC,MAAM,CAACiC,cAAP,IAAyB,mBAAA;AArB3B,GAJP,CADF,CAAA;AA6BD;;;;;;"}