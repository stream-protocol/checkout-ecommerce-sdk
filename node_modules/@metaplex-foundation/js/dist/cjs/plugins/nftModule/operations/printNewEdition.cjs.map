{"version":3,"file":"printNewEdition.cjs","sources":["../../../../../src/plugins/nftModule/operations/printNewEdition.ts"],"sourcesContent":["import { createMintNewEditionFromMasterEditionViaTokenInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { toOriginalEditionAccount } from '../accounts';\nimport {\n  assertNftWithToken,\n  NftWithToken,\n  toNftOriginalEdition,\n} from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toBigNumber,\n  token,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'PrintNewEditionOperation' as const;\n\n/**\n * Prints a new edition from an original NFT.\n *\n * ```ts\n * const { nft } = await metaplex\n *   .nfts()\n *   .printNewEdition({ originalMint };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const printNewEditionOperation =\n  useOperation<PrintNewEditionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type PrintNewEditionOperation = Operation<\n  typeof Key,\n  PrintNewEditionInput,\n  PrintNewEditionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type PrintNewEditionInput = {\n  /** The address of the original NFT. */\n  originalMint: PublicKey;\n\n  /**\n   * The owner of the original NFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  originalTokenAccountOwner?: Signer;\n\n  /**\n   * The address of the original NFT's token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `originalMint` and `originalTokenAccountOwner` parameters.\n   */\n  originalTokenAccount?: PublicKey;\n\n  /**\n   * The address of the new mint account as a Signer.\n   * This is useful if you already have a generated Keypair\n   * for the mint account of the Print NFT to create.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  newMint?: Signer;\n\n  /**\n   * The update authority of the new printed NFT.\n   *\n   * Depending on your use-case, you might want to change that to\n   * the `updateAuthority` of the original NFT.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  newUpdateAuthority?: PublicKey;\n\n  /**\n   * The owner of the new printed NFT.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  newOwner?: PublicKey;\n\n  /**\n   * The address of the new printed NFT's token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `originalMint` and `newOwner` parameters.\n   */\n  newTokenAccount?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type PrintNewEditionOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The newly created NFT and its associated token. */\n  nft: NftWithToken;\n\n  /** The created mint account as a Signer. */\n  mintSigner: Signer;\n\n  /** The address of the metadata account. */\n  metadataAddress: PublicKey;\n\n  /** The address of the edition account. */\n  editionAddress: PublicKey;\n\n  /** The address of the token account. */\n  tokenAddress: PublicKey;\n\n  /** The new supply of the original NFT. */\n  updatedSupply: BigNumber;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const printNewEditionOperationHandler: OperationHandler<PrintNewEditionOperation> =\n  {\n    handle: async (\n      operation: PrintNewEditionOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) => {\n      const originalEditionAccount = await metaplex.rpc().getAccount(\n        metaplex.nfts().pdas().masterEdition({\n          mint: operation.input.originalMint,\n          programs: scope.programs,\n        })\n      );\n      scope.throwIfCanceled();\n\n      const originalEdition = toNftOriginalEdition(\n        toOriginalEditionAccount(originalEditionAccount)\n      );\n      const builder = await printNewEditionBuilder(\n        metaplex,\n        { ...operation.input, originalSupply: originalEdition.supply },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const nft = await metaplex.nfts().findByMint(\n        {\n          mintAddress: output.mintSigner.publicKey,\n          tokenAddress: output.tokenAddress,\n        },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      assertNftWithToken(nft);\n      return { ...output, nft };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type PrintNewEditionBuilderParams = Omit<\n  PrintNewEditionInput,\n  'confirmOptions'\n> & {\n  /** The current supply of the original edition. */\n  originalSupply: BigNumber;\n\n  /** A key to distinguish the instruction that creates the mint account. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n\n  /** A key to distinguish the instruction that prints the new edition. */\n  printNewEditionInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type PrintNewEditionBuilderContext = Omit<\n  PrintNewEditionOutput,\n  'response' | 'nft'\n>;\n\n/**\n * Prints a new edition from an original NFT.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .nfts()\n *   .builders()\n *   .printNewEdition({ originalMint });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const printNewEditionBuilder = async (\n  metaplex: Metaplex,\n  params: PrintNewEditionBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<PrintNewEditionBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    originalMint,\n    newMint = Keypair.generate(),\n    newUpdateAuthority = metaplex.identity().publicKey,\n    newOwner = metaplex.identity().publicKey,\n    newTokenAccount,\n    printNewEditionInstructionKey = 'printNewEdition',\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // Original NFT.\n  const originalMetadataAddress = metaplex.nfts().pdas().metadata({\n    mint: originalMint,\n    programs,\n  });\n  const originalEditionAddress = metaplex.nfts().pdas().masterEdition({\n    mint: originalMint,\n    programs,\n  });\n  const edition = toBigNumber(params.originalSupply.addn(1));\n  const originalEditionMarkPda = metaplex.nfts().pdas().editionMarker({\n    mint: originalMint,\n    edition,\n    programs,\n  });\n\n  // New NFT.\n  const newMintAuthority = Keypair.generate(); // Will be overwritten by edition PDA.\n  const newMetadataAddress = metaplex.nfts().pdas().metadata({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const newEditionAddress = metaplex.nfts().pdas().edition({\n    mint: newMint.publicKey,\n    programs,\n  });\n  const sharedAccounts = {\n    newMetadata: newMetadataAddress,\n    newEdition: newEditionAddress,\n    masterEdition: originalEditionAddress,\n    newMint: newMint.publicKey,\n    editionMarkPda: originalEditionMarkPda,\n    newMintAuthority: newMintAuthority.publicKey,\n    payer: payer.publicKey,\n    newMetadataUpdateAuthority: newUpdateAuthority,\n    metadata: originalMetadataAddress,\n  };\n\n  const tokenWithMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createTokenWithMint(\n      {\n        decimals: 0,\n        initialSupply: token(1),\n        mint: newMint,\n        mintAuthority: newMintAuthority,\n        freezeAuthority: newMintAuthority.publicKey,\n        owner: newOwner,\n        token: newTokenAccount,\n        createMintAccountInstructionKey: params.createMintAccountInstructionKey,\n        initializeMintInstructionKey: params.initializeMintInstructionKey,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey,\n        createTokenAccountInstructionKey:\n          params.createTokenAccountInstructionKey,\n        initializeTokenInstructionKey: params.initializeTokenInstructionKey,\n        mintTokensInstructionKey: params.mintTokensInstructionKey,\n      },\n      { payer, programs }\n    );\n\n  const { tokenAddress } = tokenWithMintBuilder.getContext();\n  const originalTokenAccountOwner =\n    params.originalTokenAccountOwner ?? metaplex.identity();\n  const originalTokenAccount =\n    params.originalTokenAccount ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: originalMint,\n      owner: originalTokenAccountOwner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make<PrintNewEditionBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({\n        mintSigner: newMint,\n        metadataAddress: newMetadataAddress,\n        editionAddress: newEditionAddress,\n        tokenAddress,\n        updatedSupply: edition,\n      })\n\n      // Create the mint and token accounts before minting 1 token to the owner.\n      .add(tokenWithMintBuilder)\n\n      // Mint new edition.\n      .add({\n        instruction: createMintNewEditionFromMasterEditionViaTokenInstruction(\n          {\n            ...sharedAccounts,\n            tokenAccountOwner: originalTokenAccountOwner.publicKey,\n            tokenAccount: originalTokenAccount,\n          },\n          { mintNewEditionFromMasterEditionViaTokenArgs: { edition } },\n          tokenMetadataProgram.address\n        ),\n        signers: [newMint, newMintAuthority, payer, originalTokenAccountOwner],\n        key: printNewEditionInstructionKey,\n      })\n  );\n};\n"],"names":["Key","printNewEditionOperation","useOperation","printNewEditionOperationHandler","handle","operation","metaplex","scope","originalEditionAccount","rpc","getAccount","nfts","pdas","masterEdition","mint","input","originalMint","programs","throwIfCanceled","originalEdition","toNftOriginalEdition","toOriginalEditionAccount","builder","printNewEditionBuilder","originalSupply","supply","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","nft","findByMint","mintAddress","mintSigner","publicKey","tokenAddress","assertNftWithToken","params","options","payer","getDefaultFeePayer","newMint","Keypair","generate","newUpdateAuthority","identity","newOwner","newTokenAccount","printNewEditionInstructionKey","tokenMetadataProgram","getTokenMetadata","originalMetadataAddress","metadata","originalEditionAddress","edition","toBigNumber","addn","originalEditionMarkPda","editionMarker","newMintAuthority","newMetadataAddress","newEditionAddress","sharedAccounts","newMetadata","newEdition","editionMarkPda","newMetadataUpdateAuthority","tokenWithMintBuilder","tokens","builders","createTokenWithMint","decimals","initialSupply","token","mintAuthority","freezeAuthority","owner","createMintAccountInstructionKey","initializeMintInstructionKey","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","mintTokensInstructionKey","getContext","originalTokenAccountOwner","originalTokenAccount","associatedTokenAccount","TransactionBuilder","make","setFeePayer","setContext","metadataAddress","editionAddress","updatedSupply","add","instruction","createMintNewEditionFromMasterEditionViaTokenInstruction","tokenAccountOwner","tokenAccount","mintNewEditionFromMasterEditionViaTokenArgs","address","signers","key"],"mappings":"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"}