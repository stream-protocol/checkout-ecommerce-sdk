{"version":3,"file":"unverifyNftCollection.cjs","sources":["../../../../../src/plugins/nftModule/operations/unverifyNftCollection.ts"],"sourcesContent":["import {\n  createUnverifyCollectionInstruction,\n  createUnverifySizedCollectionItemInstruction,\n} from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UnverifyNftCollectionOperation' as const;\n\n/**\n * Unverifies the collection of an NFT or SFT.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .unverifyCollection({ mintAddress, collectionMintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const unverifyNftCollectionOperation =\n  useOperation<UnverifyNftCollectionOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UnverifyNftCollectionOperation = Operation<\n  typeof Key,\n  UnverifyNftCollectionInput,\n  UnverifyNftCollectionOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UnverifyNftCollectionInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The mint address of the collection NFT. */\n  collectionMintAddress: PublicKey;\n\n  /**\n   * An authority that can verify and unverify collection items\n   * from the provided `collectionMintAddress`.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  collectionAuthority?: Signer;\n\n  /**\n   * Whether or not the provided `collectionMintAddress` is a\n   * sized collection (as opposed to a legacy collection).\n   *\n   * @defaultValue `true`\n   */\n  isSizedCollection?: boolean;\n\n  /**\n   * Whether or not the provided `collectionAuthority` is a delegated\n   * collection authority, i.e. it was approved by the update authority\n   * using `metaplex.nfts().approveCollectionAuthority()`.\n   *\n   * @defaultValue `false`\n   */\n  isDelegated?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UnverifyNftCollectionOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const unverifyNftCollectionOperationHandler: OperationHandler<UnverifyNftCollectionOperation> =\n  {\n    handle: async (\n      operation: UnverifyNftCollectionOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UnverifyNftCollectionOutput> => {\n      return unverifyNftCollectionBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UnverifyNftCollectionBuilderParams = Omit<\n  UnverifyNftCollectionInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that unverifies the collection. */\n  instructionKey?: string;\n};\n\n/**\n * Unverifies the collection of an NFT or SFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .unverifyCollection({ mintAddress, collectionMintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const unverifyNftCollectionBuilder = (\n  metaplex: Metaplex,\n  params: UnverifyNftCollectionBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    collectionMintAddress,\n    isSizedCollection = true,\n    isDelegated = false,\n    collectionAuthority = metaplex.identity(),\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const accounts = {\n    metadata: metaplex.nfts().pdas().metadata({\n      mint: mintAddress,\n      programs,\n    }),\n    collectionAuthority: collectionAuthority.publicKey,\n    payer: payer.publicKey,\n    collectionMint: collectionMintAddress,\n    collection: metaplex.nfts().pdas().metadata({\n      mint: collectionMintAddress,\n      programs,\n    }),\n    collectionMasterEditionAccount: metaplex.nfts().pdas().masterEdition({\n      mint: collectionMintAddress,\n      programs,\n    }),\n    collectionAuthorityRecord: isDelegated\n      ? metaplex.nfts().pdas().collectionAuthorityRecord({\n          mint: collectionMintAddress,\n          collectionAuthority: collectionAuthority.publicKey,\n          programs,\n        })\n      : undefined,\n  };\n\n  const instruction = isSizedCollection\n    ? createUnverifySizedCollectionItemInstruction(\n        accounts,\n        tokenMetadataProgram.address\n      )\n    : createUnverifyCollectionInstruction(\n        accounts,\n        tokenMetadataProgram.address\n      );\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Unverify the collection.\n      .add({\n        instruction,\n        signers: [payer, collectionAuthority],\n        key: params.instructionKey ?? 'unverifyCollection',\n      })\n  );\n};\n"],"names":["Key","unverifyNftCollectionOperation","useOperation","unverifyNftCollectionOperationHandler","handle","operation","metaplex","scope","unverifyNftCollectionBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","collectionMintAddress","isSizedCollection","isDelegated","collectionAuthority","identity","tokenMetadataProgram","getTokenMetadata","accounts","metadata","nfts","pdas","mint","publicKey","collectionMint","collection","collectionMasterEditionAccount","masterEdition","collectionAuthorityRecord","undefined","instruction","createUnverifySizedCollectionItemInstruction","address","createUnverifyCollectionInstruction","TransactionBuilder","make","setFeePayer","add","signers","key","instructionKey"],"mappings":"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"}