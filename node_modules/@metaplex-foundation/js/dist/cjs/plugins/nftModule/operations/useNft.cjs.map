{"version":3,"file":"useNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/useNft.ts"],"sourcesContent":["import { createUtilizeInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { ExpectedSignerError } from '@/errors';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UseNftOperation' as const;\n\n/**\n * Utilizes a usable NFT.\n *\n * ```ts\n * await metaplex.nfts().use({ mintAddress });\n * await metaplex.nfts().use({ mintAddress, numberOfUses: 3 });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const useNftOperation = useOperation<UseNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UseNftOperation = Operation<typeof Key, UseNftInput, UseNftOutput>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UseNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The number of uses to utilize.\n   *\n   * @defaultValue `1`\n   */\n  numberOfUses?: number; // Defaults to 1.\n\n  /**\n   * The owner of the NFT or SFT.\n   *\n   * This must be a Signer unless a `useAuthority` is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: PublicKey | Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAccount?: PublicKey;\n\n  /**\n   * The delegated use authority that should authorize this operation.\n   *\n   * @defaultValue Defaults to not using a delegated use authority\n   * and using the `owner` parameter as a Signer instead.\n   */\n  useAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UseNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const useNftOperationHandler: OperationHandler<UseNftOperation> = {\n  handle: async (\n    operation: UseNftOperation,\n    metaplex: Metaplex,\n    scope: OperationScope\n  ): Promise<UseNftOutput> => {\n    return useNftBuilder(metaplex, operation.input, scope).sendAndConfirm(\n      metaplex,\n      scope.confirmOptions\n    );\n  },\n};\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UseNftBuilderParams = Omit<UseNftInput, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that uses the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Utilizes a usable NFT.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .use({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const useNftBuilder = (\n  metaplex: Metaplex,\n  params: UseNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    numberOfUses = 1,\n    owner = metaplex.identity(),\n    useAuthority,\n  } = params;\n\n  // Programs.\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  if (!isSigner(owner) && !useAuthority) {\n    throw new ExpectedSignerError('owner', 'PublicKey', {\n      problemSuffix:\n        'In order to use an NFT you must either provide the owner as a Signer ' +\n        'or a delegated use authority as a Signer.',\n    });\n  }\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAccount =\n    params.ownerTokenAccount ??\n    metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({\n        mint: mintAddress,\n        owner: toPublicKey(owner),\n        programs,\n      });\n  const useAuthorityRecord = useAuthority\n    ? metaplex.nfts().pdas().useAuthorityRecord({\n        mint: mintAddress,\n        useAuthority: useAuthority.publicKey,\n        programs,\n      })\n    : undefined;\n  const programAsBurner = metaplex.nfts().pdas().burner({ programs });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the metadata account.\n      .add({\n        instruction: createUtilizeInstruction(\n          {\n            metadata,\n            tokenAccount,\n            useAuthority: useAuthority\n              ? useAuthority.publicKey\n              : toPublicKey(owner),\n            mint: mintAddress,\n            owner: toPublicKey(owner),\n            useAuthorityRecord,\n            burner: useAuthorityRecord ? programAsBurner : undefined,\n          },\n          { utilizeArgs: { numberOfUses } },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner, useAuthority].filter(isSigner),\n        key: params.instructionKey ?? 'utilizeNft',\n      })\n  );\n};\n"],"names":["Key","useNftOperation","useOperation","useNftOperationHandler","handle","operation","metaplex","scope","useNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","numberOfUses","owner","identity","useAuthority","tokenMetadataProgram","getTokenMetadata","isSigner","ExpectedSignerError","problemSuffix","metadata","nfts","pdas","mint","tokenAccount","ownerTokenAccount","tokens","associatedTokenAccount","toPublicKey","useAuthorityRecord","publicKey","undefined","programAsBurner","burner","TransactionBuilder","make","setFeePayer","add","instruction","createUtilizeInstruction","utilizeArgs","address","signers","filter","key","instructionKey"],"mappings":"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"}