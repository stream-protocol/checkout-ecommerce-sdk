{"version":3,"file":"revokeNftUseAuthority.cjs","sources":["../../../../../src/plugins/nftModule/operations/revokeNftUseAuthority.ts"],"sourcesContent":["import { createRevokeUseAuthorityInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeNftUseAuthorityOperation' as const;\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .revokeUseAuthority({ mintAddress, user };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeNftUseAuthorityOperation =\n  useOperation<RevokeNftUseAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeNftUseAuthorityOperation = Operation<\n  typeof Key,\n  RevokeNftUseAuthorityInput,\n  RevokeNftUseAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The address of the use authority to revoke. */\n  user: PublicKey;\n\n  /**\n   * The owner of the NFT or SFT as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer;\n\n  /**\n   * The address of the token account linking the mint account\n   * with the owner account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  ownerTokenAddress?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeNftUseAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeNftUseAuthorityOperationHandler: OperationHandler<RevokeNftUseAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeNftUseAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeNftUseAuthorityOutput> => {\n      return revokeNftUseAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeNftUseAuthorityBuilderParams = Omit<\n  RevokeNftUseAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the use authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes an existing use authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .revokeUseAuthority({ mintAddress, user });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeNftUseAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeNftUseAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mintAddress, user, owner = metaplex.identity() } = params;\n\n  // Programs.\n  const systemProgram = metaplex.programs().getSystem(programs);\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  // PDAs.\n  const metadata = metaplex.nfts().pdas().metadata({\n    mint: mintAddress,\n    programs,\n  });\n  const useAuthorityRecord = metaplex.nfts().pdas().useAuthorityRecord({\n    mint: mintAddress,\n    useAuthority: user,\n    programs,\n  });\n  const ownerTokenAddress =\n    params.ownerTokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: owner.publicKey,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Revoke the use authority.\n      .add({\n        instruction: createRevokeUseAuthorityInstruction(\n          {\n            useAuthorityRecord,\n            owner: owner.publicKey,\n            user,\n            ownerTokenAccount: ownerTokenAddress,\n            mint: mintAddress,\n            metadata,\n            tokenProgram: tokenProgram.address,\n            systemProgram: systemProgram.address,\n          },\n          tokenMetadataProgram.address\n        ),\n        signers: [owner],\n        key: params.instructionKey ?? 'revokeUseAuthority',\n      })\n  );\n};\n"],"names":["Key","revokeNftUseAuthorityOperation","useOperation","revokeNftUseAuthorityOperationHandler","handle","operation","metaplex","scope","revokeNftUseAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","user","owner","identity","systemProgram","getSystem","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","metadata","nfts","pdas","mint","useAuthorityRecord","useAuthority","ownerTokenAddress","tokens","associatedTokenAccount","publicKey","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeUseAuthorityInstruction","ownerTokenAccount","address","signers","key","instructionKey"],"mappings":"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"}