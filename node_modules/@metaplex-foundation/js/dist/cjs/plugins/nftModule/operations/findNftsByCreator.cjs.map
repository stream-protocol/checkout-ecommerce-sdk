{"version":3,"file":"findNftsByCreator.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByCreator.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { toMetadataAccount } from '../accounts';\nimport { MetadataV1GpaBuilder } from '../gpaBuilders';\nimport { Metadata, Nft, Sft, toMetadata } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByCreatorOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by their creator at a given position.\n *\n * ```ts\n * // Find all by first creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator };\n *\n * // Find all by second creator.\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByCreator({ creator, position: 2 };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByCreatorOperation =\n  useOperation<FindNftsByCreatorOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByCreatorOperation = Operation<\n  typeof Key,\n  FindNftsByCreatorInput,\n  FindNftsByCreatorOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByCreatorInput = {\n  /** The address of the creator. */\n  creator: PublicKey;\n\n  /**\n   * The position in which the provided creator should be located at.\n   * E.g. `1` for searching the first creator, `2` for searching the\n   * second creator, etc.\n   *\n   * @defaultValue `1`\n   */\n  position?: number;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByCreatorOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByCreatorOperationHandler: OperationHandler<FindNftsByCreatorOperation> =\n  {\n    handle: async (\n      operation: FindNftsByCreatorOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByCreatorOutput> => {\n      const { programs } = scope;\n      const { creator, position = 1 } = operation.input;\n\n      const gpaBuilder = new MetadataV1GpaBuilder(\n        metaplex,\n        metaplex.programs().getTokenMetadata(programs).address\n      );\n\n      const nfts = await gpaBuilder.whereCreator(position, creator).get();\n      scope.throwIfCanceled();\n\n      return nfts\n        .map<Metadata | null>((account) => {\n          if (account == null) {\n            return null;\n          }\n\n          try {\n            return toMetadata(toMetadataAccount(account));\n          } catch (error) {\n            return null;\n          }\n        })\n        .filter((nft): nft is Metadata => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByCreatorOperation","useOperation","findNftsByCreatorOperationHandler","handle","operation","metaplex","scope","programs","creator","position","input","gpaBuilder","MetadataV1GpaBuilder","getTokenMetadata","address","nfts","whereCreator","get","throwIfCanceled","map","account","toMetadata","toMetadataAccount","error","filter","nft"],"mappings":";;;;;;;;;AAYA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,4BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,0BAA0B,GACrCC,sBAAY,CAA6BF,GAA7B,EADP;AAGP;AACA;AACA;AACA;;AA+BA;AACA;AACA;AACA;AACO,MAAMG,iCAA+E,GAC1F;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI+B;IACrC,MAAM;AAAEC,MAAAA,QAAAA;AAAF,KAAA,GAAeD,KAArB,CAAA;IACA,MAAM;MAAEE,OAAF;AAAWC,MAAAA,QAAQ,GAAG,CAAA;KAAML,GAAAA,SAAS,CAACM,KAA5C,CAAA;AAEA,IAAA,MAAMC,UAAU,GAAG,IAAIC,gCAAJ,CACjBP,QADiB,EAEjBA,QAAQ,CAACE,QAAT,GAAoBM,gBAApB,CAAqCN,QAArC,CAAA,CAA+CO,OAF9B,CAAnB,CAAA;AAKA,IAAA,MAAMC,IAAI,GAAG,MAAMJ,UAAU,CAACK,YAAX,CAAwBP,QAAxB,EAAkCD,OAAlC,CAA2CS,CAAAA,GAA3C,EAAnB,CAAA;AACAX,IAAAA,KAAK,CAACY,eAAN,EAAA,CAAA;AAEA,IAAA,OAAOH,IAAI,CACRI,GADI,CACkBC,OAAD,IAAa;MACjC,IAAIA,OAAO,IAAI,IAAf,EAAqB;AACnB,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;;MAED,IAAI;AACF,QAAA,OAAOC,mBAAU,CAACC,0BAAiB,CAACF,OAAD,CAAlB,CAAjB,CAAA;OADF,CAEE,OAAOG,KAAP,EAAc;AACd,QAAA,OAAO,IAAP,CAAA;AACD,OAAA;KAVE,CAAA,CAYJC,MAZI,CAYIC,GAAD,IAA0BA,GAAG,KAAK,IAZrC,CAAP,CAAA;AAaD,GAAA;AA9BH;;;;;"}