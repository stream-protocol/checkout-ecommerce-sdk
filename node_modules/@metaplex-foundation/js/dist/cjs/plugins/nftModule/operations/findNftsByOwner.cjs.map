{"version":3,"file":"findNftsByOwner.cjs","sources":["../../../../../src/plugins/nftModule/operations/findNftsByOwner.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { TokenGpaBuilder } from '../../tokenModule';\nimport { Metadata, Nft, Sft } from '../models';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  useOperation,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindNftsByOwnerOperation' as const;\n\n/**\n * Finds multiple NFTs and SFTs by a given owner.\n *\n * ```ts\n * const nfts = await metaplex\n *   .nfts()\n *   .findAllByOwner({ owner };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findNftsByOwnerOperation =\n  useOperation<FindNftsByOwnerOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindNftsByOwnerOperation = Operation<\n  typeof Key,\n  FindNftsByOwnerInput,\n  FindNftsByOwnerOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindNftsByOwnerInput = {\n  /** The address of the owner. */\n  owner: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FindNftsByOwnerOutput = (Metadata | Nft | Sft)[];\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findNftsByOwnerOperationHandler: OperationHandler<FindNftsByOwnerOperation> =\n  {\n    handle: async (\n      operation: FindNftsByOwnerOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FindNftsByOwnerOutput> => {\n      const { programs } = scope;\n      const { owner } = operation.input;\n\n      const tokenProgram = metaplex.programs().getToken(programs);\n      const mints = await new TokenGpaBuilder(metaplex, tokenProgram.address)\n        .selectMint()\n        .whereOwner(owner)\n        .whereAmount(1)\n        .getDataAsPublicKeys();\n      scope.throwIfCanceled();\n\n      const nfts = await metaplex.nfts().findAllByMintList({ mints }, scope);\n      scope.throwIfCanceled();\n\n      return nfts.filter((nft): nft is Metadata | Nft | Sft => nft !== null);\n    },\n  };\n"],"names":["Key","findNftsByOwnerOperation","useOperation","findNftsByOwnerOperationHandler","handle","operation","metaplex","scope","programs","owner","input","tokenProgram","getToken","mints","TokenGpaBuilder","address","selectMint","whereOwner","whereAmount","getDataAsPublicKeys","throwIfCanceled","nfts","findAllByMintList","filter","nft"],"mappings":";;;;;;;AAWA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,0BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,wBAAwB,GACnCC,sBAAY,CAA2BF,GAA3B,EADP;AAGP;AACA;AACA;AACA;;AAsBA;AACA;AACA;AACA;AACO,MAAMG,+BAA2E,GACtF;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI6B;IACnC,MAAM;AAAEC,MAAAA,QAAAA;AAAF,KAAA,GAAeD,KAArB,CAAA;IACA,MAAM;AAAEE,MAAAA,KAAAA;KAAUJ,GAAAA,SAAS,CAACK,KAA5B,CAAA;IAEA,MAAMC,YAAY,GAAGL,QAAQ,CAACE,QAAT,EAAoBI,CAAAA,QAApB,CAA6BJ,QAA7B,CAArB,CAAA;IACA,MAAMK,KAAK,GAAG,MAAM,IAAIC,2BAAJ,CAAoBR,QAApB,EAA8BK,YAAY,CAACI,OAA3C,EACjBC,UADiB,EAAA,CAEjBC,UAFiB,CAENR,KAFM,CAAA,CAGjBS,WAHiB,CAGL,CAHK,CAIjBC,CAAAA,mBAJiB,EAApB,CAAA;AAKAZ,IAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;IAEA,MAAMC,IAAI,GAAG,MAAMf,QAAQ,CAACe,IAAT,EAAA,CAAgBC,iBAAhB,CAAkC;AAAET,MAAAA,KAAAA;KAApC,EAA6CN,KAA7C,CAAnB,CAAA;AACAA,IAAAA,KAAK,CAACa,eAAN,EAAA,CAAA;IAEA,OAAOC,IAAI,CAACE,MAAL,CAAaC,GAAD,IAAsCA,GAAG,KAAK,IAA1D,CAAP,CAAA;AACD,GAAA;AArBH;;;;;"}