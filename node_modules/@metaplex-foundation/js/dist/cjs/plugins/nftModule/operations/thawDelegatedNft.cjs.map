{"version":3,"file":"thawDelegatedNft.cjs","sources":["../../../../../src/plugins/nftModule/operations/thawDelegatedNft.ts"],"sourcesContent":["import { createThawDelegatedAccountInstruction } from '@metaplex-foundation/mpl-token-metadata';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'ThawDelegatedNftOperation' as const;\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * await metaplex\n *   .nfts()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const thawDelegatedNftOperation =\n  useOperation<ThawDelegatedNftOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type ThawDelegatedNftOperation = Operation<\n  typeof Key,\n  ThawDelegatedNftInput,\n  ThawDelegatedNftOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type ThawDelegatedNftInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The SPL Token delegate authority.\n   *\n   * This authority should have been approved using\n   * `metaplex.tokens().approveDelegateAuthority()` beforehand.\n   */\n  delegateAuthority: Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type ThawDelegatedNftOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const thawDelegatedNftOperationHandler: OperationHandler<ThawDelegatedNftOperation> =\n  {\n    async handle(\n      operation: ThawDelegatedNftOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<ThawDelegatedNftOutput> {\n      return thawDelegatedNftBuilder(metaplex, operation.input).sendAndConfirm(\n        metaplex,\n        scope.confirmOptions\n      );\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type ThawDelegatedNftBuilderParams = Omit<\n  ThawDelegatedNftInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that thaws the NFT. */\n  instructionKey?: string;\n};\n\n/**\n * Thaws a NFT via its delegate authority.\n *\n * ```ts\n * const transactionBuilder = metaplex\n *   .nfts()\n *   .builders()\n *   .thawDelegatedNft({ mintAddress, delegateAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const thawDelegatedNftBuilder = (\n  metaplex: Metaplex,\n  params: ThawDelegatedNftBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    delegateAuthority,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n  } = params;\n\n  // Programs.\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const editionAddress = metaplex.nfts().pdas().masterEdition({\n    mint: mintAddress,\n    programs,\n  });\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: tokenOwner,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createThawDelegatedAccountInstruction(\n        {\n          delegate: delegateAuthority.publicKey,\n          tokenAccount: tokenAddressOrAta,\n          edition: editionAddress,\n          mint: mintAddress,\n          tokenProgram: tokenProgram.address,\n        },\n        tokenMetadataProgram.address\n      ),\n      signers: [delegateAuthority],\n      key: params.instructionKey ?? 'thawDelegatedNft',\n    });\n};\n"],"names":["Key","thawDelegatedNftOperation","useOperation","thawDelegatedNftOperationHandler","handle","operation","metaplex","scope","thawDelegatedNftBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","delegateAuthority","tokenOwner","identity","publicKey","tokenAddress","tokenProgram","getToken","tokenMetadataProgram","getTokenMetadata","editionAddress","nfts","pdas","masterEdition","mint","tokenAddressOrAta","tokens","associatedTokenAccount","owner","TransactionBuilder","make","setFeePayer","add","instruction","createThawDelegatedAccountInstruction","delegate","tokenAccount","edition","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,yBAAyB,GACpCC,sBAAY,CAA4BF,GAA5B,EADP;AAGP;AACA;AACA;AACA;;AAgDA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAImC;AACjC,IAAA,OAAOC,uBAAuB,CAACF,QAAD,EAAWD,SAAS,CAACI,KAArB,CAAvB,CAAmDC,cAAnD,CACLJ,QADK,EAELC,KAAK,CAACI,cAFD,CAAP,CAAA;AAID,GAAA;;AAVH;AAcF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,uBAAuB,GAAG,CACrCF,QADqC,EAErCM,MAFqC,EAGrCC,OAAkC,GAAG,EAHA,KAId;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;IAEJC,iBAFI;AAGJC,IAAAA,UAAU,GAAGd,QAAQ,CAACe,QAAT,GAAoBC,SAH7B;AAIJC,IAAAA,YAAAA;GACEX,GAAAA,MALJ,CAFuB;;EAUvB,MAAMY,YAAY,GAAGlB,QAAQ,CAACQ,QAAT,EAAoBW,CAAAA,QAApB,CAA6BX,QAA7B,CAArB,CAAA;EACA,MAAMY,oBAAoB,GAAGpB,QAAQ,CAACQ,QAAT,EAAoBa,CAAAA,gBAApB,CAAqCb,QAArC,CAA7B,CAAA;EAEA,MAAMc,cAAc,GAAGtB,QAAQ,CAACuB,IAAT,EAAgBC,CAAAA,IAAhB,EAAuBC,CAAAA,aAAvB,CAAqC;AAC1DC,IAAAA,IAAI,EAAEd,WADoD;AAE1DJ,IAAAA,QAAAA;AAF0D,GAArC,CAAvB,CAAA;EAIA,MAAMmB,iBAAiB,GACrBV,YAAY,IACZjB,QAAQ,CAAC4B,MAAT,EAAkBJ,CAAAA,IAAlB,EAAyBK,CAAAA,sBAAzB,CAAgD;AAC9CH,IAAAA,IAAI,EAAEd,WADwC;AAE9CkB,IAAAA,KAAK,EAAEhB,UAFuC;AAG9CN,IAAAA,QAAAA;AAH8C,GAAhD,CAFF,CAAA;EAQA,OAAOuB,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQxB,KADR,CAEJyB,CAAAA,GAFI,CAEA;IACHC,WAAW,EAAEC,sDAAqC,CAChD;MACEC,QAAQ,EAAExB,iBAAiB,CAACG,SAD9B;AAEEsB,MAAAA,YAAY,EAAEX,iBAFhB;AAGEY,MAAAA,OAAO,EAAEjB,cAHX;AAIEI,MAAAA,IAAI,EAAEd,WAJR;MAKEM,YAAY,EAAEA,YAAY,CAACsB,OAAAA;AAL7B,KADgD,EAQhDpB,oBAAoB,CAACoB,OAR2B,CAD/C;IAWHC,OAAO,EAAE,CAAC5B,iBAAD,CAXN;AAYH6B,IAAAA,GAAG,EAAEpC,MAAM,CAACqC,cAAP,IAAyB,kBAAA;AAZ3B,GAFA,CAAP,CAAA;AAgBD;;;;;;"}