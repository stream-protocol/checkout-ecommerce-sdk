{"version":3,"file":"DerivedIdentityClient.cjs","sources":["../../../../src/plugins/derivedIdentity/DerivedIdentityClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as ed25519 from '@noble/ed25519';\nimport { sha512 } from '@noble/hashes/sha512';\nimport { Keypair, PublicKey, Transaction } from '@solana/web3.js';\nimport { UninitializedDerivedIdentityError } from './errors';\nimport {\n  IdentitySigner,\n  isSigner,\n  KeypairSigner,\n  Signer,\n  SolAmount,\n  subtractAmounts,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * @group Modules\n */\nexport class DerivedIdentityClient implements IdentitySigner, KeypairSigner {\n  protected readonly metaplex: Metaplex;\n  protected originalSigner: Signer | null = null;\n  protected derivedKeypair: Keypair | null = null;\n\n  constructor(metaplex: Metaplex) {\n    this.metaplex = metaplex;\n  }\n\n  get publicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.derivedKeypair.publicKey;\n  }\n\n  get secretKey(): Uint8Array {\n    this.assertInitialized();\n\n    return this.derivedKeypair.secretKey;\n  }\n\n  get originalPublicKey(): PublicKey {\n    this.assertInitialized();\n\n    return this.originalSigner.publicKey;\n  }\n\n  async deriveFrom(\n    message: string | Uint8Array,\n    originalSigner?: IdentitySigner\n  ) {\n    this.originalSigner = originalSigner ?? this.metaplex.identity().driver();\n\n    const signature = await this.originalSigner.signMessage(\n      Buffer.from(message)\n    );\n\n    const seeds = sha512(signature).slice(0, 32);\n\n    this.derivedKeypair = Keypair.fromSeed(seeds);\n  }\n\n  fund(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.originalSigner,\n        to: this.derivedKeypair.publicKey,\n        amount,\n      },\n      { payer: this.originalSigner }\n    );\n  }\n\n  withdraw(amount: SolAmount) {\n    this.assertInitialized();\n    return this.metaplex.system().transferSol(\n      {\n        from: this.derivedKeypair,\n        to: this.originalSigner.publicKey,\n        amount,\n      },\n      { payer: this.derivedKeypair }\n    );\n  }\n\n  async withdrawAll() {\n    this.assertInitialized();\n    const balance = await this.metaplex\n      .rpc()\n      .getBalance(this.derivedKeypair.publicKey);\n    const transactionFee = this.metaplex.utils().estimateTransactionFee();\n    return this.withdraw(subtractAmounts(balance, transactionFee));\n  }\n\n  close(): void {\n    this.originalSigner = null;\n    this.derivedKeypair = null;\n  }\n\n  async signMessage(message: Uint8Array): Promise<Uint8Array> {\n    return ed25519.sync.sign(message, this.secretKey);\n  }\n\n  async signTransaction(transaction: Transaction): Promise<Transaction> {\n    transaction.partialSign(this);\n\n    return transaction;\n  }\n\n  async signAllTransactions(\n    transactions: Transaction[]\n  ): Promise<Transaction[]> {\n    return Promise.all(\n      transactions.map((transaction) => this.signTransaction(transaction))\n    );\n  }\n\n  verifyMessage(message: Uint8Array, signature: Uint8Array): boolean {\n    return ed25519.sync.verify(message, signature, this.publicKey.toBytes());\n  }\n\n  equals(that: Signer | PublicKey): boolean {\n    if (isSigner(that)) {\n      that = that.publicKey;\n    }\n\n    return this.publicKey.equals(that);\n  }\n\n  assertInitialized(): asserts this is {\n    originalSigner: Signer;\n    derivedKeypair: Keypair;\n  } {\n    if (this.derivedKeypair === null || this.originalSigner === null) {\n      throw new UninitializedDerivedIdentityError();\n    }\n  }\n}\n"],"names":["DerivedIdentityClient","constructor","metaplex","_defineProperty","publicKey","assertInitialized","derivedKeypair","secretKey","originalPublicKey","originalSigner","deriveFrom","message","identity","driver","signature","signMessage","Buffer","from","seeds","sha512","slice","Keypair","fromSeed","fund","amount","system","transferSol","to","payer","withdraw","withdrawAll","balance","rpc","getBalance","transactionFee","utils","estimateTransactionFee","subtractAmounts","close","ed25519","sync","sign","signTransaction","transaction","partialSign","signAllTransactions","transactions","Promise","all","map","verifyMessage","verify","toBytes","equals","that","isSigner","UninitializedDerivedIdentityError"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeA;AACA;AACA;AACO,MAAMA,qBAAN,CAAqE;EAK1EC,WAAW,CAACC,QAAD,EAAqB;AAAA,IAAAC,wCAAA,CAAA,IAAA,EAAA,gBAAA,EAHU,IAGV,CAAA,CAAA;;AAAA,IAAAA,wCAAA,CAAA,IAAA,EAAA,gBAAA,EAFW,IAEX,CAAA,CAAA;;IAC9B,IAAKD,CAAAA,QAAL,GAAgBA,QAAhB,CAAA;AACD,GAAA;;AAEY,EAAA,IAATE,SAAS,GAAc;AACzB,IAAA,IAAA,CAAKC,iBAAL,EAAA,CAAA;IAEA,OAAO,IAAA,CAAKC,cAAL,CAAoBF,SAA3B,CAAA;AACD,GAAA;;AAEY,EAAA,IAATG,SAAS,GAAe;AAC1B,IAAA,IAAA,CAAKF,iBAAL,EAAA,CAAA;IAEA,OAAO,IAAA,CAAKC,cAAL,CAAoBC,SAA3B,CAAA;AACD,GAAA;;AAEoB,EAAA,IAAjBC,iBAAiB,GAAc;AACjC,IAAA,IAAA,CAAKH,iBAAL,EAAA,CAAA;IAEA,OAAO,IAAA,CAAKI,cAAL,CAAoBL,SAA3B,CAAA;AACD,GAAA;;AAEe,EAAA,MAAVM,UAAU,CACdC,OADc,EAEdF,cAFc,EAGd;IACA,IAAKA,CAAAA,cAAL,GAAsBA,cAAc,IAAI,IAAA,CAAKP,QAAL,CAAcU,QAAd,EAAyBC,CAAAA,MAAzB,EAAxC,CAAA;AAEA,IAAA,MAAMC,SAAS,GAAG,MAAM,IAAA,CAAKL,cAAL,CAAoBM,WAApB,CACtBC,aAAM,CAACC,IAAP,CAAYN,OAAZ,CADsB,CAAxB,CAAA;AAIA,IAAA,MAAMO,KAAK,GAAGC,aAAM,CAACL,SAAD,CAAN,CAAkBM,KAAlB,CAAwB,CAAxB,EAA2B,EAA3B,CAAd,CAAA;AAEA,IAAA,IAAA,CAAKd,cAAL,GAAsBe,eAAO,CAACC,QAAR,CAAiBJ,KAAjB,CAAtB,CAAA;AACD,GAAA;;EAEDK,IAAI,CAACC,MAAD,EAAoB;AACtB,IAAA,IAAA,CAAKnB,iBAAL,EAAA,CAAA;AACA,IAAA,OAAO,KAAKH,QAAL,CAAcuB,MAAd,EAAA,CAAuBC,WAAvB,CACL;MACET,IAAI,EAAE,KAAKR,cADb;AAEEkB,MAAAA,EAAE,EAAE,IAAA,CAAKrB,cAAL,CAAoBF,SAF1B;AAGEoB,MAAAA,MAAAA;AAHF,KADK,EAML;AAAEI,MAAAA,KAAK,EAAE,IAAKnB,CAAAA,cAAAA;AAAd,KANK,CAAP,CAAA;AAQD,GAAA;;EAEDoB,QAAQ,CAACL,MAAD,EAAoB;AAC1B,IAAA,IAAA,CAAKnB,iBAAL,EAAA,CAAA;AACA,IAAA,OAAO,KAAKH,QAAL,CAAcuB,MAAd,EAAA,CAAuBC,WAAvB,CACL;MACET,IAAI,EAAE,KAAKX,cADb;AAEEqB,MAAAA,EAAE,EAAE,IAAA,CAAKlB,cAAL,CAAoBL,SAF1B;AAGEoB,MAAAA,MAAAA;AAHF,KADK,EAML;AAAEI,MAAAA,KAAK,EAAE,IAAKtB,CAAAA,cAAAA;AAAd,KANK,CAAP,CAAA;AAQD,GAAA;;AAEgB,EAAA,MAAXwB,WAAW,GAAG;AAClB,IAAA,IAAA,CAAKzB,iBAAL,EAAA,CAAA;AACA,IAAA,MAAM0B,OAAO,GAAG,MAAM,IAAA,CAAK7B,QAAL,CACnB8B,GADmB,EAEnBC,CAAAA,UAFmB,CAER,IAAA,CAAK3B,cAAL,CAAoBF,SAFZ,CAAtB,CAAA;IAGA,MAAM8B,cAAc,GAAG,IAAKhC,CAAAA,QAAL,CAAciC,KAAd,EAAA,CAAsBC,sBAAtB,EAAvB,CAAA;IACA,OAAO,IAAA,CAAKP,QAAL,CAAcQ,sBAAe,CAACN,OAAD,EAAUG,cAAV,CAA7B,CAAP,CAAA;AACD,GAAA;;AAEDI,EAAAA,KAAK,GAAS;IACZ,IAAK7B,CAAAA,cAAL,GAAsB,IAAtB,CAAA;IACA,IAAKH,CAAAA,cAAL,GAAsB,IAAtB,CAAA;AACD,GAAA;;EAEgB,MAAXS,WAAW,CAACJ,OAAD,EAA2C;IAC1D,OAAO4B,kBAAO,CAACC,IAAR,CAAaC,IAAb,CAAkB9B,OAAlB,EAA2B,IAAKJ,CAAAA,SAAhC,CAAP,CAAA;AACD,GAAA;;EAEoB,MAAfmC,eAAe,CAACC,WAAD,EAAiD;IACpEA,WAAW,CAACC,WAAZ,CAAwB,IAAxB,CAAA,CAAA;AAEA,IAAA,OAAOD,WAAP,CAAA;AACD,GAAA;;EAEwB,MAAnBE,mBAAmB,CACvBC,YADuB,EAEC;AACxB,IAAA,OAAOC,OAAO,CAACC,GAAR,CACLF,YAAY,CAACG,GAAb,CAAkBN,WAAD,IAAiB,KAAKD,eAAL,CAAqBC,WAArB,CAAlC,CADK,CAAP,CAAA;AAGD,GAAA;;AAEDO,EAAAA,aAAa,CAACvC,OAAD,EAAsBG,SAAtB,EAAsD;AACjE,IAAA,OAAOyB,kBAAO,CAACC,IAAR,CAAaW,MAAb,CAAoBxC,OAApB,EAA6BG,SAA7B,EAAwC,IAAKV,CAAAA,SAAL,CAAegD,OAAf,EAAxC,CAAP,CAAA;AACD,GAAA;;EAEDC,MAAM,CAACC,IAAD,EAAoC;AACxC,IAAA,IAAIC,eAAQ,CAACD,IAAD,CAAZ,EAAoB;MAClBA,IAAI,GAAGA,IAAI,CAAClD,SAAZ,CAAA;AACD,KAAA;;AAED,IAAA,OAAO,KAAKA,SAAL,CAAeiD,MAAf,CAAsBC,IAAtB,CAAP,CAAA;AACD,GAAA;;AAEDjD,EAAAA,iBAAiB,GAGf;IACA,IAAI,IAAA,CAAKC,cAAL,KAAwB,IAAxB,IAAgC,IAAKG,CAAAA,cAAL,KAAwB,IAA5D,EAAkE;MAChE,MAAM,IAAI+C,wCAAJ,EAAN,CAAA;AACD,KAAA;AACF,GAAA;;AArHyE;;;;"}