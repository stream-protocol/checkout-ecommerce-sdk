{"version":3,"file":"TokenClient.cjs","sources":["../../../../src/plugins/tokenModule/TokenClient.ts"],"sourcesContent":["import {\n  ApproveTokenDelegateAuthorityInput,\n  approveTokenDelegateAuthorityOperation,\n  CreateMintInput,\n  createMintOperation,\n  CreateTokenInput,\n  createTokenOperation,\n  CreateTokenWithMintInput,\n  createTokenWithMintOperation,\n  FindMintByAddressInput,\n  findMintByAddressOperation,\n  FindTokenByAddressInput,\n  findTokenByAddressOperation,\n  FindTokenWithMintByAddressInput,\n  findTokenWithMintByAddressOperation,\n  FindTokenWithMintByMintInput,\n  findTokenWithMintByMintOperation,\n  FreezeTokensInput,\n  freezeTokensOperation,\n  MintTokensInput,\n  mintTokensOperation,\n  RevokeTokenDelegateAuthorityInput,\n  revokeTokenDelegateAuthorityOperation,\n  SendTokensInput,\n  sendTokensOperation,\n  ThawTokensInput,\n  thawTokensOperation,\n} from './operations';\nimport { TokenBuildersClient } from './TokenBuildersClient';\nimport { TokenPdasClient } from './TokenPdasClient';\nimport type { Metaplex } from '@/Metaplex';\nimport { OperationOptions } from '@/types';\n\n/**\n * This is a client for the Token module.\n *\n * It enables us to interact with the SPL Token program in order to\n * create, send, freeze, thaw, and mint tokens.\n *\n * You may access this client via the `tokens()` method of your `Metaplex` instance.\n *\n * ```ts\n * const tokenClient = metaplex.tokens();\n * ```\n *\n * @example\n * You can create a new mint account with an associated token account like so.\n * The owner of this token account will, by default, be the current identity\n * of the metaplex instance.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * ```\n *\n * @group Modules\n */\nexport class TokenClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /**\n   * You may use the `builders()` client to access the\n   * underlying Transaction Builders of this module.\n   *\n   * ```ts\n   * const buildersClient = metaplex.tokens().builders();\n   * ```\n   */\n  builders() {\n    return new TokenBuildersClient(this.metaplex);\n  }\n\n  /**\n   * You may use the `pdas()` client to build PDAs related to this module.\n   *\n   * ```ts\n   * const pdasClient = metaplex.tokens().pdas();\n   * ```\n   */\n  pdas() {\n    return new TokenPdasClient(this.metaplex);\n  }\n\n  // -----------------\n  // Queries\n  // -----------------\n\n  /** {@inheritDoc findMintByAddressOperation} */\n  findMintByAddress(input: FindMintByAddressInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(findMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenByAddressOperation} */\n  findTokenByAddress(\n    input: FindTokenByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByAddressOperation} */\n  findTokenWithMintByAddress(\n    input: FindTokenWithMintByAddressInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByAddressOperation(input), options);\n  }\n\n  /** {@inheritDoc findTokenWithMintByMintOperation} */\n  findTokenWithMintByMint(\n    input: FindTokenWithMintByMintInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(findTokenWithMintByMintOperation(input), options);\n  }\n\n  // -----------------\n  // Create\n  // -----------------\n\n  /** {@inheritDoc createMintOperation} */\n  createMint(input: CreateMintInput = {}, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createMintOperation(input), options);\n  }\n\n  /**\n   * Create a new Token account from the provided input\n   * and returns the newly created `Token` model.\n   */\n  /** {@inheritDoc createTokenOperation} */\n  createToken(input: CreateTokenInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenOperation(input), options);\n  }\n\n  /** {@inheritDoc createTokenWithMintOperation} */\n  createTokenWithMint(\n    input: CreateTokenWithMintInput = {},\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(createTokenWithMintOperation(input), options);\n  }\n\n  // -----------------\n  // Update\n  // -----------------\n\n  /** {@inheritDoc mintTokensOperation} */\n  mint(input: MintTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(mintTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc sendTokensOperation} */\n  send(input: SendTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(sendTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc freezeTokensOperation} */\n  freeze(input: FreezeTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(freezeTokensOperation(input), options);\n  }\n\n  /** {@inheritDoc thawTokensOperation} */\n  thaw(input: ThawTokensInput, options?: OperationOptions) {\n    return this.metaplex\n      .operations()\n      .execute(thawTokensOperation(input), options);\n  }\n\n  // -----------------\n  // Delegate\n  // -----------------\n\n  /** {@inheritDoc approveTokenDelegateAuthorityOperation} */\n  approveDelegateAuthority(\n    input: ApproveTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(approveTokenDelegateAuthorityOperation(input), options);\n  }\n\n  /** {@inheritDoc revokeTokenDelegateAuthorityOperation} */\n  revokeDelegateAuthority(\n    input: RevokeTokenDelegateAuthorityInput,\n    options?: OperationOptions\n  ) {\n    return this.metaplex\n      .operations()\n      .execute(revokeTokenDelegateAuthorityOperation(input), options);\n  }\n}\n"],"names":["TokenClient","constructor","metaplex","builders","TokenBuildersClient","pdas","TokenPdasClient","findMintByAddress","input","options","operations","execute","findMintByAddressOperation","findTokenByAddress","findTokenByAddressOperation","findTokenWithMintByAddress","findTokenWithMintByAddressOperation","findTokenWithMintByMint","findTokenWithMintByMintOperation","createMint","createMintOperation","createToken","createTokenOperation","createTokenWithMint","createTokenWithMintOperation","mint","mintTokensOperation","send","sendTokensOperation","freeze","freezeTokensOperation","thaw","thawTokensOperation","approveDelegateAuthority","approveTokenDelegateAuthorityOperation","revokeDelegateAuthority","revokeTokenDelegateAuthorityOperation"],"mappings":"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"}