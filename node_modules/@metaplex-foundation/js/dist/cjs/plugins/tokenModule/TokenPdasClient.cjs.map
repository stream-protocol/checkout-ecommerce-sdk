{"version":3,"file":"TokenPdasClient.cjs","sources":["../../../../src/plugins/tokenModule/TokenPdasClient.ts"],"sourcesContent":["import type { Metaplex } from '@/Metaplex';\nimport { Pda, Program, PublicKey } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the Token module.\n *\n * @see {@link TokenClient}\n * @group Module Pdas\n */\nexport class TokenPdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the address of the Associated Token Account. */\n  associatedTokenAccount({\n    mint,\n    owner,\n    programs,\n  }: {\n    /** The address of the mint account. */\n    mint: PublicKey;\n    /** The address of the owner account. */\n    owner: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const tokenProgram = this.metaplex.programs().getToken(programs);\n    const associatedTokenProgram = this.metaplex\n      .programs()\n      .getAssociatedToken(programs);\n    return Pda.find(associatedTokenProgram.address, [\n      owner.toBuffer(),\n      tokenProgram.address.toBuffer(),\n      mint.toBuffer(),\n    ]);\n  }\n}\n"],"names":["TokenPdasClient","constructor","metaplex","associatedTokenAccount","mint","owner","programs","tokenProgram","getToken","associatedTokenProgram","getAssociatedToken","Pda","find","address","toBuffer"],"mappings":";;;;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AACO,MAAMA,eAAN,CAAsB;EAC3BC,WAAW,CAAoBC,QAApB,EAAwC;IAAA,IAApBA,CAAAA,QAAoB,GAApBA,QAAoB,CAAA;AAAE,GAAA;AAErD;;;AACAC,EAAAA,sBAAsB,CAAC;IACrBC,IADqB;IAErBC,KAFqB;AAGrBC,IAAAA,QAAAA;AAHqB,GAAD,EAWd;IACN,MAAMC,YAAY,GAAG,IAAA,CAAKL,QAAL,CAAcI,QAAd,EAAyBE,CAAAA,QAAzB,CAAkCF,QAAlC,CAArB,CAAA;IACA,MAAMG,sBAAsB,GAAG,IAAA,CAAKP,QAAL,CAC5BI,QAD4B,EAE5BI,CAAAA,kBAF4B,CAETJ,QAFS,CAA/B,CAAA;IAGA,OAAOK,OAAG,CAACC,IAAJ,CAASH,sBAAsB,CAACI,OAAhC,EAAyC,CAC9CR,KAAK,CAACS,QAAN,EAD8C,EAE9CP,YAAY,CAACM,OAAb,CAAqBC,QAArB,EAF8C,EAG9CV,IAAI,CAACU,QAAL,EAH8C,CAAzC,CAAP,CAAA;AAKD,GAAA;;AAzB0B;;;;"}