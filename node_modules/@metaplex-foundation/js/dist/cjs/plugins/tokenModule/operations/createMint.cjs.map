{"version":3,"file":"createMint.cjs","sources":["../../../../../src/plugins/tokenModule/operations/createMint.ts"],"sourcesContent":["import { createInitializeMintInstruction, MINT_SIZE } from '@solana/spl-token';\nimport { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Mint } from '../models/Mint';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateMintOperation' as const;\n\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const { mint } = await metaplex.tokens().createMint();\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createMintOperation = useOperation<CreateMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateMintOperation = Operation<\n  typeof Key,\n  CreateMintInput,\n  CreateMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateMintInput = {\n  /**\n   * The number of decimal points used to define token amounts.\n   *\n   * @defaultValue `0`\n   */\n  decimals?: number;\n\n  /**\n   * The address of the new mint account as a Signer.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  mint?: Signer;\n\n  /**\n   * The address of the authority that is allowed\n   * to mint new tokens to token accounts.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  mintAuthority?: PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to freeze token accounts.\n   *\n   * @defaultValue Defaults to using the same value as the\n   * `mintAuthority` parameter.\n   */\n  freezeAuthority?: Option<PublicKey>;\n};\n\n/**\n * Create a new Mint account from the provided input\n * and returns the newly created `Mint` model.\n *\n * @group Operations\n * @category Outputs\n */\nexport type CreateMintOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The mint account as a Signer. */\n  mintSigner: Signer;\n\n  /** The created mint account. */\n  mint: Mint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createMintOperationHandler: OperationHandler<CreateMintOperation> =\n  {\n    async handle(\n      operation: CreateMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateMintOutput> {\n      const builder = await createMintBuilder(metaplex, operation.input, scope);\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const mint = await metaplex\n        .tokens()\n        .findMintByAddress({ address: output.mintSigner.publicKey }, scope);\n\n      return { ...output, mint };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateMintBuilderParams = Omit<\n  CreateMintInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateMintBuilderContext = Omit<\n  CreateMintOutput,\n  'response' | 'mint'\n>;\n\n/**\n * Creates a new mint account.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createMint();\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateMintBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateMintBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    decimals = 0,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity().publicKey,\n    freezeAuthority = mintAuthority,\n  } = params;\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n\n  return (\n    TransactionBuilder.make<CreateMintBuilderContext>()\n      .setFeePayer(payer)\n      .setContext({ mintSigner: mint })\n\n      // Create an empty account for the mint.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount(\n            {\n              newAccount: mint,\n              space: MINT_SIZE,\n              program: tokenProgram.address,\n              instructionKey:\n                params.createAccountInstructionKey ?? 'createAccount',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Initialize the mint.\n      .add({\n        instruction: createInitializeMintInstruction(\n          mint.publicKey,\n          decimals,\n          mintAuthority,\n          freezeAuthority,\n          tokenProgram.address\n        ),\n        signers: [mint],\n        key: params.initializeMintInstructionKey ?? 'initializeMint',\n      })\n  );\n};\n"],"names":["Key","createMintOperation","useOperation","createMintOperationHandler","handle","operation","metaplex","scope","builder","createMintBuilder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","mint","tokens","findMintByAddress","address","mintSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","decimals","Keypair","generate","mintAuthority","identity","freezeAuthority","tokenProgram","getToken","TransactionBuilder","make","setFeePayer","setContext","add","system","builders","createAccount","newAccount","space","MINT_SIZE","program","instructionKey","createAccountInstructionKey","instruction","createInitializeMintInstruction","signers","key","initializeMintInstructionKey"],"mappings":"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"}