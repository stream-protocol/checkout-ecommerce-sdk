{"version":3,"file":"mintTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/mintTokens.ts"],"sourcesContent":["import { createMintToInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'MintTokensOperation' as const;\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const mintTokensOperation = useOperation<MintTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type MintTokensOperation = Operation<\n  typeof Key,\n  MintTokensInput,\n  MintTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type MintTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to mint. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the token account to mint to.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the token account to mint to.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * minting the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The authority that is allowed to mint new tokens as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: PublicKey | Signer;\n\n  /**\n   * The signing accounts to use if the mint authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type MintTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const mintTokensOperationHandler: OperationHandler<MintTokensOperation> =\n  {\n    async handle(\n      operation: MintTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<MintTokensOutput> {\n      const { programs, confirmOptions } = scope;\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ??\n        metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: toOwner,\n          programs,\n        });\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await mintTokensBuilder(\n        metaplex,\n        { ...operation.input, toTokenExists: destinationAccountExists },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type MintTokensBuilderParams = Omit<\n  MintTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the provided token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens. */\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * Mint tokens to an account.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .mint({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const mintTokensBuilder = async (\n  metaplex: Metaplex,\n  params: MintTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    mintAuthority = metaplex.identity(),\n    multiSigners = [],\n  } = params;\n\n  const [mintAuthorityPublicKey, signers] = isSigner(mintAuthority)\n    ? [mintAuthority.publicKey, [mintAuthority]]\n    : [mintAuthority, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const destination =\n    toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing(\n            {\n              ...params,\n              mint: mintAddress,\n              owner: toOwner,\n              token: toToken,\n              tokenExists: toTokenExists,\n              tokenVariable: 'toToken',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Mint tokens.\n      .add({\n        instruction: createMintToInstruction(\n          mintAddress,\n          toPublicKey(destination),\n          mintAuthorityPublicKey,\n          amount.basisPoints.toNumber(),\n          multiSigners,\n          tokenProgram.address\n        ),\n        signers,\n        key: params.mintTokensInstructionKey ?? 'mintTokens',\n      })\n  );\n};\n"],"names":["Key","mintTokensOperation","useOperation","mintTokensOperationHandler","handle","operation","metaplex","scope","programs","confirmOptions","mintAddress","toOwner","identity","publicKey","toToken","input","destination","tokens","pdas","associatedTokenAccount","mint","owner","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","mintTokensBuilder","toTokenExists","sendAndConfirm","params","options","payer","getDefaultFeePayer","amount","mintAuthority","multiSigners","mintAuthorityPublicKey","signers","isSigner","tokenProgram","getToken","TransactionBuilder","make","add","builders","createTokenIfMissing","token","tokenExists","tokenVariable","instruction","createMintToInstruction","basisPoints","toNumber","address","key","mintTokensInstructionKey"],"mappings":"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"}