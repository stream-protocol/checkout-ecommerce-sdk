{"version":3,"file":"createTokenWithMint.cjs","sources":["../../../../../src/plugins/tokenModule/operations/createTokenWithMint.ts"],"sourcesContent":["import { Keypair, PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { MintAuthorityMustBeSignerToMintInitialSupplyError } from '../errors';\nimport { TokenWithMint } from '../models/Token';\nimport { Option, TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenWithMintOperation' as const;\n\n/**\n * Creates both mint and token accounts in the same transaction.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createTokenWithMint();\n * const mint = token.mint;\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createTokenWithMintOperation =\n  useOperation<CreateTokenWithMintOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateTokenWithMintOperation = Operation<\n  typeof Key,\n  CreateTokenWithMintInput,\n  CreateTokenWithMintOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateTokenWithMintInput = {\n  /**\n   * The number of decimal points used to define token amounts.\n   *\n   * @defaultValue `0`\n   */\n  decimals?: number;\n\n  /**\n   * The initial amount of tokens to mint to the new token account.\n   *\n   * @defaultValue `0`\n   */\n  initialSupply?: SplTokenAmount;\n\n  /**\n   * The address of the new mint account as a Signer.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  mint?: Signer;\n\n  /**\n   * The address of the authority that is allowed\n   * to mint new tokens to token accounts.\n   *\n   * It may be required as a Signer in order to\n   * mint the initial supply.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  mintAuthority?: Signer | PublicKey;\n\n  /**\n   * The address of the authority that is allowed\n   * to freeze token accounts.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  freezeAuthority?: Option<PublicKey>;\n\n  /**\n   * The address of the owner of the new token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  owner?: PublicKey;\n\n  /**\n   * The token account as a Signer if we want to create\n   * a new token account with a specific address instead of\n   * creating a new associated token account.\n   *\n   * @defaultValue Defaults to creating a new associated token account\n   * using the `mint` and `owner` parameters.\n   */\n  token?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateTokenWithMintOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The new mint account as a Signer. */\n  mintSigner: Signer;\n\n  /**\n   * A model representing the newly created token\n   * account and its associated mint account.\n   */\n  token: TokenWithMint;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createTokenWithMintOperationHandler: OperationHandler<CreateTokenWithMintOperation> =\n  {\n    async handle(\n      operation: CreateTokenWithMintOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateTokenWithMintOutput> {\n      const builder = await createTokenWithMintBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const token = await metaplex.tokens().findTokenWithMintByMint(\n        {\n          mint: output.mintSigner.publicKey,\n          address: output.tokenAddress,\n          addressType: 'token',\n        },\n        scope\n      );\n\n      return { ...output, token };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenWithMintBuilderParams = Omit<\n  CreateTokenWithMintInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the mint account. */\n  createMintAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the mint account. */\n  initializeMintInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the associates token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that mints tokens to the token account. */\n  mintTokensInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateTokenWithMintBuilderContext = {\n  /** The mint account to create as a Signer. */\n  mintSigner: Signer;\n\n  /** The computed address of the token account to create. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * Creates both mint and token accounts in the same transaction.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createTokenWithMint();\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createTokenWithMintBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenWithMintBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateTokenWithMintBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    decimals = 0,\n    initialSupply,\n    mint = Keypair.generate(),\n    mintAuthority = metaplex.identity(),\n    freezeAuthority = metaplex.identity().publicKey,\n    owner = metaplex.identity().publicKey,\n    token,\n  } = params;\n\n  const createMintBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createMint(\n      {\n        decimals,\n        mint,\n        mintAuthority: toPublicKey(mintAuthority),\n        freezeAuthority,\n        createAccountInstructionKey:\n          params.createMintAccountInstructionKey ?? 'createMintAccount',\n        initializeMintInstructionKey:\n          params.initializeMintInstructionKey ?? 'initializeMint',\n      },\n      { programs, payer }\n    );\n\n  const createTokenBuilder = await metaplex\n    .tokens()\n    .builders()\n    .createToken(\n      {\n        mint: mint.publicKey,\n        owner,\n        token,\n        createAssociatedTokenAccountInstructionKey:\n          params.createAssociatedTokenAccountInstructionKey ??\n          'createAssociatedTokenAccount',\n        createAccountInstructionKey:\n          params.createTokenAccountInstructionKey ?? 'createTokenAccount',\n        initializeTokenInstructionKey:\n          params.initializeTokenInstructionKey ?? 'initializeToken',\n      },\n      { payer, programs }\n    );\n\n  const { tokenAddress } = createTokenBuilder.getContext();\n\n  const builder = TransactionBuilder.make<CreateTokenWithMintBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ mintSigner: mint, tokenAddress })\n\n    // Create the Mint account.\n    .add(createMintBuilder)\n\n    // Create the Token account.\n    .add(createTokenBuilder);\n\n  // Potentially mint the initial supply to the token account.\n  if (!!initialSupply) {\n    if (!isSigner(mintAuthority)) {\n      throw new MintAuthorityMustBeSignerToMintInitialSupplyError();\n    }\n\n    builder.add(\n      await metaplex\n        .tokens()\n        .builders()\n        .mint(\n          {\n            mintAddress: mint.publicKey,\n            toToken: tokenAddress,\n            amount: initialSupply,\n            mintAuthority,\n            mintTokensInstructionKey:\n              params.mintTokensInstructionKey ?? 'mintTokens',\n          },\n          { payer, programs }\n        )\n    );\n  }\n\n  return builder;\n};\n"],"names":["Key","createTokenWithMintOperation","useOperation","createTokenWithMintOperationHandler","handle","operation","metaplex","scope","builder","createTokenWithMintBuilder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","token","tokens","findTokenWithMintByMint","mint","mintSigner","publicKey","address","tokenAddress","addressType","params","options","programs","payer","rpc","getDefaultFeePayer","decimals","initialSupply","Keypair","generate","mintAuthority","identity","freezeAuthority","owner","createMintBuilder","builders","createMint","toPublicKey","createAccountInstructionKey","createMintAccountInstructionKey","initializeMintInstructionKey","createTokenBuilder","createToken","createAssociatedTokenAccountInstructionKey","createTokenAccountInstructionKey","initializeTokenInstructionKey","getContext","TransactionBuilder","make","setFeePayer","setContext","add","isSigner","MintAuthorityMustBeSignerToMintInitialSupplyError","mintAddress","toToken","amount","mintTokensInstructionKey"],"mappings":";;;;;;;;;;;AAkBA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,8BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,4BAA4B,GACvCC,sBAAY,CAA+BF,GAA/B,EADP;AAGP;AACA;AACA;AACA;;AAwFA;AACA;AACA;AACA;AACO,MAAMG,mCAAmF,GAC9F;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIsC;AACpC,IAAA,MAAMC,OAAO,GAAG,MAAMC,0BAA0B,CAC9CH,QAD8C,EAE9CD,SAAS,CAACK,KAFoC,EAG9CH,KAH8C,CAAhD,CAAA;AAKAA,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;IAEA,MAAMC,cAAc,GAAGC,8CAAoC,CACzDP,QADyD,EAEzDC,KAAK,CAACK,cAFmD,CAA3D,CAAA;IAIA,MAAME,MAAM,GAAG,MAAMN,OAAO,CAACO,cAAR,CAAuBT,QAAvB,EAAiCM,cAAjC,CAArB,CAAA;AACAL,IAAAA,KAAK,CAACI,eAAN,EAAA,CAAA;IAEA,MAAMK,KAAK,GAAG,MAAMV,QAAQ,CAACW,MAAT,EAAA,CAAkBC,uBAAlB,CAClB;AACEC,MAAAA,IAAI,EAAEL,MAAM,CAACM,UAAP,CAAkBC,SAD1B;MAEEC,OAAO,EAAER,MAAM,CAACS,YAFlB;AAGEC,MAAAA,WAAW,EAAE,OAAA;KAJG,EAMlBjB,KANkB,CAApB,CAAA;IASA,OAAO,EAAE,GAAGO,MAAL;AAAaE,MAAAA,KAAAA;KAApB,CAAA;AACD,GAAA;;AA9BH;AAkCF;AACA;;AAEA;AACA;AACA;AACA;;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMP,0BAA0B,GAAG,OACxCH,QADwC,EAExCmB,MAFwC,EAGxCC,OAAkC,GAAG,EAHG,KAI2B;EACnE,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGtB,QAAQ,CAACuB,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;AACJK,IAAAA,QAAQ,GAAG,CADP;IAEJC,aAFI;AAGJb,IAAAA,IAAI,GAAGc,eAAO,CAACC,QAAR,EAHH;AAIJC,IAAAA,aAAa,GAAG7B,QAAQ,CAAC8B,QAAT,EAJZ;AAKJC,IAAAA,eAAe,GAAG/B,QAAQ,CAAC8B,QAAT,GAAoBf,SALlC;AAMJiB,IAAAA,KAAK,GAAGhC,QAAQ,CAAC8B,QAAT,GAAoBf,SANxB;AAOJL,IAAAA,KAAAA;AAPI,GAAA,GAQFS,MARJ,CAAA;EAUA,MAAMc,iBAAiB,GAAG,MAAMjC,QAAQ,CACrCW,MAD6B,EAE7BuB,CAAAA,QAF6B,EAG7BC,CAAAA,UAH6B,CAI5B;IACEV,QADF;IAEEZ,IAFF;AAGEgB,IAAAA,aAAa,EAAEO,qBAAW,CAACP,aAAD,CAH5B;IAIEE,eAJF;AAKEM,IAAAA,2BAA2B,EACzBlB,MAAM,CAACmB,+BAAP,IAA0C,mBAN9C;AAOEC,IAAAA,4BAA4B,EAC1BpB,MAAM,CAACoB,4BAAP,IAAuC,gBAAA;AAR3C,GAJ4B,EAc5B;IAAElB,QAAF;AAAYC,IAAAA,KAAAA;AAAZ,GAd4B,CAAhC,CAAA;EAiBA,MAAMkB,kBAAkB,GAAG,MAAMxC,QAAQ,CACtCW,MAD8B,EAE9BuB,CAAAA,QAF8B,EAG9BO,CAAAA,WAH8B,CAI7B;IACE5B,IAAI,EAAEA,IAAI,CAACE,SADb;IAEEiB,KAFF;IAGEtB,KAHF;AAIEgC,IAAAA,0CAA0C,EACxCvB,MAAM,CAACuB,0CAAP,IACA,8BANJ;AAOEL,IAAAA,2BAA2B,EACzBlB,MAAM,CAACwB,gCAAP,IAA2C,oBAR/C;AASEC,IAAAA,6BAA6B,EAC3BzB,MAAM,CAACyB,6BAAP,IAAwC,iBAAA;AAV5C,GAJ6B,EAgB7B;IAAEtB,KAAF;AAASD,IAAAA,QAAAA;AAAT,GAhB6B,CAAjC,CAAA;EAmBA,MAAM;AAAEJ,IAAAA,YAAAA;GAAiBuB,GAAAA,kBAAkB,CAACK,UAAnB,EAAzB,CAAA;EAEA,MAAM3C,OAAO,GAAG4C,qCAAkB,CAACC,IAAnB,EACbC,CAAAA,WADa,CACD1B,KADC,CAEb2B,CAAAA,UAFa,CAEF;AAAEnC,IAAAA,UAAU,EAAED,IAAd;AAAoBI,IAAAA,YAAAA;AAApB,GAFE,CAId;GACCiC,GALa,CAKTjB,iBALS,CAOd;AAPc,GAQbiB,GARa,CAQTV,kBARS,CAAhB,CAlDmE;;EA6DnE,IAAI,CAAC,CAACd,aAAN,EAAqB;AACnB,IAAA,IAAI,CAACyB,eAAQ,CAACtB,aAAD,CAAb,EAA8B;MAC5B,MAAM,IAAIuB,wDAAJ,EAAN,CAAA;AACD,KAAA;;IAEDlD,OAAO,CAACgD,GAAR,CACE,MAAMlD,QAAQ,CACXW,MADG,EAEHuB,CAAAA,QAFG,EAGHrB,CAAAA,IAHG,CAIF;MACEwC,WAAW,EAAExC,IAAI,CAACE,SADpB;AAEEuC,MAAAA,OAAO,EAAErC,YAFX;AAGEsC,MAAAA,MAAM,EAAE7B,aAHV;MAIEG,aAJF;AAKE2B,MAAAA,wBAAwB,EACtBrC,MAAM,CAACqC,wBAAP,IAAmC,YAAA;AANvC,KAJE,EAYF;MAAElC,KAAF;AAASD,MAAAA,QAAAA;AAAT,KAZE,CADR,CAAA,CAAA;AAgBD,GAAA;;AAED,EAAA,OAAOnB,OAAP,CAAA;AACD;;;;;;"}