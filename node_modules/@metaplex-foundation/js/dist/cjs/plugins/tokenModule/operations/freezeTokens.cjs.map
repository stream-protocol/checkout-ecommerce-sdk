{"version":3,"file":"freezeTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/freezeTokens.ts"],"sourcesContent":["import { createFreezeAccountInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FreezeTokensOperation' as const;\n\n/**\n * Freezes a token account.\n *\n * ```ts\n * await metaplex.tokens().freeze({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const freezeTokensOperation = useOperation<FreezeTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FreezeTokensOperation = Operation<\n  typeof Key,\n  FreezeTokensInput,\n  FreezeTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FreezeTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /**\n   * The freeze authority as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   */\n  freezeAuthority: PublicKey | Signer;\n\n  /**\n   * The owner of the token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  tokenOwner?: PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `tokenOwner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the freeze authority is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type FreezeTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const freezeTokensOperationHandler: OperationHandler<FreezeTokensOperation> =\n  {\n    async handle(\n      operation: FreezeTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<FreezeTokensOutput> {\n      return freezeTokensBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type FreezeTokensBuilderParams = Omit<\n  FreezeTokensInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that freezes the token account. */\n  instructionKey?: string;\n};\n\n/**\n * Freezes a token account.\n *\n * ```ts\n * const transactionBuilder = metaplex.tokens().builders().freeze({ mintAddress, freezeAuthority });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const freezeTokensBuilder = (\n  metaplex: Metaplex,\n  params: FreezeTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    tokenOwner = metaplex.identity().publicKey,\n    tokenAddress,\n    multiSigners = [],\n    freezeAuthority,\n  } = params;\n\n  const [authorityPublicKey, signers] = isSigner(freezeAuthority)\n    ? [freezeAuthority.publicKey, [freezeAuthority]]\n    : [freezeAuthority, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAddressOrAta =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: tokenOwner,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createFreezeAccountInstruction(\n        tokenAddressOrAta,\n        mintAddress,\n        authorityPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'freezeTokens',\n    });\n};\n"],"names":["Key","freezeTokensOperation","useOperation","freezeTokensOperationHandler","handle","operation","metaplex","scope","freezeTokensBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","tokenOwner","identity","publicKey","tokenAddress","multiSigners","freezeAuthority","authorityPublicKey","signers","isSigner","tokenProgram","getToken","tokenAddressOrAta","tokens","pdas","associatedTokenAccount","mint","owner","TransactionBuilder","make","setFeePayer","add","instruction","createFreezeAccountInstruction","address","key","instructionKey"],"mappings":";;;;;;;;;AAgBA;AACA;;AAEA,MAAMA,GAAG,GAAG,uBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qBAAqB,GAAGC,sBAAY,CAAwBF,GAAxB,EAA1C;AAEP;AACA;AACA;AACA;;AAuDA;AACA;AACA;AACA;AACO,MAAMG,4BAAqE,GAChF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI+B;AAC7B,IAAA,OAAOC,mBAAmB,CACxBF,QADwB,EAExBD,SAAS,CAACI,KAFc,EAGxBF,KAHwB,CAAnB,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,mBAAmB,GAAG,CACjCF,QADiC,EAEjCM,MAFiC,EAGjCC,OAAkC,GAAG,EAHJ,KAIV;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;AAEJC,IAAAA,UAAU,GAAGb,QAAQ,CAACc,QAAT,GAAoBC,SAF7B;IAGJC,YAHI;AAIJC,IAAAA,YAAY,GAAG,EAJX;AAKJC,IAAAA,eAAAA;AALI,GAAA,GAMFZ,MANJ,CAAA;EAQA,MAAM,CAACa,kBAAD,EAAqBC,OAArB,CAAA,GAAgCC,eAAQ,CAACH,eAAD,CAAR,GAClC,CAACA,eAAe,CAACH,SAAjB,EAA4B,CAACG,eAAD,CAA5B,CADkC,GAElC,CAACA,eAAD,EAAkBD,YAAlB,CAFJ,CAAA;EAIA,MAAMK,YAAY,GAAGtB,QAAQ,CAACQ,QAAT,EAAoBe,CAAAA,QAApB,CAA6Bf,QAA7B,CAArB,CAAA;EACA,MAAMgB,iBAAiB,GACrBR,YAAY,IACZhB,QAAQ,CAACyB,MAAT,EAAkBC,CAAAA,IAAlB,EAAyBC,CAAAA,sBAAzB,CAAgD;AAC9CC,IAAAA,IAAI,EAAEhB,WADwC;AAE9CiB,IAAAA,KAAK,EAAEhB,UAFuC;AAG9CL,IAAAA,QAAAA;AAH8C,GAAhD,CAFF,CAAA;EAQA,OAAOsB,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQvB,KADR,CAEJwB,CAAAA,GAFI,CAEA;AACHC,IAAAA,WAAW,EAAEC,uCAA8B,CACzCX,iBADyC,EAEzCZ,WAFyC,EAGzCO,kBAHyC,EAIzCF,YAJyC,EAKzCK,YAAY,CAACc,OAL4B,CADxC;IAQHhB,OARG;AASHiB,IAAAA,GAAG,EAAE/B,MAAM,CAACgC,cAAP,IAAyB,cAAA;AAT3B,GAFA,CAAP,CAAA;AAaD;;;;;;"}