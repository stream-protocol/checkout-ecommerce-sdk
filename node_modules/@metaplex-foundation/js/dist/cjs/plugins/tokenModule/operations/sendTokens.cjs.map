{"version":3,"file":"sendTokens.cjs","sources":["../../../../../src/plugins/tokenModule/operations/sendTokens.ts"],"sourcesContent":["import { createTransferInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  SplTokenAmount,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'SendTokensOperation' as const;\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const sendTokensOperation = useOperation<SendTokensOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type SendTokensOperation = Operation<\n  typeof Key,\n  SendTokensInput,\n  SendTokensOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type SendTokensInput = {\n  /** The address of the mint account. */\n  mintAddress: PublicKey;\n\n  /** The amount of tokens to send. */\n  amount: SplTokenAmount;\n\n  /**\n   * The owner of the destination token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  toOwner?: PublicKey;\n\n  /**\n   * The address of the destination token account.\n   *\n   * Note that this may be required as a `Signer` if the destination\n   * token account does not exist and we need to create it before\n   * sending the tokens.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `toOwner` parameters.\n   */\n  toToken?: PublicKey | Signer;\n\n  /**\n   * The owner of the source token account.\n   *\n   * This may be provided as a PublicKey if one of the following is true:\n   * - the owner of the source token account is a multisig and the\n   *   `fromMultiSigners` parameter is provided.\n   * - we are using a delegate authority to send the tokens and the\n   *   `delegateAuthority` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  fromOwner?: PublicKey | Signer; // Defaults to mx.identity().\n\n  /**\n   * The address of the source token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `fromOwner` parameters.\n   */\n  fromToken?: PublicKey;\n\n  /**\n   * The signing accounts to use if the source token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  fromMultiSigners?: KeypairSigner[];\n\n  /**\n   * The delegate authority of the source token account as a Signer.\n   *\n   * This is required when the owner of the source token account\n   * is provided as a PublicKey as someone needs to authorize\n   * that transfer of tokens.\n   *\n   * @defaultValue Defaults to not using a delegate authority.\n   */\n  delegateAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type SendTokensOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const sendTokensOperationHandler: OperationHandler<SendTokensOperation> =\n  {\n    async handle(\n      operation: SendTokensOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<SendTokensOutput> {\n      const {\n        mintAddress,\n        toOwner = metaplex.identity().publicKey,\n        toToken,\n      } = operation.input;\n\n      const destination =\n        toToken ??\n        metaplex.tokens().pdas().associatedTokenAccount({\n          mint: mintAddress,\n          owner: toOwner,\n          programs: scope.programs,\n        });\n      const destinationAddress = toPublicKey(destination);\n      const destinationAccountExists = await metaplex\n        .rpc()\n        .accountExists(destinationAddress);\n      scope.throwIfCanceled();\n\n      const builder = await sendTokensBuilder(\n        metaplex,\n        { ...operation.input, toTokenExists: destinationAccountExists },\n        scope\n      );\n      scope.throwIfCanceled();\n\n      return builder.sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type SendTokensBuilderParams = Omit<\n  SendTokensInput,\n  'confirmOptions'\n> & {\n  /**\n   * Whether or not the receiving token account already exists.\n   * If `false`, we'll add another instruction to create it.\n   *\n   * @defaultValue `true`\n   */\n  toTokenExists?: boolean;\n\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the token account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n\n  /** A key to distinguish the instruction that transfers the tokens. */\n  transferTokensInstructionKey?: string;\n};\n\n/**\n * Send tokens from one account to another.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .tokens()\n *   .builders()\n *   .send({\n *     mintAddress,\n *     toOwner,\n *     amount: token(100),\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const sendTokensBuilder = async (\n  metaplex: Metaplex,\n  params: SendTokensBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    amount,\n    toOwner = metaplex.identity().publicKey,\n    toToken,\n    toTokenExists = true,\n    fromOwner = metaplex.identity(),\n    fromToken,\n    fromMultiSigners = [],\n    delegateAuthority,\n  } = params;\n\n  const [fromOwnerPublicKey, signers] = isSigner(fromOwner)\n    ? [fromOwner.publicKey, [fromOwner]]\n    : [fromOwner, [delegateAuthority, ...fromMultiSigners].filter(isSigner)];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const source =\n    fromToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: fromOwnerPublicKey,\n      programs,\n    });\n  const destination =\n    toToken ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: toOwner,\n      programs,\n    });\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Create token account if missing.\n      .add(\n        await metaplex\n          .tokens()\n          .builders()\n          .createTokenIfMissing(\n            {\n              ...params,\n              mint: mintAddress,\n              owner: toOwner,\n              token: toToken,\n              tokenExists: toTokenExists,\n              tokenVariable: 'toToken',\n            },\n            { programs, payer }\n          )\n      )\n\n      // Transfer tokens.\n      .add({\n        instruction: createTransferInstruction(\n          source,\n          toPublicKey(destination),\n          delegateAuthority ? delegateAuthority.publicKey : fromOwnerPublicKey,\n          amount.basisPoints.toNumber(),\n          fromMultiSigners,\n          tokenProgram.address\n        ),\n        signers,\n        key: params.transferTokensInstructionKey ?? 'transferTokens',\n      })\n  );\n};\n"],"names":["Key","sendTokensOperation","useOperation","sendTokensOperationHandler","handle","operation","metaplex","scope","mintAddress","toOwner","identity","publicKey","toToken","input","destination","tokens","pdas","associatedTokenAccount","mint","owner","programs","destinationAddress","toPublicKey","destinationAccountExists","rpc","accountExists","throwIfCanceled","builder","sendTokensBuilder","toTokenExists","sendAndConfirm","confirmOptions","params","options","payer","getDefaultFeePayer","amount","fromOwner","fromToken","fromMultiSigners","delegateAuthority","fromOwnerPublicKey","signers","isSigner","filter","tokenProgram","getToken","source","TransactionBuilder","make","setFeePayer","add","builders","createTokenIfMissing","token","tokenExists","tokenVariable","instruction","createTransferInstruction","basisPoints","toNumber","address","key","transferTokensInstructionKey"],"mappings":"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"}