{"version":3,"file":"createToken.cjs","sources":["../../../../../src/plugins/tokenModule/operations/createToken.ts"],"sourcesContent":["import {\n  ACCOUNT_SIZE,\n  createAssociatedTokenAccountInstruction,\n  createInitializeAccountInstruction,\n} from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Token } from '../models/Token';\nimport { ExpectedSignerError } from '@/errors';\nimport type { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  toPublicKey,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateTokenOperation' as const;\n\n/**\n * Creates a new token account.\n *\n * ```ts\n * const { token } = await metaplex.tokens().createToken({ mint });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createTokenOperation = useOperation<CreateTokenOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateTokenOperation = Operation<\n  typeof Key,\n  CreateTokenInput,\n  CreateTokenOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateTokenInput = {\n  /**\n   * The address of the mint account associated\n   * with the new token account.\n   */\n  mint: PublicKey;\n\n  /**\n   * The address of the owner of the new token account.\n   *\n   * @defaultValue `metaplex.identity().publicKey`\n   */\n  owner?: PublicKey;\n\n  /**\n   * The token account as a Signer if we want to create\n   * a new token account with a specific address instead of\n   * creating a new associated token account.\n   *\n   * @defaultValue Defaults to creating a new associated token account\n   * using the `mint` and `owner` parameters.\n   */\n  token?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateTokenOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The newly created token account. */\n  token: Token;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createTokenOperationHandler: OperationHandler<CreateTokenOperation> =\n  {\n    async handle(\n      operation: CreateTokenOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CreateTokenOutput> {\n      const builder = await createTokenBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const token = await metaplex\n        .tokens()\n        .findTokenByAddress({ address: output.tokenAddress }, scope);\n\n      return { ...output, token };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenBuilderParams = Omit<\n  CreateTokenInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that creates the associated token account. */\n  createAssociatedTokenAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that creates the account. */\n  createAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the token account. */\n  initializeTokenInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateTokenBuilderContext = {\n  /** The computed address of the token account to create. */\n  tokenAddress: PublicKey;\n};\n\n/**\n * Creates a new token account.\n *\n * ```ts\n * const transactionBuilder = await metaplex.tokens().builders().createToken({ mint });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createTokenBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { mint, owner = metaplex.identity().publicKey, token } = params;\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const associatedTokenProgram = metaplex\n    .programs()\n    .getAssociatedToken(programs);\n\n  const isAssociatedToken = token === undefined;\n  const builder =\n    TransactionBuilder.make<CreateTokenBuilderContext>().setFeePayer(payer);\n\n  if (isAssociatedToken) {\n    const associatedTokenAddress = metaplex\n      .tokens()\n      .pdas()\n      .associatedTokenAccount({ mint, owner, programs });\n\n    return (\n      builder\n        .setContext({ tokenAddress: associatedTokenAddress })\n\n        // Create an associated token account.\n        .add({\n          instruction: createAssociatedTokenAccountInstruction(\n            payer.publicKey,\n            associatedTokenAddress,\n            owner,\n            mint,\n            tokenProgram.address,\n            associatedTokenProgram.address\n          ),\n          signers: [payer],\n          key:\n            params.createAssociatedTokenAccountInstructionKey ??\n            'createAssociatedTokenAccount',\n        })\n    );\n  }\n\n  return (\n    builder\n      .setFeePayer(payer)\n      .setContext({ tokenAddress: token.publicKey })\n\n      // Create an empty account for the Token.\n      .add(\n        await metaplex\n          .system()\n          .builders()\n          .createAccount(\n            {\n              newAccount: token,\n              space: ACCOUNT_SIZE,\n              program: tokenProgram.address,\n              instructionKey:\n                params.createAccountInstructionKey ?? 'createAccount',\n            },\n            { payer, programs }\n          )\n      )\n\n      // Initialize the Token.\n      .add({\n        instruction: createInitializeAccountInstruction(\n          token.publicKey,\n          mint,\n          owner,\n          tokenProgram.address\n        ),\n        signers: [token],\n        key: params.initializeTokenInstructionKey ?? 'initializeToken',\n      })\n  );\n};\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateTokenIfMissingBuilderParams = Omit<\n  CreateTokenBuilderParams,\n  'token'\n> & {\n  /**\n   * The token account to create if it does not exist.\n   * Here, it may be passed as a PublicKey if and only\n   * if it already exists.\n   */\n  token?: PublicKey | Signer;\n\n  /**\n   * Whether or not the token account exists.\n   *\n   * @defaultValue `true`\n   */\n  tokenExists?: boolean;\n\n  /**\n   * The name of the token variable on the operation that uses\n   * this helper token builder.\n   *\n   * @defaultValue `\"token\"`\n   */\n  tokenVariable?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Constructors\n * @internal\n */\nexport const createTokenIfMissingBuilder = async (\n  metaplex: Metaplex,\n  params: CreateTokenIfMissingBuilderParams,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateTokenBuilderContext>> => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mint,\n    owner = metaplex.identity().publicKey,\n    token,\n    tokenExists = true,\n    tokenVariable = 'token',\n  } = params;\n\n  const destination =\n    token ??\n    metaplex.tokens().pdas().associatedTokenAccount({ mint, owner, programs });\n  const destinationAddress = toPublicKey(destination);\n  const builder = TransactionBuilder.make<CreateTokenBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ tokenAddress: destinationAddress });\n\n  if (tokenExists) {\n    return builder;\n  }\n\n  // When creating a token account, ensure it is passed as a Signer.\n  if (token && !isSigner(token)) {\n    throw new ExpectedSignerError(tokenVariable, 'PublicKey', {\n      problemSuffix:\n        `The provided \"${tokenVariable}\" account ` +\n        `at address [${destinationAddress}] does not exist. ` +\n        `Therefore, it needs to be created and passed as a Signer.`,\n      solution:\n        `If you want to create the \"${tokenVariable}\" account, then please pass it as a Signer. ` +\n        `Alternatively, you can pass the owner account as a PublicKey instead to ` +\n        `use (or create) an associated token account.`,\n    });\n  }\n\n  return builder.add(\n    await metaplex\n      .tokens()\n      .builders()\n      .createToken(\n        {\n          ...params,\n          mint,\n          owner,\n          token,\n        },\n        { programs, payer }\n      )\n  );\n};\n"],"names":["Key","createTokenOperation","useOperation","createTokenOperationHandler","handle","operation","metaplex","scope","builder","createTokenBuilder","input","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","token","tokens","findTokenByAddress","address","tokenAddress","params","options","programs","payer","rpc","getDefaultFeePayer","mint","owner","identity","publicKey","tokenProgram","getToken","associatedTokenProgram","getAssociatedToken","isAssociatedToken","undefined","TransactionBuilder","make","setFeePayer","associatedTokenAddress","pdas","associatedTokenAccount","setContext","add","instruction","createAssociatedTokenAccountInstruction","signers","key","createAssociatedTokenAccountInstructionKey","system","builders","createAccount","newAccount","space","ACCOUNT_SIZE","program","instructionKey","createAccountInstructionKey","createInitializeAccountInstruction","initializeTokenInstructionKey","createTokenIfMissingBuilder","tokenExists","tokenVariable","destination","destinationAddress","toPublicKey","isSigner","ExpectedSignerError","problemSuffix","solution","createToken"],"mappings":"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"}