{"version":3,"file":"revokeTokenDelegateAuthority.cjs","sources":["../../../../../src/plugins/tokenModule/operations/revokeTokenDelegateAuthority.ts"],"sourcesContent":["import { createRevokeInstruction } from '@solana/spl-token';\nimport { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  isSigner,\n  KeypairSigner,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'RevokeTokenDelegateAuthorityOperation' as const;\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .revokeDelegateAuthority({ mintAddress };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityOperation =\n  useOperation<RevokeTokenDelegateAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type RevokeTokenDelegateAuthorityOperation = Operation<\n  typeof Key,\n  RevokeTokenDelegateAuthorityInput,\n  RevokeTokenDelegateAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityInput = {\n  mintAddress: PublicKey;\n\n  /**\n   * The owner of the token account as a Signer.\n   *\n   * This may be provided as a PublicKey if and only if\n   * the `multiSigners` parameter is provided.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  owner?: Signer | PublicKey;\n\n  /**\n   * The address of the token account.\n   *\n   * @defaultValue Defaults to using the associated token account\n   * from the `mintAddress` and `owner` parameters.\n   */\n  tokenAddress?: PublicKey;\n\n  /**\n   * The signing accounts to use if the token owner is a multisig.\n   *\n   * @defaultValue `[]`\n   */\n  multiSigners?: KeypairSigner[];\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type RevokeTokenDelegateAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const revokeTokenDelegateAuthorityOperationHandler: OperationHandler<RevokeTokenDelegateAuthorityOperation> =\n  {\n    handle: async (\n      operation: RevokeTokenDelegateAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<RevokeTokenDelegateAuthorityOutput> => {\n      return revokeTokenDelegateAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type RevokeTokenDelegateAuthorityBuilderParams = Omit<\n  RevokeTokenDelegateAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that revokes the delegated authority. */\n  instructionKey?: string;\n};\n\n/**\n * Revokes the current delegate authority for a token account.\n *\n * ```ts\n * await metaplex\n *   .tokens()\n *   .builders()\n *   .revokeDelegateAuthority({ mintAddress });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const revokeTokenDelegateAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: RevokeTokenDelegateAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    mintAddress,\n    owner = metaplex.identity(),\n    tokenAddress,\n    multiSigners = [],\n  } = params;\n\n  const [ownerPublicKey, signers] = isSigner(owner)\n    ? [owner.publicKey, [owner]]\n    : [owner, multiSigners];\n\n  const tokenProgram = metaplex.programs().getToken(programs);\n  const tokenAccount =\n    tokenAddress ??\n    metaplex.tokens().pdas().associatedTokenAccount({\n      mint: mintAddress,\n      owner: ownerPublicKey,\n      programs,\n    });\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createRevokeInstruction(\n        tokenAccount,\n        ownerPublicKey,\n        multiSigners,\n        tokenProgram.address\n      ),\n      signers,\n      key: params.instructionKey ?? 'revokeDelegateAuthority',\n    });\n};\n"],"names":["Key","revokeTokenDelegateAuthorityOperation","useOperation","revokeTokenDelegateAuthorityOperationHandler","handle","operation","metaplex","scope","revokeTokenDelegateAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","mintAddress","owner","identity","tokenAddress","multiSigners","ownerPublicKey","signers","isSigner","publicKey","tokenProgram","getToken","tokenAccount","tokens","pdas","associatedTokenAccount","mint","TransactionBuilder","make","setFeePayer","add","instruction","createRevokeInstruction","address","key","instructionKey"],"mappings":";;;;;;;;;AAgBA;AACA;;AAEA,MAAMA,GAAG,GAAG,uCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,qCAAqC,GAChDC,sBAAY,CAAwCF,GAAxC,EADP;AAGP;AACA;AACA;AACA;;AAiDA;AACA;AACA;AACA;AACO,MAAMG,4CAAqG,GAChH;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAI0C;AAChD,IAAA,OAAOC,mCAAmC,CACxCF,QADwC,EAExCD,SAAS,CAACI,KAF8B,EAGxCF,KAHwC,CAAnC,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,mCAAmC,GAAG,CACjDF,QADiD,EAEjDM,MAFiD,EAGjDC,OAAkC,GAAG,EAHY,KAI1B;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,WADI;AAEJC,IAAAA,KAAK,GAAGb,QAAQ,CAACc,QAAT,EAFJ;IAGJC,YAHI;AAIJC,IAAAA,YAAY,GAAG,EAAA;AAJX,GAAA,GAKFV,MALJ,CAAA;EAOA,MAAM,CAACW,cAAD,EAAiBC,OAAjB,CAAA,GAA4BC,eAAQ,CAACN,KAAD,CAAR,GAC9B,CAACA,KAAK,CAACO,SAAP,EAAkB,CAACP,KAAD,CAAlB,CAD8B,GAE9B,CAACA,KAAD,EAAQG,YAAR,CAFJ,CAAA;EAIA,MAAMK,YAAY,GAAGrB,QAAQ,CAACQ,QAAT,EAAoBc,CAAAA,QAApB,CAA6Bd,QAA7B,CAArB,CAAA;EACA,MAAMe,YAAY,GAChBR,YAAY,IACZf,QAAQ,CAACwB,MAAT,EAAkBC,CAAAA,IAAlB,EAAyBC,CAAAA,sBAAzB,CAAgD;AAC9CC,IAAAA,IAAI,EAAEf,WADwC;AAE9CC,IAAAA,KAAK,EAAEI,cAFuC;AAG9CT,IAAAA,QAAAA;AAH8C,GAAhD,CAFF,CAAA;EAQA,OAAOoB,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQrB,KADR,CAEJsB,CAAAA,GAFI,CAEA;AACHC,IAAAA,WAAW,EAAEC,gCAAuB,CAClCV,YADkC,EAElCN,cAFkC,EAGlCD,YAHkC,EAIlCK,YAAY,CAACa,OAJqB,CADjC;IAOHhB,OAPG;AAQHiB,IAAAA,GAAG,EAAE7B,MAAM,CAAC8B,cAAP,IAAyB,yBAAA;AAR3B,GAFA,CAAP,CAAA;AAYD;;;;;;"}