{"version":3,"file":"findCandyGuardByAddress.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/findCandyGuardByAddress.ts"],"sourcesContent":["import { PublicKey } from '@solana/web3.js';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport { CandyGuard, toCandyGuard } from '../models';\nimport {\n  assertAccountExists,\n  Operation,\n  OperationHandler,\n  OperationScope,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'FindCandyGuardByAddressOperation' as const;\n\n/**\n * Find an existing Candy Guard by its address.\n *\n * ```ts\n * const candyGuard = await metaplex\n *   .candyMachines()\n *   .findCandyGuardbyAddress({ address };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const findCandyGuardByAddressOperation =\n  _findCandyGuardByAddressOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _findCandyGuardByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: FindCandyGuardByAddressInput): FindCandyGuardByAddressOperation<T> {\n  return { key: Key, input };\n}\n_findCandyGuardByAddressOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type FindCandyGuardByAddressOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<typeof Key, FindCandyGuardByAddressInput, CandyGuard<T>>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type FindCandyGuardByAddressInput = {\n  /** The Candy Guard address. */\n  address: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const findCandyGuardByAddressOperationHandler: OperationHandler<FindCandyGuardByAddressOperation> =\n  {\n    handle: async <T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: FindCandyGuardByAddressOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<CandyGuard<T>> => {\n      const { address } = operation.input;\n      const account = await metaplex\n        .rpc()\n        .getAccount(address, scope.commitment);\n      assertAccountExists(account);\n\n      return toCandyGuard<T>(account, metaplex);\n    },\n  };\n"],"names":["Key","findCandyGuardByAddressOperation","_findCandyGuardByAddressOperation","input","key","findCandyGuardByAddressOperationHandler","handle","operation","metaplex","scope","address","account","rpc","getAccount","commitment","assertAccountExists","toCandyGuard"],"mappings":";;;;;;;AAWA;AACA;AACA;AAEA,MAAMA,GAAG,GAAG,kCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACaC,MAAAA,gCAAgC,GAC3CC;;AAEF,SAASA,iCAAT,CAEEC,KAFF,EAE4E;EAC1E,OAAO;AAAEC,IAAAA,GAAG,EAAEJ,GAAP;AAAYG,IAAAA,KAAAA;GAAnB,CAAA;AACD,CAAA;;AACDD,iCAAiC,CAACE,GAAlC,GAAwCJ,GAAxC,CAAA;AAEA;AACA;AACA;AACA;;AAcA;AACA;AACA;AACA;AACO,MAAMK,uCAA2F,GACtG;AACEC,EAAAA,MAAM,EAAE,OACNC,SADM,EAENC,QAFM,EAGNC,KAHM,KAIqB;IAC3B,MAAM;AAAEC,MAAAA,OAAAA;KAAYH,GAAAA,SAAS,CAACJ,KAA9B,CAAA;AACA,IAAA,MAAMQ,OAAO,GAAG,MAAMH,QAAQ,CAC3BI,GADmB,EAAA,CAEnBC,UAFmB,CAERH,OAFQ,EAECD,KAAK,CAACK,UAFP,CAAtB,CAAA;IAGAC,2BAAmB,CAACJ,OAAD,CAAnB,CAAA;AAEA,IAAA,OAAOK,uBAAY,CAAIL,OAAJ,EAAaH,QAAb,CAAnB,CAAA;AACD,GAAA;AAbH;;;;;"}