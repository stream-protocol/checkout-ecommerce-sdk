{"version":3,"file":"wrapCandyGuard.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/wrapCandyGuard.ts"],"sourcesContent":["import { createWrapInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'WrapCandyGuardOperation' as const;\n\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const wrapCandyGuardOperation =\n  useOperation<WrapCandyGuardOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type WrapCandyGuardOperation = Operation<\n  typeof Key,\n  WrapCandyGuardInput,\n  WrapCandyGuardOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type WrapCandyGuardInput = {\n  /** The address of the Candy Machine to wrap. */\n  candyMachine: PublicKey;\n\n  /** The address of the Candy Guard to wrap the Candy Machine with. */\n  candyGuard: PublicKey;\n\n  /**\n   * The authority of the Candy Machine as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyMachineAuthority?: Signer;\n\n  /**\n   * The authority of the Candy Guard as a Signer.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  candyGuardAuthority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type WrapCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const wrapCandyGuardOperationHandler: OperationHandler<WrapCandyGuardOperation> =\n  {\n    async handle(\n      operation: WrapCandyGuardOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<WrapCandyGuardOutput> {\n      return wrapCandyGuardBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type WrapCandyGuardBuilderParams = Omit<\n  WrapCandyGuardInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that wraps the Candy Machine in a Candy Guard. */\n  wrapCandyGuardInstructionKey?: string;\n};\n\n/**\n * Wraps the given Candy Machine in a Candy Guard.\n *\n * This makes the Candy Guard the mint authority for the Candy Machine\n * which means all minting will have to go through the Candy Guard.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .wrapCandyGuard({\n *     candyMachine,\n *     candyGuard,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const wrapCandyGuardBuilder = (\n  metaplex: Metaplex,\n  params: WrapCandyGuardBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyGuard,\n    candyGuardAuthority = metaplex.identity(),\n    candyMachine,\n    candyMachineAuthority = metaplex.identity(),\n  } = params;\n\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWrapInstruction(\n        {\n          candyGuard,\n          authority: candyGuardAuthority.publicKey,\n          candyMachine,\n          candyMachineProgram: candyMachineProgram.address,\n          candyMachineAuthority: candyMachineAuthority.publicKey,\n        },\n        candyGuardProgram.address\n      ),\n      signers: [candyGuardAuthority, candyMachineAuthority],\n      key: params.wrapCandyGuardInstructionKey ?? 'wrapCandyGuard',\n    });\n};\n"],"names":["Key","wrapCandyGuardOperation","useOperation","wrapCandyGuardOperationHandler","handle","operation","metaplex","scope","wrapCandyGuardBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","candyGuardAuthority","identity","candyMachine","candyMachineAuthority","candyMachineProgram","getCandyMachine","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createWrapInstruction","authority","publicKey","address","signers","key","wrapCandyGuardInstructionKey"],"mappings":";;;;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,yBAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,uBAAuB,GAClCC,sBAAY,CAA0BF,GAA1B,EADP;AAGP;AACA;AACA;AACA;;AA0CA;AACA;AACA;AACA;AACO,MAAMG,8BAAyE,GACpF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAIiC;AAC/B,IAAA,OAAOC,qBAAqB,CAC1BF,QAD0B,EAE1BD,SAAS,CAACI,KAFgB,EAG1BF,KAH0B,CAArB,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,qBAAqB,GAAG,CACnCF,QADmC,EAEnCM,MAFmC,EAGnCC,OAAkC,GAAG,EAHF,KAIZ;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IACJK,UADI;AAEJC,IAAAA,mBAAmB,GAAGb,QAAQ,CAACc,QAAT,EAFlB;IAGJC,YAHI;IAIJC,qBAAqB,GAAGhB,QAAQ,CAACc,QAAT,EAAA;AAJpB,GAAA,GAKFR,MALJ,CAAA;EAOA,MAAMW,mBAAmB,GAAGjB,QAAQ,CAACQ,QAAT,EAAoBU,CAAAA,eAApB,CAAoCV,QAApC,CAA5B,CAAA;EACA,MAAMW,iBAAiB,GAAGnB,QAAQ,CAACQ,QAAT,EAAoBY,CAAAA,aAApB,CAAkCZ,QAAlC,CAA1B,CAAA;EAEA,OAAOa,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQd,KADR,CAEJe,CAAAA,GAFI,CAEA;IACHC,WAAW,EAAEC,mCAAqB,CAChC;MACEd,UADF;MAEEe,SAAS,EAAEd,mBAAmB,CAACe,SAFjC;MAGEb,YAHF;MAIEE,mBAAmB,EAAEA,mBAAmB,CAACY,OAJ3C;MAKEb,qBAAqB,EAAEA,qBAAqB,CAACY,SAAAA;AAL/C,KADgC,EAQhCT,iBAAiB,CAACU,OARc,CAD/B;AAWHC,IAAAA,OAAO,EAAE,CAACjB,mBAAD,EAAsBG,qBAAtB,CAXN;AAYHe,IAAAA,GAAG,EAAEzB,MAAM,CAAC0B,4BAAP,IAAuC,gBAAA;AAZzC,GAFA,CAAP,CAAA;AAgBD;;;;;;"}