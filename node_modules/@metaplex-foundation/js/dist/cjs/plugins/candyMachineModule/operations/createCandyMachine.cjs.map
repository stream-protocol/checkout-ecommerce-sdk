{"version":3,"file":"createCandyMachine.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/createCandyMachine.ts"],"sourcesContent":["import { createInitializeInstruction } from '@metaplex-foundation/mpl-candy-machine-core';\nimport { Keypair } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { CandyGuardsSettings, DefaultCandyGuardSettings } from '../guards';\nimport {\n  CandyMachine,\n  CandyMachineConfigLineSettings,\n  CandyMachineHiddenSettings,\n  toCandyMachineData,\n  getCandyMachineSize,\n} from '../models';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\nimport {\n  BigNumber,\n  Creator,\n  isSigner,\n  makeConfirmOptionsFinalizedOnMainnet,\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  toBigNumber,\n  toPublicKey,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\nimport { ExpectedSignerError } from '@/errors';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'CreateCandyMachineOperation' as const;\n\n/**\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const { candyMachine } = await metaplex\n *    .candyMachines()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const createCandyMachineOperation = _createCandyMachineOperation;\n// eslint-disable-next-line @typescript-eslint/naming-convention\nfunction _createCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(input: CreateCandyMachineInput<T>): CreateCandyMachineOperation<T> {\n  return { key: Key, input };\n}\n_createCandyMachineOperation.key = Key;\n\n/**\n * @group Operations\n * @category Types\n */\nexport type CreateCandyMachineOperation<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Operation<\n  typeof Key,\n  CreateCandyMachineInput<T>,\n  CreateCandyMachineOutput<T>\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type CreateCandyMachineInput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /**\n   * The Candy Machine to create as a Signer.\n   * This expects a brand new Keypair with no associated account.\n   *\n   * @defaultValue `Keypair.generate()`\n   */\n  candyMachine?: Signer;\n\n  /**\n   * Refers to the authority that is allowed to manage the Candy Machine.\n   * This includes updating its data, authorities, inserting items, etc.\n   *\n   * By default, it is required as a Signer in order to create and wrap its\n   * Candy Guard. However, when `withoutCandyGuard` is set to `true`, it\n   * may be provided as a PublicKey instead.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: PublicKey | Signer;\n\n  /**\n   * The Collection NFT that all NFTs minted from this Candy Machine should be part of.\n   * This must include its address and the update authority as a Signer.\n   *\n   * @example\n   * If you do not have a Collection NFT yet, you can create one using\n   * the `create` method of the NFT module and setting `isCollection` to `true`.\n   *\n   * ```ts\n   * const { nft } = await metaplex.\n   *   .nfts()\n   *   .create({ isCollection: true, name: 'My Collection', ... });\n   * ```\n   *\n   * You can now use `nft.address` as the address of the collection and\n   * provide the update authority as a signer, which by default, should\n   * be `metaplex.identity()`.\n   */\n  collection: {\n    address: PublicKey;\n    updateAuthority: Signer;\n  };\n\n  /**\n   * The royalties that should be set on minted NFTs in basis points.\n   *\n   * @example\n   * ```ts\n   * { sellerFeeBasisPoints: 250 } // For 2.5% royalties.\n   * ```\n   */\n  sellerFeeBasisPoints: number;\n\n  /**\n   * The total number of items availble in the Candy Machine, minted or not.\n   *\n   * @example\n   * ```ts\n   * { itemsAvailable: toBigNumber(1000) } // For 1000 items.\n   * ```\n   */\n  itemsAvailable: BigNumber;\n\n  /**\n   * Settings related to the Candy Machine's items.\n   *\n   * These can either be inserted manually within the Candy Machine or\n   * they can be infered from a set of hidden settings.\n   *\n   * - If `type` is `hidden`, the Candy Machine is using hidden settings.\n   * - If `type` is `configLines`, the Candy Machine is using config line settings.\n   *\n   * @defaultValue\n   * Defaults to using `configLines` settings with:\n   * - No prefixes.\n   * - A length of 32 for the name.\n   * - A length of 200 for the URI.\n   * - Random mint ordering.\n   *\n   * ```ts\n   * {\n   *   itemSettings: {\n   *     type: 'configLines',\n   *     prefixName: '',\n   *     nameLength: 32,\n   *     prefixUri: '',\n   *     uriLength: 200,\n   *     isSequential: false,\n   *   }\n   * }\n   * ```\n   *\n   * @see {@link CandyMachineHiddenSettings}\n   * @see {@link CandyMachineConfigLineSettings}\n   */\n  itemSettings?: CandyMachineHiddenSettings | CandyMachineConfigLineSettings;\n\n  /**\n   * The symbol to use when minting NFTs (e.g. \"MYPROJECT\")\n   *\n   * This can be any string up to 10 bytes and can be made optional\n   * by providing an empty string.\n   *\n   * @defaultValue `\"\"`\n   */\n  symbol?: string;\n\n  /**\n   * The maximum number of editions that can be printed from the\n   * minted NFTs.\n   *\n   * For most use cases, you'd want to set this to `0` to prevent\n   * minted NFTs to be printed multiple times.\n   *\n   * Note that you cannot set this to `null` which means unlimited editions\n   * are not supported by the Candy Machine program.\n   *\n   * @defaultValue `toBigNumber(0)`\n   */\n  maxEditionSupply?: BigNumber;\n\n  /**\n   * Whether the minted NFTs should be mutable or not.\n   *\n   * We recommend setting this to `true` unless you have a specific reason.\n   * You can always make NFTs immutable in the future but you cannot make\n   * immutable NFTs mutable ever again.\n   *\n   * @defaultValue `true`\n   */\n  isMutable?: boolean;\n\n  /**\n   * Array of creators that should be set on minted NFTs.\n   *\n   * @see {@link Creator}\n   *\n   * @defaultValue\n   * Defaults to using the `authority` parameter as the only creator.\n   *\n   * ```ts\n   * [{ address: authority, share: 100 }]\n   * ```\n   */\n  creators?: Omit<Creator, 'verified'>[];\n\n  /**\n   * The settings of all guards we wish to activate.\n   *\n   * Any guard not provided or set to `null` will be disabled.\n   *\n   * This parameter is ignored if `withoutCandyGuard` is set to `true`.\n   *\n   * @defaultValue `{}`, i.e. no guards are activated.\n   */\n  guards?: Partial<T>;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements â€” i.e. guards.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * For each group, any guard not provided or set to `null` will be disabled.\n   *\n   * This parameter is ignored if `withoutCandyGuard` is set to `true`.\n   *\n   * @defaultValue `[]`, i.e. no groups are created.\n   */\n  groups?: { label: string; guards: Partial<T> }[];\n\n  /**\n   * Whether to skip the part of this operation that creates a Candy Guard\n   * for the new Candy Machine. When set to `true`, no Candy Guard will be\n   * created for the Candy Machine.\n   *\n   * @defaultValue `false`\n   */\n  withoutCandyGuard?: boolean;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type CreateCandyMachineOutput<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n\n  /** The Candy Machine that was created. */\n  candyMachine: CandyMachine<T>;\n\n  /** The created Candy Machine has a Signer. */\n  candyMachineSigner: Signer;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const createCandyMachineOperationHandler: OperationHandler<CreateCandyMachineOperation> =\n  {\n    async handle<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n      operation: CreateCandyMachineOperation<T>,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ) {\n      const builder = await createCandyMachineBuilder(\n        metaplex,\n        operation.input,\n        scope\n      );\n      scope.throwIfCanceled();\n\n      const confirmOptions = makeConfirmOptionsFinalizedOnMainnet(\n        metaplex,\n        scope.confirmOptions\n      );\n      const output = await builder.sendAndConfirm(metaplex, confirmOptions);\n      scope.throwIfCanceled();\n\n      const candyMachine = await metaplex\n        .candyMachines()\n        .findByAddress<T>(\n          { address: output.candyMachineSigner.publicKey },\n          scope\n        );\n      scope.throwIfCanceled();\n\n      return { ...output, candyMachine };\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type CreateCandyMachineBuilderParams<\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n> = Omit<CreateCandyMachineInput<T>, 'confirmOptions'> & {\n  /** A key to distinguish the instruction that creates the Candy Machine account. */\n  createCandyMachineAccountInstructionKey?: string;\n\n  /** A key to distinguish the instruction that initializes the Candy Machine account. */\n  initializeCandyMachineInstructionKey?: string;\n\n  /** A key to distinguish the instruction that wraps the Candy Machine in a Candy Guard. */\n  wrapCandyGuardInstructionKey?: string;\n};\n\n/**\n * @group Transaction Builders\n * @category Contexts\n */\nexport type CreateCandyMachineBuilderContext = Omit<\n  CreateCandyMachineOutput,\n  'response' | 'candyMachine'\n>;\n\n/**\n\n * Creates a brand new Candy Machine with the provided settings.\n *\n * Unless the `withoutCandyGuard` option is set to `true`, a\n * Candy Guard will be created with the given guards and\n * immediately linked to the Candy Machine.\n *\n * ```ts\n *  const transactionBuilder = await metaplex\n *    .candyMachines()\n *    .builders()\n *    .create({\n *      itemsAvailable: toBigNumber(5000),\n *      sellerFeeBasisPoints: 333, // 3.33%\n *      collection: {\n *        address: collectionNft.address,\n *        updateAuthority: collectionUpdateAuthority,\n *      },\n *    });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const createCandyMachineBuilder = async <\n  T extends CandyGuardsSettings = DefaultCandyGuardSettings\n>(\n  metaplex: Metaplex,\n  params: CreateCandyMachineBuilderParams<T>,\n  options: TransactionBuilderOptions = {}\n): Promise<TransactionBuilder<CreateCandyMachineBuilderContext>> => {\n  // Input.\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const {\n    candyMachine = Keypair.generate(),\n    authority = metaplex.identity(),\n    collection,\n    sellerFeeBasisPoints,\n    itemsAvailable,\n    symbol = '',\n    maxEditionSupply = toBigNumber(0),\n    isMutable = true,\n    withoutCandyGuard = false,\n  } = params;\n  const creators = params.creators ?? [\n    { address: toPublicKey(authority), share: 100 },\n  ];\n  const itemSettings = params.itemSettings ?? {\n    type: 'configLines',\n    prefixName: '',\n    nameLength: 32,\n    prefixUri: '',\n    uriLength: 200,\n    isSequential: false,\n  };\n\n  // PDAs.\n  const authorityPda = metaplex.candyMachines().pdas().authority({\n    candyMachine: candyMachine.publicKey,\n    programs,\n  });\n  const collectionMetadata = metaplex.nfts().pdas().metadata({\n    mint: collection.address,\n    programs,\n  });\n  const collectionMasterEdition = metaplex.nfts().pdas().masterEdition({\n    mint: collection.address,\n    programs,\n  });\n  const collectionAuthorityRecord = metaplex\n    .nfts()\n    .pdas()\n    .collectionAuthorityRecord({\n      mint: collection.address,\n      collectionAuthority: authorityPda,\n      programs,\n    });\n\n  // Programs.\n  const candyMachineProgram = metaplex.programs().getCandyMachine(programs);\n  const tokenMetadataProgram = metaplex.programs().getTokenMetadata(programs);\n\n  const candyMachineData = toCandyMachineData({\n    itemsAvailable,\n    symbol,\n    sellerFeeBasisPoints,\n    maxEditionSupply,\n    isMutable,\n    creators,\n    itemSettings,\n  });\n\n  const builder = TransactionBuilder.make<CreateCandyMachineBuilderContext>()\n    .setFeePayer(payer)\n    .setContext({ candyMachineSigner: candyMachine });\n\n  let mintAuthority = toPublicKey(authority);\n  if (!withoutCandyGuard) {\n    const createCandyGuard = metaplex\n      .candyMachines()\n      .builders()\n      .createCandyGuard<T>(\n        {\n          base: candyMachine,\n          authority: toPublicKey(authority),\n          guards: params.guards ?? {},\n          groups: params.groups,\n        },\n        { programs, payer }\n      );\n\n    const { candyGuardAddress } = createCandyGuard.getContext();\n    mintAuthority = candyGuardAddress;\n    builder.add(createCandyGuard);\n  }\n\n  return builder\n    .add(\n      await metaplex\n        .system()\n        .builders()\n        .createAccount(\n          {\n            space: getCandyMachineSize(candyMachineData),\n            newAccount: candyMachine,\n            program: candyMachineProgram.address,\n          },\n          { payer, programs }\n        )\n    )\n\n    .add({\n      instruction: createInitializeInstruction(\n        {\n          candyMachine: candyMachine.publicKey,\n          authorityPda,\n          authority: toPublicKey(authority),\n          payer: payer.publicKey,\n          collectionMetadata,\n          collectionMint: collection.address,\n          collectionMasterEdition,\n          collectionUpdateAuthority: collection.updateAuthority.publicKey,\n          collectionAuthorityRecord,\n          tokenMetadataProgram: tokenMetadataProgram.address,\n        },\n        { data: candyMachineData },\n        candyMachineProgram.address\n      ),\n      signers: [payer, candyMachine, collection.updateAuthority],\n      key:\n        params.initializeCandyMachineInstructionKey ?? 'initializeCandyMachine',\n    })\n\n    .when(!withoutCandyGuard, (builder) => {\n      if (!isSigner(authority)) {\n        throw new ExpectedSignerError('authority', 'PublicKey', {\n          problemSuffix:\n            'In order to create a Candy Machine with an associated ' +\n            'Candy Guard you must provide the authority as a Signer.',\n        });\n      }\n\n      return builder.add(\n        metaplex.candyMachines().builders().wrapCandyGuard(\n          {\n            candyMachine: candyMachine.publicKey,\n            candyMachineAuthority: authority,\n            candyGuard: mintAuthority,\n            candyGuardAuthority: authority,\n            wrapCandyGuardInstructionKey: params.wrapCandyGuardInstructionKey,\n          },\n          { payer, programs }\n        )\n      );\n    });\n};\n"],"names":["Key","createCandyMachineOperation","_createCandyMachineOperation","input","key","createCandyMachineOperationHandler","handle","operation","metaplex","scope","builder","createCandyMachineBuilder","throwIfCanceled","confirmOptions","makeConfirmOptionsFinalizedOnMainnet","output","sendAndConfirm","candyMachine","candyMachines","findByAddress","address","candyMachineSigner","publicKey","params","options","programs","payer","rpc","getDefaultFeePayer","Keypair","generate","authority","identity","collection","sellerFeeBasisPoints","itemsAvailable","symbol","maxEditionSupply","toBigNumber","isMutable","withoutCandyGuard","creators","toPublicKey","share","itemSettings","type","prefixName","nameLength","prefixUri","uriLength","isSequential","authorityPda","pdas","collectionMetadata","nfts","metadata","mint","collectionMasterEdition","masterEdition","collectionAuthorityRecord","collectionAuthority","candyMachineProgram","getCandyMachine","tokenMetadataProgram","getTokenMetadata","candyMachineData","toCandyMachineData","TransactionBuilder","make","setFeePayer","setContext","mintAuthority","createCandyGuard","builders","base","guards","groups","candyGuardAddress","getContext","add","system","createAccount","space","getCandyMachineSize","newAccount","program","instruction","createInitializeInstruction","collectionMint","collectionUpdateAuthority","updateAuthority","data","signers","initializeCandyMachineInstructionKey","when","isSigner","ExpectedSignerError","problemSuffix","wrapCandyGuard","candyMachineAuthority","candyGuard","candyGuardAuthority","wrapCandyGuardInstructionKey"],"mappings":"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"}