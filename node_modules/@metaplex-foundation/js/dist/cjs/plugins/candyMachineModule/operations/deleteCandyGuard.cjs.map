{"version":3,"file":"deleteCandyGuard.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/deleteCandyGuard.ts"],"sourcesContent":["import { createWithdrawInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  PublicKey,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'DeleteCandyGuardOperation' as const;\n\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const deleteCandyGuardOperation =\n  useOperation<DeleteCandyGuardOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type DeleteCandyGuardOperation = Operation<\n  typeof Key,\n  DeleteCandyGuardInput,\n  DeleteCandyGuardOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type DeleteCandyGuardInput = {\n  /** The address of the Candy Guard account to delete. */\n  candyGuard: PublicKey;\n\n  /**\n   * The authority of the Candy Guard account.\n   *\n   * This is the account that will received the rent-exemption\n   * lamports from the Candy Guard account.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type DeleteCandyGuardOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const deleteCandyGuardOperationHandler: OperationHandler<DeleteCandyGuardOperation> =\n  {\n    async handle(\n      operation: DeleteCandyGuardOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<DeleteCandyGuardOutput> {\n      return deleteCandyGuardBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type DeleteCandyGuardBuilderParams = Omit<\n  DeleteCandyGuardInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that deletes the Candy Guard account. */\n  deleteCandyGuardInstructionKey?: string;\n};\n\n/**\n * Deletes a Candy Guard account by withdrawing its rent-exempt balance.\n *\n * ```ts\n * const transactionBuilder = await metaplex\n *   .candyMachines()\n *   .builders()\n *   .deleteCandyGuard({\n *     candyGuard,\n *     authority,\n *   });\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const deleteCandyGuardBuilder = (\n  metaplex: Metaplex,\n  params: DeleteCandyGuardBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { candyGuard, authority = metaplex.identity() } = params;\n\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return TransactionBuilder.make()\n    .setFeePayer(payer)\n    .add({\n      instruction: createWithdrawInstruction(\n        {\n          candyGuard,\n          authority: authority.publicKey,\n        },\n        candyGuardProgram.address\n      ),\n      signers: [authority],\n      key: params.deleteCandyGuardInstructionKey ?? 'deleteCandyGuard',\n    });\n};\n"],"names":["Key","deleteCandyGuardOperation","useOperation","deleteCandyGuardOperationHandler","handle","operation","metaplex","scope","deleteCandyGuardBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","authority","identity","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createWithdrawInstruction","publicKey","address","signers","key","deleteCandyGuardInstructionKey"],"mappings":";;;;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,2BAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,yBAAyB,GACpCC,sBAAY,CAA4BF,GAA5B,EADP;AAGP;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACO,MAAMG,gCAA6E,GACxF;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAImC;AACjC,IAAA,OAAOC,uBAAuB,CAC5BF,QAD4B,EAE5BD,SAAS,CAACI,KAFkB,EAG5BF,KAH4B,CAAvB,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,uBAAuB,GAAG,CACrCF,QADqC,EAErCM,MAFqC,EAGrCC,OAAkC,GAAG,EAHA,KAId;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IAAEK,UAAF;IAAcC,SAAS,GAAGb,QAAQ,CAACc,QAAT,EAAA;AAA1B,GAAA,GAAkDR,MAAxD,CAAA;EAEA,MAAMS,iBAAiB,GAAGf,QAAQ,CAACQ,QAAT,EAAoBQ,CAAAA,aAApB,CAAkCR,QAAlC,CAA1B,CAAA;EAEA,OAAOS,qCAAkB,CAACC,IAAnB,EAAA,CACJC,WADI,CACQV,KADR,CAEJW,CAAAA,GAFI,CAEA;IACHC,WAAW,EAAEC,uCAAyB,CACpC;MACEV,UADF;MAEEC,SAAS,EAAEA,SAAS,CAACU,SAAAA;AAFvB,KADoC,EAKpCR,iBAAiB,CAACS,OALkB,CADnC;IAQHC,OAAO,EAAE,CAACZ,SAAD,CARN;AASHa,IAAAA,GAAG,EAAEpB,MAAM,CAACqB,8BAAP,IAAyC,kBAAA;AAT3C,GAFA,CAAP,CAAA;AAaD;;;;;;"}