{"version":3,"file":"updateCandyGuardAuthority.cjs","sources":["../../../../../src/plugins/candyMachineModule/operations/updateCandyGuardAuthority.ts"],"sourcesContent":["import { createSetAuthorityInstruction } from '@metaplex-foundation/mpl-candy-guard';\nimport type { PublicKey } from '@solana/web3.js';\nimport { SendAndConfirmTransactionResponse } from '../../rpcModule';\nimport { Metaplex } from '@/Metaplex';\nimport {\n  Operation,\n  OperationHandler,\n  OperationScope,\n  Signer,\n  useOperation,\n} from '@/types';\nimport { TransactionBuilder, TransactionBuilderOptions } from '@/utils';\n\n// -----------------\n// Operation\n// -----------------\n\nconst Key = 'UpdateCandyGuardAuthorityOperation' as const;\n\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Operations\n * @category Constructors\n */\nexport const updateCandyGuardAuthorityOperation =\n  useOperation<UpdateCandyGuardAuthorityOperation>(Key);\n\n/**\n * @group Operations\n * @category Types\n */\nexport type UpdateCandyGuardAuthorityOperation = Operation<\n  typeof Key,\n  UpdateCandyGuardAuthorityInput,\n  UpdateCandyGuardAuthorityOutput\n>;\n\n/**\n * @group Operations\n * @category Inputs\n */\nexport type UpdateCandyGuardAuthorityInput = {\n  /** The address of the Candy Guard to update. */\n  candyGuard: PublicKey;\n\n  /**\n   * The Signer authorized to update the candy Guard.\n   *\n   * @defaultValue `metaplex.identity()`\n   */\n  authority?: Signer;\n\n  /** The address of the new authority. */\n  newAuthority: PublicKey;\n};\n\n/**\n * @group Operations\n * @category Outputs\n */\nexport type UpdateCandyGuardAuthorityOutput = {\n  /** The blockchain response from sending and confirming the transaction. */\n  response: SendAndConfirmTransactionResponse;\n};\n\n/**\n * @group Operations\n * @category Handlers\n */\nexport const updateCandyGuardAuthorityOperationHandler: OperationHandler<UpdateCandyGuardAuthorityOperation> =\n  {\n    async handle(\n      operation: UpdateCandyGuardAuthorityOperation,\n      metaplex: Metaplex,\n      scope: OperationScope\n    ): Promise<UpdateCandyGuardAuthorityOutput> {\n      return updateCandyGuardAuthorityBuilder(\n        metaplex,\n        operation.input,\n        scope\n      ).sendAndConfirm(metaplex, scope.confirmOptions);\n    },\n  };\n\n// -----------------\n// Builder\n// -----------------\n\n/**\n * @group Transaction Builders\n * @category Inputs\n */\nexport type UpdateCandyGuardAuthorityBuilderParams = Omit<\n  UpdateCandyGuardAuthorityInput,\n  'confirmOptions'\n> & {\n  /** A key to distinguish the instruction that updates the candy guard. */\n  instructionKey?: string;\n};\n\n/**\n * Updates the authority of a Candy Guard account.\n *\n * ```ts\n * await metaplex\n *   .candyMachines()\n *   .builders()\n *   .updateCandyGuardAuthority({\n *     candyGuard: candyGuard.address,\n *     authority: candyGuardAuthority,\n *     newAuthority,\n *   };\n * ```\n *\n * @group Transaction Builders\n * @category Constructors\n */\nexport const updateCandyGuardAuthorityBuilder = (\n  metaplex: Metaplex,\n  params: UpdateCandyGuardAuthorityBuilderParams,\n  options: TransactionBuilderOptions = {}\n): TransactionBuilder => {\n  const { programs, payer = metaplex.rpc().getDefaultFeePayer() } = options;\n  const { candyGuard, newAuthority, authority = metaplex.identity() } = params;\n  const candyGuardProgram = metaplex.programs().getCandyGuard(programs);\n\n  return (\n    TransactionBuilder.make()\n      .setFeePayer(payer)\n\n      // Update the candy guard account.\n      .add({\n        instruction: createSetAuthorityInstruction(\n          { candyGuard, authority: authority.publicKey },\n          { newAuthority },\n          candyGuardProgram.address\n        ),\n        signers: [authority, payer],\n        key: params.instructionKey ?? 'updateCandyGuardAuthority',\n      })\n  );\n};\n"],"names":["Key","updateCandyGuardAuthorityOperation","useOperation","updateCandyGuardAuthorityOperationHandler","handle","operation","metaplex","scope","updateCandyGuardAuthorityBuilder","input","sendAndConfirm","confirmOptions","params","options","programs","payer","rpc","getDefaultFeePayer","candyGuard","newAuthority","authority","identity","candyGuardProgram","getCandyGuard","TransactionBuilder","make","setFeePayer","add","instruction","createSetAuthorityInstruction","publicKey","address","signers","key","instructionKey"],"mappings":";;;;;;;;AAcA;AACA;;AAEA,MAAMA,GAAG,GAAG,oCAAZ,CAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;MACaC,kCAAkC,GAC7CC,sBAAY,CAAqCF,GAArC,EADP;AAGP;AACA;AACA;AACA;;AAmCA;AACA;AACA;AACA;AACO,MAAMG,yCAA+F,GAC1G;AACE,EAAA,MAAMC,MAAN,CACEC,SADF,EAEEC,QAFF,EAGEC,KAHF,EAI4C;AAC1C,IAAA,OAAOC,gCAAgC,CACrCF,QADqC,EAErCD,SAAS,CAACI,KAF2B,EAGrCF,KAHqC,CAAhC,CAILG,cAJK,CAIUJ,QAJV,EAIoBC,KAAK,CAACI,cAJ1B,CAAP,CAAA;AAKD,GAAA;;AAXH;AAeF;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMH,gCAAgC,GAAG,CAC9CF,QAD8C,EAE9CM,MAF8C,EAG9CC,OAAkC,GAAG,EAHS,KAIvB;EACvB,MAAM;IAAEC,QAAF;AAAYC,IAAAA,KAAK,GAAGT,QAAQ,CAACU,GAAT,GAAeC,kBAAf,EAAA;AAApB,GAAA,GAA4DJ,OAAlE,CAAA;EACA,MAAM;IAAEK,UAAF;IAAcC,YAAd;IAA4BC,SAAS,GAAGd,QAAQ,CAACe,QAAT,EAAA;AAAxC,GAAA,GAAgET,MAAtE,CAAA;EACA,MAAMU,iBAAiB,GAAGhB,QAAQ,CAACQ,QAAT,EAAoBS,CAAAA,aAApB,CAAkCT,QAAlC,CAA1B,CAAA;AAEA,EAAA,OACEU,qCAAkB,CAACC,IAAnB,GACGC,WADH,CACeX,KADf,CAGE;AAHF,GAIGY,GAJH,CAIO;IACHC,WAAW,EAAEC,2CAA6B,CACxC;MAAEX,UAAF;MAAcE,SAAS,EAAEA,SAAS,CAACU,SAAAA;AAAnC,KADwC,EAExC;AAAEX,MAAAA,YAAAA;AAAF,KAFwC,EAGxCG,iBAAiB,CAACS,OAHsB,CADvC;AAMHC,IAAAA,OAAO,EAAE,CAACZ,SAAD,EAAYL,KAAZ,CANN;AAOHkB,IAAAA,GAAG,EAAErB,MAAM,CAACsB,cAAP,IAAyB,2BAAA;AAP3B,GAJP,CADF,CAAA;AAeD;;;;;;"}