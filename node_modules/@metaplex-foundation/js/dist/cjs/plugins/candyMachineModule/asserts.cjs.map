{"version":3,"file":"asserts.cjs","sources":["../../../../src/plugins/candyMachineModule/asserts.ts"],"sourcesContent":["import { CandyMachine, CandyMachineItem } from './models';\nimport {\n  CandyMachineItemTextTooLongError,\n  CandyMachineCannotAddAmountError,\n  CandyMachineIsFullError,\n} from './errors';\n\nexport const assertNotFull = (\n  candyMachine: Pick<CandyMachine, 'itemsAvailable' | 'itemsLoaded'>,\n  index: number\n) => {\n  if (candyMachine.itemsAvailable.lten(candyMachine.itemsLoaded)) {\n    throw new CandyMachineIsFullError(\n      index,\n      candyMachine.itemsAvailable.toNumber()\n    );\n  }\n};\n\nexport const assertCanAdd = (\n  candyMachine: Pick<CandyMachine, 'itemsAvailable'>,\n  index: number,\n  amount: number\n) => {\n  if (index + amount > candyMachine.itemsAvailable.toNumber()) {\n    throw new CandyMachineCannotAddAmountError(\n      index,\n      amount,\n      candyMachine.itemsAvailable.toNumber()\n    );\n  }\n};\n\nexport const assertAllItemConstraints = (\n  candyMachine: Pick<CandyMachine, 'itemSettings'>,\n  items: Pick<CandyMachineItem, 'name' | 'uri'>[]\n) => {\n  if (candyMachine.itemSettings.type !== 'configLines') {\n    return;\n  }\n\n  const { nameLength } = candyMachine.itemSettings;\n  const { uriLength } = candyMachine.itemSettings;\n\n  for (let i = 0; i < items.length; i++) {\n    if (items[i].name.length > nameLength) {\n      throw new CandyMachineItemTextTooLongError(\n        i,\n        'name',\n        items[i].name,\n        nameLength\n      );\n    }\n    if (items[i].uri.length > uriLength) {\n      throw new CandyMachineItemTextTooLongError(\n        i,\n        'uri',\n        items[i].uri,\n        uriLength\n      );\n    }\n  }\n};\n"],"names":["assertNotFull","candyMachine","index","itemsAvailable","lten","itemsLoaded","CandyMachineIsFullError","toNumber","assertCanAdd","amount","CandyMachineCannotAddAmountError","assertAllItemConstraints","items","itemSettings","type","nameLength","uriLength","i","length","name","CandyMachineItemTextTooLongError","uri"],"mappings":";;;;;;MAOaA,aAAa,GAAG,CAC3BC,YAD2B,EAE3BC,KAF2B,KAGxB;EACH,IAAID,YAAY,CAACE,cAAb,CAA4BC,IAA5B,CAAiCH,YAAY,CAACI,WAA9C,CAAJ,EAAgE;IAC9D,MAAM,IAAIC,8BAAJ,CACJJ,KADI,EAEJD,YAAY,CAACE,cAAb,CAA4BI,QAA5B,EAFI,CAAN,CAAA;AAID,GAAA;AACF,EAVM;AAYA,MAAMC,YAAY,GAAG,CAC1BP,YAD0B,EAE1BC,KAF0B,EAG1BO,MAH0B,KAIvB;EACH,IAAIP,KAAK,GAAGO,MAAR,GAAiBR,YAAY,CAACE,cAAb,CAA4BI,QAA5B,EAArB,EAA6D;AAC3D,IAAA,MAAM,IAAIG,uCAAJ,CACJR,KADI,EAEJO,MAFI,EAGJR,YAAY,CAACE,cAAb,CAA4BI,QAA5B,EAHI,CAAN,CAAA;AAKD,GAAA;AACF,EAZM;MAcMI,wBAAwB,GAAG,CACtCV,YADsC,EAEtCW,KAFsC,KAGnC;AACH,EAAA,IAAIX,YAAY,CAACY,YAAb,CAA0BC,IAA1B,KAAmC,aAAvC,EAAsD;AACpD,IAAA,OAAA;AACD,GAAA;;EAED,MAAM;AAAEC,IAAAA,UAAAA;GAAed,GAAAA,YAAY,CAACY,YAApC,CAAA;EACA,MAAM;AAAEG,IAAAA,SAAAA;GAAcf,GAAAA,YAAY,CAACY,YAAnC,CAAA;;AAEA,EAAA,KAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAAK,CAACM,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAIL,KAAK,CAACK,CAAD,CAAL,CAASE,IAAT,CAAcD,MAAd,GAAuBH,UAA3B,EAAuC;AACrC,MAAA,MAAM,IAAIK,uCAAJ,CACJH,CADI,EAEJ,MAFI,EAGJL,KAAK,CAACK,CAAD,CAAL,CAASE,IAHL,EAIJJ,UAJI,CAAN,CAAA;AAMD,KAAA;;IACD,IAAIH,KAAK,CAACK,CAAD,CAAL,CAASI,GAAT,CAAaH,MAAb,GAAsBF,SAA1B,EAAqC;AACnC,MAAA,MAAM,IAAII,uCAAJ,CACJH,CADI,EAEJ,KAFI,EAGJL,KAAK,CAACK,CAAD,CAAL,CAASI,GAHL,EAIJL,SAJI,CAAN,CAAA;AAMD,KAAA;AACF,GAAA;AACF;;;;;;"}