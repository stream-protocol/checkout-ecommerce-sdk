{"version":3,"file":"nftBurn.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/nftBurn.ts"],"sourcesContent":["import { nftBurnBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { GuardMintSettingsMissingError } from '../errors';\nimport { CandyGuardManifest } from './core';\nimport { createSerializerFromBeet, PublicKey } from '@/types';\n\n/**\n * The nftBurn guard restricts the mint to holders of a predefined\n * NFT Collection and burns the holder's NFT when minting.\n *\n * This means the mint address of the NFT to burn must be\n * passed when minting. This guard alone does not limit how many\n * times a holder can mint. A holder can mint as many times\n * as they have NFTs from the required collection to burn.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n *\n * @see {@link NftBurnGuardMintSettings} for more\n * information on the mint settings of this guard.\n */\nexport type NftBurnGuardSettings = {\n  /** The mint address of the required NFT Collection. */\n  requiredCollection: PublicKey;\n};\n\n/**\n * The settings for the nftBurn guard that could\n * be provided when minting from the Candy Machine.\n *\n * @see {@link NftBurnGuardSettings} for more\n * information on the nftBurn guard itself.\n */\nexport type NftBurnGuardMintSettings = {\n  /**\n   * The mint address of the NFT to burn.\n   * This must be part of the required collection and must\n   * belong to the payer.\n   */\n  mint: PublicKey;\n\n  /**\n   * The token account linking the NFT with its owner.\n   *\n   * @defaultValue\n   * Defaults to the associated token address using the\n   * mint address of the NFT and the payer's address.\n   */\n  tokenAccount?: PublicKey;\n};\n\n/** @internal */\nexport const nftBurnGuardManifest: CandyGuardManifest<\n  NftBurnGuardSettings,\n  NftBurnGuardMintSettings\n> = {\n  name: 'nftBurn',\n  settingsBytes: 32,\n  settingsSerializer: createSerializerFromBeet(nftBurnBeet),\n  mintSettingsParser: ({\n    metaplex,\n    settings,\n    mintSettings,\n    payer,\n    programs,\n  }) => {\n    if (!mintSettings) {\n      throw new GuardMintSettingsMissingError('nftBurn');\n    }\n\n    const tokenAccount =\n      mintSettings.tokenAccount ??\n      metaplex.tokens().pdas().associatedTokenAccount({\n        mint: mintSettings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n    const tokenMetadata = metaplex.nfts().pdas().metadata({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const tokenEdition = metaplex.nfts().pdas().masterEdition({\n      mint: mintSettings.mint,\n      programs,\n    });\n\n    const mintCollectionMetadata = metaplex.nfts().pdas().metadata({\n      mint: settings.requiredCollection,\n      programs,\n    });\n\n    return {\n      arguments: Buffer.from([]),\n      remainingAccounts: [\n        {\n          isSigner: false,\n          address: tokenAccount,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenMetadata,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: tokenEdition,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintSettings.mint,\n          isWritable: true,\n        },\n        {\n          isSigner: false,\n          address: mintCollectionMetadata,\n          isWritable: true,\n        },\n      ],\n    };\n  },\n};\n"],"names":["nftBurnGuardManifest","name","settingsBytes","settingsSerializer","createSerializerFromBeet","nftBurnBeet","mintSettingsParser","metaplex","settings","mintSettings","payer","programs","GuardMintSettingsMissingError","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","tokenMetadata","nfts","metadata","tokenEdition","masterEdition","mintCollectionMetadata","requiredCollection","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA+BA;AACO,MAAMA,oBAGZ,GAAG;AACFC,EAAAA,IAAI,EAAE,SADJ;AAEFC,EAAAA,aAAa,EAAE,EAFb;AAGFC,EAAAA,kBAAkB,EAAEC,mCAAwB,CAACC,yBAAD,CAH1C;AAIFC,EAAAA,kBAAkB,EAAE,CAAC;IACnBC,QADmB;IAEnBC,QAFmB;IAGnBC,YAHmB;IAInBC,KAJmB;AAKnBC,IAAAA,QAAAA;AALmB,GAAD,KAMd;IACJ,IAAI,CAACF,YAAL,EAAmB;AACjB,MAAA,MAAM,IAAIG,oCAAJ,CAAkC,SAAlC,CAAN,CAAA;AACD,KAAA;;AAED,IAAA,MAAMC,YAAY,GAChBJ,YAAY,CAACI,YAAb,IACAN,QAAQ,CAACO,MAAT,EAAA,CAAkBC,IAAlB,EAAA,CAAyBC,sBAAzB,CAAgD;MAC9CC,IAAI,EAAER,YAAY,CAACQ,IAD2B;MAE9CC,KAAK,EAAER,KAAK,CAACS,SAFiC;AAG9CR,MAAAA,QAAAA;AAH8C,KAAhD,CAFF,CAAA;IAQA,MAAMS,aAAa,GAAGb,QAAQ,CAACc,IAAT,EAAgBN,CAAAA,IAAhB,EAAuBO,CAAAA,QAAvB,CAAgC;MACpDL,IAAI,EAAER,YAAY,CAACQ,IADiC;AAEpDN,MAAAA,QAAAA;AAFoD,KAAhC,CAAtB,CAAA;IAKA,MAAMY,YAAY,GAAGhB,QAAQ,CAACc,IAAT,EAAgBN,CAAAA,IAAhB,EAAuBS,CAAAA,aAAvB,CAAqC;MACxDP,IAAI,EAAER,YAAY,CAACQ,IADqC;AAExDN,MAAAA,QAAAA;AAFwD,KAArC,CAArB,CAAA;IAKA,MAAMc,sBAAsB,GAAGlB,QAAQ,CAACc,IAAT,EAAgBN,CAAAA,IAAhB,EAAuBO,CAAAA,QAAvB,CAAgC;MAC7DL,IAAI,EAAET,QAAQ,CAACkB,kBAD8C;AAE7Df,MAAAA,QAAAA;AAF6D,KAAhC,CAA/B,CAAA;IAKA,OAAO;AACLgB,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEnB,YAFX;AAGEoB,QAAAA,UAAU,EAAE,IAAA;AAHd,OADiB,EAMjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEZ,aAFX;AAGEa,QAAAA,UAAU,EAAE,IAAA;AAHd,OANiB,EAWjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAET,YAFX;AAGEU,QAAAA,UAAU,EAAE,IAAA;AAHd,OAXiB,EAgBjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEvB,YAAY,CAACQ,IAFxB;AAGEgB,QAAAA,UAAU,EAAE,IAAA;AAHd,OAhBiB,EAqBjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEP,sBAFX;AAGEQ,QAAAA,UAAU,EAAE,IAAA;OAxBG,CAAA;KAFrB,CAAA;AA8BD,GAAA;AApEC;;;;"}