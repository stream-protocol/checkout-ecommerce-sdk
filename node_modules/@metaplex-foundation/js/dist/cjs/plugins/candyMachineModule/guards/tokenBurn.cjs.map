{"version":3,"file":"tokenBurn.cjs","sources":["../../../../../src/plugins/candyMachineModule/guards/tokenBurn.ts"],"sourcesContent":["import { TokenBurn, tokenBurnBeet } from '@metaplex-foundation/mpl-candy-guard';\nimport { CandyGuardManifest } from './core';\nimport {\n  createSerializerFromBeet,\n  mapSerializer,\n  PublicKey,\n  SplTokenAmount,\n  token,\n} from '@/types';\n\n/**\n * The tokenBurn guard restricts minting to token holders\n * of a specified mint account and burns the holder's tokens\n * when minting. The `amount` determines how many tokens are required.\n *\n * This guard alone does not limit how many times a holder\n * can mint. A holder can mint as many times as they have\n * the required amount of tokens to burn.\n *\n * This object defines the settings that should be\n * provided when creating and/or updating a Candy\n * Machine if you wish to enable this guard.\n */\nexport type TokenBurnGuardSettings = {\n  /** The mint address of the required tokens. */\n  mint: PublicKey;\n\n  /** The amount of tokens required to mint an NFT. */\n  amount: SplTokenAmount;\n};\n\n/** @internal */\nexport const tokenBurnGuardManifest: CandyGuardManifest<TokenBurnGuardSettings> =\n  {\n    name: 'tokenBurn',\n    settingsBytes: 40,\n    settingsSerializer: mapSerializer<TokenBurn, TokenBurnGuardSettings>(\n      createSerializerFromBeet(tokenBurnBeet),\n      (settings) => ({ ...settings, amount: token(settings.amount) }),\n      (settings) => ({ ...settings, amount: settings.amount.basisPoints })\n    ),\n    mintSettingsParser: ({ metaplex, settings, payer, programs }) => {\n      const tokenAccount = metaplex.tokens().pdas().associatedTokenAccount({\n        mint: settings.mint,\n        owner: payer.publicKey,\n        programs,\n      });\n\n      return {\n        arguments: Buffer.from([]),\n        remainingAccounts: [\n          {\n            isSigner: false,\n            address: tokenAccount,\n            isWritable: true,\n          },\n          {\n            isSigner: false,\n            address: settings.mint,\n            isWritable: true,\n          },\n        ],\n      };\n    },\n  };\n"],"names":["tokenBurnGuardManifest","name","settingsBytes","settingsSerializer","mapSerializer","createSerializerFromBeet","tokenBurnBeet","settings","amount","token","basisPoints","mintSettingsParser","metaplex","payer","programs","tokenAccount","tokens","pdas","associatedTokenAccount","mint","owner","publicKey","arguments","Buffer","from","remainingAccounts","isSigner","address","isWritable"],"mappings":";;;;;;;;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACO,MAAMA,sBAAkE,GAC7E;AACEC,EAAAA,IAAI,EAAE,WADR;AAEEC,EAAAA,aAAa,EAAE,EAFjB;AAGEC,EAAAA,kBAAkB,EAAEC,wBAAa,CAC/BC,mCAAwB,CAACC,2BAAD,CADO,EAE9BC,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAEC,YAAK,CAACF,QAAQ,CAACC,MAAV,CAAA;AAA5B,GAAf,CAF+B,EAG9BD,QAAD,KAAe,EAAE,GAAGA,QAAL;AAAeC,IAAAA,MAAM,EAAED,QAAQ,CAACC,MAAT,CAAgBE,WAAAA;AAAvC,GAAf,CAH+B,CAHnC;AAQEC,EAAAA,kBAAkB,EAAE,CAAC;IAAEC,QAAF;IAAYL,QAAZ;IAAsBM,KAAtB;AAA6BC,IAAAA,QAAAA;AAA7B,GAAD,KAA6C;IAC/D,MAAMC,YAAY,GAAGH,QAAQ,CAACI,MAAT,EAAkBC,CAAAA,IAAlB,EAAyBC,CAAAA,sBAAzB,CAAgD;MACnEC,IAAI,EAAEZ,QAAQ,CAACY,IADoD;MAEnEC,KAAK,EAAEP,KAAK,CAACQ,SAFsD;AAGnEP,MAAAA,QAAAA;AAHmE,KAAhD,CAArB,CAAA;IAMA,OAAO;AACLQ,MAAAA,SAAS,EAAEC,MAAM,CAACC,IAAP,CAAY,EAAZ,CADN;AAELC,MAAAA,iBAAiB,EAAE,CACjB;AACEC,QAAAA,QAAQ,EAAE,KADZ;AAEEC,QAAAA,OAAO,EAAEZ,YAFX;AAGEa,QAAAA,UAAU,EAAE,IAAA;AAHd,OADiB,EAMjB;AACEF,QAAAA,QAAQ,EAAE,KADZ;QAEEC,OAAO,EAAEpB,QAAQ,CAACY,IAFpB;AAGES,QAAAA,UAAU,EAAE,IAAA;OATG,CAAA;KAFrB,CAAA;AAeD,GAAA;AA9BH;;;;"}