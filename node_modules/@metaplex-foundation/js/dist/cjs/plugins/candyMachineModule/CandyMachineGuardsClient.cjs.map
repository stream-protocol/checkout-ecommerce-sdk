{"version":3,"file":"CandyMachineGuardsClient.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachineGuardsClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport * as beet from '@metaplex-foundation/beet';\nimport { AccountMeta } from '@solana/web3.js';\nimport { CANDY_GUARD_LABEL_SIZE } from './constants';\nimport {\n  GuardGroupLabelTooLongError,\n  GuardGroupRequiredError,\n  GuardNotEnabledError,\n  GuardRouteNotSupportedError,\n  SelectedGuardGroupDoesNotExistError,\n  UnregisteredCandyGuardError,\n} from './errors';\nimport {\n  CandyGuardManifest,\n  CandyGuardsMintSettings,\n  CandyGuardsRemainingAccount,\n  CandyGuardsRouteSettings,\n  CandyGuardsSettings,\n  DefaultCandyGuardRouteSettings,\n  DefaultCandyGuardSettings,\n} from './guards';\nimport { CandyGuard } from './models';\nimport { CandyGuardProgram } from './programs';\nimport { Option, padEmptyChars, removeEmptyChars } from '@/utils';\nimport {\n  deserialize,\n  deserializeFeatureFlags,\n  Program,\n  PublicKey,\n  serialize,\n  serializeFeatureFlags,\n  Signer,\n} from '@/types';\nimport type { Metaplex } from '@/Metaplex';\n\n/**\n * This client enables us to register custom guards from\n * custom Candy Guard programs and interact with them.\n *\n * @see {@link CandyGuardClient}\n * @group Module\n */\nexport class CandyMachineGuardsClient {\n  readonly guards: CandyGuardManifest<any, any, any>[] = [];\n\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Registers one or many guards by providing their manifest. */\n  register(...guard: CandyGuardManifest<any, any, any>[]) {\n    this.guards.push(...guard);\n  }\n\n  /** Gets the manifest of a guard using its name. */\n  get(name: string): CandyGuardManifest<any, any, any> {\n    const guard = this.guards.find((guard) => guard.name === name);\n\n    if (!guard) {\n      throw new UnregisteredCandyGuardError(name);\n    }\n\n    return guard;\n  }\n\n  /** Gets all registered guard manifests. */\n  all(): CandyGuardManifest<any, any, any>[] {\n    return this.guards;\n  }\n\n  /**\n   * Gets all guard manifests for a registered Candy Guard program.\n   *\n   * It fails if the manifest of any guard expected by the program\n   * is not registered. Manifests are returned in the order in which\n   * they are defined on the `availableGuards` property of the program.\n   */\n  forProgram(\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram =\n      typeof program === 'object' && 'availableGuards' in program\n        ? program\n        : this.metaplex.programs().get<CandyGuardProgram>(program);\n\n    return candyGuardProgram.availableGuards.map((name) => this.get(name));\n  }\n\n  /**\n   * Gets all guard manifests for the registered Candy Guard program.\n   *\n   * @see {@link CandyMachineGuardsClient.forProgram}\n   */\n  forCandyGuardProgram(\n    programs: Program[] = []\n  ): CandyGuardManifest<any, any, any>[] {\n    const candyGuardProgram = this.metaplex.programs().getCandyGuard(programs);\n\n    return this.forProgram(candyGuardProgram);\n  }\n\n  /** Serializes the settings of all guards and groups. */\n  serializeSettings<T extends CandyGuardsSettings = DefaultCandyGuardSettings>(\n    guards: Partial<T>,\n    groups: { label: string; guards: Partial<T> }[] = [],\n    programs: Program[] = []\n  ): Buffer {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    this.assertGuardsAreRegistered<T>(\n      guards,\n      groups,\n      availableGuards.map(({ name }) => name)\n    );\n\n    const serializeSet = (set: Partial<T>): Buffer => {\n      const { features, buffer } = availableGuards.reduce(\n        (acc, guard, index) => {\n          const value = set[guard.name] ?? null;\n          acc.features[index] = Boolean(value);\n          if (value) {\n            acc.buffer = Buffer.concat([\n              acc.buffer,\n              serialize(value, guard.settingsSerializer),\n            ]);\n          }\n          return acc;\n        },\n        {\n          features: [] as boolean[],\n          buffer: Buffer.from([]),\n        }\n      );\n\n      const serializedfeatures = serializeFeatureFlags(features, 8, true);\n      serializedfeatures.reverse();\n\n      return Buffer.concat([serializedfeatures, buffer]);\n    };\n\n    let buffer = serializeSet(guards);\n\n    const groupCountBuffer = Buffer.alloc(4);\n    beet.u32.write(groupCountBuffer, 0, groups.length);\n    buffer = Buffer.concat([buffer, groupCountBuffer]);\n\n    groups.forEach((group) => {\n      if (group.label.length > CANDY_GUARD_LABEL_SIZE) {\n        throw new GuardGroupLabelTooLongError(\n          group.label,\n          CANDY_GUARD_LABEL_SIZE\n        );\n      }\n      const labelBuffer = Buffer.alloc(CANDY_GUARD_LABEL_SIZE);\n      labelBuffer.write(\n        padEmptyChars(group.label, CANDY_GUARD_LABEL_SIZE),\n        0,\n        CANDY_GUARD_LABEL_SIZE,\n        'utf8'\n      );\n      buffer = Buffer.concat([buffer, labelBuffer, serializeSet(group.guards)]);\n    });\n\n    return buffer;\n  }\n\n  /** Deserializes the settings of all guards and groups. */\n  deserializeSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    buffer: Buffer,\n    program: string | PublicKey | CandyGuardProgram = 'CandyGuardProgram'\n  ): { guards: T; groups: { label: string; guards: T }[] } {\n    const availableGuards = this.forProgram(program);\n    const deserializeSet = () => {\n      const serializedFeatures = buffer.slice(0, 8);\n      serializedFeatures.reverse();\n      const features = deserializeFeatureFlags(serializedFeatures, 64, true);\n      buffer = buffer.slice(8);\n\n      return availableGuards.reduce((acc, guard, index) => {\n        const isEnabled = features[index] ?? false;\n        acc[guard.name] = null;\n        if (!isEnabled) return acc;\n\n        const [settings] = deserialize(buffer, guard.settingsSerializer);\n        buffer = buffer.slice(guard.settingsBytes);\n        acc[guard.name] = settings;\n        return acc;\n      }, {} as CandyGuardsSettings) as T;\n    };\n\n    const guards: T = deserializeSet();\n    const groups: { label: string; guards: T }[] = [];\n    const groupsCount = beet.u32.read(buffer, 0);\n    buffer = buffer.slice(4);\n\n    for (let i = 0; i < groupsCount; i++) {\n      const label = removeEmptyChars(\n        buffer.slice(0, CANDY_GUARD_LABEL_SIZE).toString('utf8')\n      );\n      buffer = buffer.slice(CANDY_GUARD_LABEL_SIZE);\n      groups.push({ label, guards: deserializeSet() });\n    }\n\n    return { guards, groups };\n  }\n\n  /**\n   * Resolves the set of settings that should be used when minting.\n   *\n   * If no group exists, the `guards` settings will be used.\n   * Otherwise, the `guards` settings will act as default settings and\n   * the settings of the selected group will override them.\n   */\n  resolveGroupSettings<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    guards: T,\n    groups: { label: string; guards: T }[] = [],\n    groupLabel: Option<string>\n  ): T {\n    const availableGroups = groups.map((group) => group.label);\n    const activeGroup = groups.find((group) => group.label === groupLabel);\n    if (groupLabel && !activeGroup) {\n      throw new SelectedGuardGroupDoesNotExistError(\n        groupLabel,\n        availableGroups\n      );\n    }\n\n    if (groups.length === 0) {\n      return guards;\n    }\n\n    if (!activeGroup) {\n      throw new GuardGroupRequiredError(availableGroups);\n    }\n\n    const activeGroupGuardsWithoutNullGuards = Object.fromEntries(\n      Object.entries(activeGroup.guards).filter(([, v]) => v != null)\n    ) as Partial<T>;\n\n    return {\n      ...guards,\n      ...activeGroupGuardsWithoutNullGuards,\n    };\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * all relevant guards for the mint instruction.\n   */\n  parseMintSettings<\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    MintSettings extends CandyGuardsMintSettings = {}\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    owner: PublicKey,\n    payer: Signer,\n    mint: Signer,\n    guardMintSettings: Partial<MintSettings>,\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const availableGuards = this.forCandyGuardProgram(programs);\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const initialAccumulator = {\n      arguments: Buffer.from([]),\n      accountMetas: [] as AccountMeta[],\n      signers: [] as Signer[],\n    };\n\n    return availableGuards.reduce((acc, guard) => {\n      const settings = guardSettings[guard.name] ?? null;\n      const mintSettings = guardMintSettings[guard.name] ?? null;\n      if (!guard.mintSettingsParser || !settings) return acc;\n\n      const parsedSettings = guard.mintSettingsParser({\n        metaplex: this.metaplex,\n        settings,\n        mintSettings,\n        owner,\n        payer,\n        mint,\n        candyMachine,\n        candyGuard: candyGuard.address,\n        candyGuardAuthority: candyGuard.authorityAddress,\n        programs,\n      });\n\n      const accounts = this.getAccountMetas(parsedSettings.remainingAccounts);\n      const signers = this.getSigners(parsedSettings.remainingAccounts);\n      acc.arguments = Buffer.concat([acc.arguments, parsedSettings.arguments]);\n      acc.accountMetas.push(...accounts);\n      acc.signers.push(...signers);\n      return acc;\n    }, initialAccumulator);\n  }\n\n  /**\n   * Parses the arguments and remaining accounts of\n   * the requested guard for the route instruction.\n   */\n  parseRouteSettings<\n    Guard extends keyof RouteSettings & string,\n    Settings extends CandyGuardsSettings = DefaultCandyGuardSettings,\n    RouteSettings extends CandyGuardsRouteSettings = DefaultCandyGuardRouteSettings\n  >(\n    candyMachine: PublicKey,\n    candyGuard: CandyGuard<Settings>,\n    payer: Signer,\n    guard: Guard,\n    routeSettings: RouteSettings[Guard],\n    groupLabel: Option<string>,\n    programs: Program[] = []\n  ): {\n    arguments: Buffer;\n    accountMetas: AccountMeta[];\n    signers: Signer[];\n  } {\n    const guardManifest = this.get(guard);\n    if (!guardManifest.routeSettingsParser) {\n      throw new GuardRouteNotSupportedError(guard);\n    }\n\n    const guardSettings = this.resolveGroupSettings(\n      candyGuard.guards,\n      candyGuard.groups,\n      groupLabel\n    );\n    const settings = guardSettings[guard] ?? null;\n    if (!settings) {\n      throw new GuardNotEnabledError(guard, groupLabel);\n    }\n\n    const parsedSettings = guardManifest.routeSettingsParser({\n      metaplex: this.metaplex,\n      settings,\n      routeSettings,\n      payer,\n      candyMachine,\n      candyGuard: candyGuard.address,\n      candyGuardAuthority: candyGuard.authorityAddress,\n      programs,\n    });\n\n    return {\n      arguments: parsedSettings.arguments,\n      accountMetas: this.getAccountMetas(parsedSettings.remainingAccounts),\n      signers: this.getSigners(parsedSettings.remainingAccounts),\n    };\n  }\n\n  /** @internal */\n  protected getAccountMetas(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): AccountMeta[] {\n    return remainingAccounts.map((account) => ({\n      pubkey: account.isSigner ? account.address.publicKey : account.address,\n      isSigner: account.isSigner,\n      isWritable: account.isWritable,\n    }));\n  }\n\n  /** @internal */\n  protected getSigners(\n    remainingAccounts: CandyGuardsRemainingAccount[]\n  ): Signer[] {\n    return remainingAccounts\n      .filter((account) => account.isSigner)\n      .map((account) => account.address as Signer);\n  }\n\n  /** @internal */\n  protected assertGuardsAreRegistered<\n    T extends CandyGuardsSettings = DefaultCandyGuardSettings\n  >(\n    guards: Partial<T>,\n    groups: { label: string; guards: Partial<T> }[],\n    availableGuardNames: string[]\n  ): void {\n    const guardNames = new Set<string>();\n    const addGuardSet = (guardSet: Partial<T>) => {\n      Object.keys(guardSet).forEach((name) => {\n        if (!!guardSet[name]) {\n          guardNames.add(name);\n        }\n      });\n    };\n\n    addGuardSet(guards);\n    groups.forEach((group) => addGuardSet(group.guards));\n\n    guardNames.forEach((name) => {\n      if (!availableGuardNames.includes(name)) {\n        throw new UnregisteredCandyGuardError(name);\n      }\n    });\n  }\n}\n"],"names":["CandyMachineGuardsClient","constructor","metaplex","_defineProperty","register","guard","guards","push","get","name","find","UnregisteredCandyGuardError","all","forProgram","program","candyGuardProgram","programs","availableGuards","map","forCandyGuardProgram","getCandyGuard","serializeSettings","groups","assertGuardsAreRegistered","serializeSet","set","features","buffer","reduce","acc","index","value","Boolean","Buffer","concat","serialize","settingsSerializer","from","serializedfeatures","serializeFeatureFlags","reverse","groupCountBuffer","alloc","beet","u32","write","length","forEach","group","label","CANDY_GUARD_LABEL_SIZE","GuardGroupLabelTooLongError","labelBuffer","padEmptyChars","deserializeSettings","deserializeSet","serializedFeatures","slice","deserializeFeatureFlags","isEnabled","settings","deserialize","settingsBytes","groupsCount","read","i","removeEmptyChars","toString","resolveGroupSettings","groupLabel","availableGroups","activeGroup","SelectedGuardGroupDoesNotExistError","GuardGroupRequiredError","activeGroupGuardsWithoutNullGuards","Object","fromEntries","entries","filter","v","parseMintSettings","candyMachine","candyGuard","owner","payer","mint","guardMintSettings","guardSettings","initialAccumulator","arguments","accountMetas","signers","mintSettings","mintSettingsParser","parsedSettings","address","candyGuardAuthority","authorityAddress","accounts","getAccountMetas","remainingAccounts","getSigners","parseRouteSettings","routeSettings","guardManifest","routeSettingsParser","GuardRouteNotSupportedError","GuardNotEnabledError","account","pubkey","isSigner","publicKey","isWritable","availableGuardNames","guardNames","Set","addGuardSet","guardSet","keys","add","includes"],"mappings":"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"}