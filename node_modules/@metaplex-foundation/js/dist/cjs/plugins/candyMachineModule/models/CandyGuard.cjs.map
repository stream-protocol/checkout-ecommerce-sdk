{"version":3,"file":"CandyGuard.cjs","sources":["../../../../../src/plugins/candyMachineModule/models/CandyGuard.ts"],"sourcesContent":["import {\n  CandyGuard as MplCandyGuard,\n  candyGuardBeet,\n} from '@metaplex-foundation/mpl-candy-guard';\nimport { CANDY_GUARD_DATA } from '../constants';\nimport { CandyGuardsSettings } from '../guards';\nimport {\n  AccountInfo,\n  assertModel,\n  createSerializerFromSolitaType,\n  deserializeAccount,\n  isModel,\n  Model,\n  Pda,\n  PublicKey,\n  toAccountInfo,\n  UnparsedAccount,\n} from '@/types';\nimport { Metaplex } from '@/Metaplex';\n\n/** @group Models */\nexport type CandyGuard<T extends CandyGuardsSettings> = Model<'candyGuard'> & {\n  /** The PDA address of the Candy Guard account. */\n  readonly address: Pda;\n\n  /** Blockchain data of the Candy Guard account. */\n  readonly accountInfo: AccountInfo;\n\n  /** The address used to derive the Candy Guard's PDA. */\n  readonly baseAddress: PublicKey;\n\n  /** The address allowed to update the Candy Guard account */\n  readonly authorityAddress: PublicKey;\n\n  /**\n   * This object provides the settings for all guards in the Candy Guard.\n   *\n   * If a guard is set to `null`, it is disabled. Otherwise, it is enabled and\n   * the object contains the settings for that guard.\n   */\n  readonly guards: T;\n\n  /**\n   * This parameter allows us to create multiple minting groups that have their\n   * own set of requirements â€” i.e. guards.\n   *\n   * When groups are provided, the `guards` parameter becomes a set of default\n   * guards that will be applied to all groups. If a specific group enables\n   * a guard that is also present in the default guards, the group's guard\n   * will override the default guard.\n   *\n   * Each group functions the same way as the `guards` parameter, where a guard\n   * is enabled if and only if it is not `null`.\n   */\n  readonly groups: { label: string; guards: T }[];\n};\n\n/** @group Model Helpers */\nexport const isCandyGuard = <T extends CandyGuardsSettings>(\n  value: any\n): value is CandyGuard<T> => isModel('candyGuard', value);\n\n/** @group Model Helpers */\nexport function assertCandyGuard<T extends CandyGuardsSettings>(\n  value: any\n): asserts value is CandyGuard<T> {\n  assertModel(isCandyGuard(value), `Expected CandyGuard model`);\n}\n\n/** @group Model Helpers */\nexport const toCandyGuard = <T extends CandyGuardsSettings>(\n  account: UnparsedAccount,\n  metaplex: Metaplex\n): CandyGuard<T> => {\n  const candyGuardSerializer = createSerializerFromSolitaType(\n    MplCandyGuard,\n    candyGuardBeet.description\n  );\n  const parsedCandyGuard = deserializeAccount(account, candyGuardSerializer);\n\n  const { guards, groups } = metaplex\n    .candyMachines()\n    .guards()\n    .deserializeSettings<T>(\n      account.data.slice(CANDY_GUARD_DATA),\n      account.owner\n    );\n\n  return {\n    model: 'candyGuard',\n    address: new Pda(parsedCandyGuard.publicKey, parsedCandyGuard.data.bump),\n    accountInfo: toAccountInfo(account),\n    baseAddress: parsedCandyGuard.data.base,\n    authorityAddress: parsedCandyGuard.data.authority,\n    guards,\n    groups,\n  };\n};\n"],"names":["isCandyGuard","value","isModel","assertCandyGuard","assertModel","toCandyGuard","account","metaplex","candyGuardSerializer","createSerializerFromSolitaType","MplCandyGuard","candyGuardBeet","description","parsedCandyGuard","deserializeAccount","guards","groups","candyMachines","deserializeSettings","data","slice","CANDY_GUARD_DATA","owner","model","address","Pda","publicKey","bump","accountInfo","toAccountInfo","baseAddress","base","authorityAddress","authority"],"mappings":";;;;;;;;;;;AAyDA;AACO,MAAMA,YAAY,GACvBC,KAD0B,IAECC,aAAO,CAAC,YAAD,EAAeD,KAAf,EAF7B;AAIP;;AACO,SAASE,gBAAT,CACLF,KADK,EAE2B;AAChCG,EAAAA,iBAAW,CAACJ,YAAY,CAACC,KAAD,CAAb,EAAuB,2BAAvB,CAAX,CAAA;AACD,CAAA;AAED;;MACaI,YAAY,GAAG,CAC1BC,OAD0B,EAE1BC,QAF0B,KAGR;EAClB,MAAMC,oBAAoB,GAAGC,yCAA8B,CACzDC,wBADyD,EAEzDC,4BAAc,CAACC,WAF0C,CAA3D,CAAA;AAIA,EAAA,MAAMC,gBAAgB,GAAGC,6BAAkB,CAACR,OAAD,EAAUE,oBAAV,CAA3C,CAAA;EAEA,MAAM;IAAEO,MAAF;AAAUC,IAAAA,MAAAA;GAAWT,GAAAA,QAAQ,CAChCU,aADwB,EAAA,CAExBF,MAFwB,EAGxBG,CAAAA,mBAHwB,CAIvBZ,OAAO,CAACa,IAAR,CAAaC,KAAb,CAAmBC,0BAAnB,CAJuB,EAKvBf,OAAO,CAACgB,KALe,CAA3B,CAAA;EAQA,OAAO;AACLC,IAAAA,KAAK,EAAE,YADF;AAELC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAQZ,gBAAgB,CAACa,SAAzB,EAAoCb,gBAAgB,CAACM,IAAjB,CAAsBQ,IAA1D,CAFJ;AAGLC,IAAAA,WAAW,EAAEC,qBAAa,CAACvB,OAAD,CAHrB;AAILwB,IAAAA,WAAW,EAAEjB,gBAAgB,CAACM,IAAjB,CAAsBY,IAJ9B;AAKLC,IAAAA,gBAAgB,EAAEnB,gBAAgB,CAACM,IAAjB,CAAsBc,SALnC;IAMLlB,MANK;AAOLC,IAAAA,MAAAA;GAPF,CAAA;AASD;;;;;;"}