{"version":3,"file":"CandyMachinePdasClient.cjs","sources":["../../../../src/plugins/candyMachineModule/CandyMachinePdasClient.ts"],"sourcesContent":["import { Buffer } from 'buffer';\nimport type { Metaplex } from '@/Metaplex';\nimport { Pda, Program, PublicKey } from '@/types';\n\n/**\n * This client allows you to build PDAs related to the Candy Machine module.\n *\n * @see {@link CandyMachineClient}\n * @group Module Pdas\n */\nexport class CandyMachinePdasClient {\n  constructor(protected readonly metaplex: Metaplex) {}\n\n  /** Finds the Authority PDA for the given Candy Machine. */\n  authority({\n    candyMachine,\n    programs,\n  }: {\n    /** The Candy Machine address */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyMachine(programs);\n    return Pda.find(program.address, [\n      Buffer.from('candy_machine', 'utf8'),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /** Finds the Candy Guard PDA for the given base address it derives from. */\n  candyGuard({\n    base,\n    programs,\n  }: {\n    /** The base address which the Candy Guard PDA derives from. */\n    base: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('candy_guard', 'utf8'),\n      base.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Mint Limit Counter PDA that keeps track of how many\n   * NFTs where minted by a given user on a given Candy Machine.\n   */\n  mintLimitCounter({\n    id,\n    user,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** A unique identifier in the context of a Candy Machine/Candy Guard combo. */\n    id: number;\n    /** The address of the wallet trying to mint. */\n    user: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('mint_limit', 'utf8'),\n      Buffer.from([id]),\n      user.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Allow List Proof PDA that keeps track of whether a user\n   * has provided the correct Merkle Proof for the given Merkle Root.\n   */\n  merkleProof({\n    merkleRoot,\n    user,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** The Merkle Root used when verifying the user. */\n    merkleRoot: Uint8Array;\n    /** The address of the wallet trying to mint. */\n    user: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('allow_list', 'utf8'),\n      merkleRoot,\n      user.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n\n  /**\n   * Finds the Freeze PDA used as an escrow account by\n   * the freezeSolPayment and freezeTokenPayment guards.\n   */\n  freezeEscrow({\n    destination,\n    candyMachine,\n    candyGuard,\n    programs,\n  }: {\n    /** The wallet that will eventually receive the funds. */\n    destination: PublicKey;\n    /** The address of the Candy Guard account. */\n    candyGuard: PublicKey;\n    /** The address of the Candy Machine account. */\n    candyMachine: PublicKey;\n    /** An optional set of programs that override the registered ones. */\n    programs?: Program[];\n  }): Pda {\n    const program = this.metaplex.programs().getCandyGuard(programs);\n    return Pda.find(program.address, [\n      Buffer.from('freeze_escrow', 'utf8'),\n      destination.toBuffer(),\n      candyGuard.toBuffer(),\n      candyMachine.toBuffer(),\n    ]);\n  }\n}\n"],"names":["CandyMachinePdasClient","constructor","metaplex","authority","candyMachine","programs","program","getCandyMachine","Pda","find","address","Buffer","from","toBuffer","candyGuard","base","getCandyGuard","mintLimitCounter","id","user","merkleProof","merkleRoot","freezeEscrow","destination"],"mappings":"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"}